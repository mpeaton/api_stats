NumPy API,,,,,,
Functions,Doc,,,,Methods,
abs,"absolute(x, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) Calculate the absolute value element-wise. Parameters ---------- x : array_like",Computation/Transformation,map,,T,Computation/Transformation
absolute,"absolute(x, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) Calculate the absolute value element-wise. Parameters ---------- x : array_like",Computation/Transformation,map,,all,Computation/Transformation
absolute_import,?,Other,Unkown,,any,Computation/Transformation
add,"add(x1, x2, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) Add arguments element-wise. Parameters ---------- x1, x2 : array_like     The array",Computation/Transformation,zipmap,,argmax,Computation/Transformation
add_docstring,"add_docstring(obj, docstring) Add a docstring to a built-in obj if possible. If the obj already has a docstring raise a RuntimeError If this routine does not know how to add a docstring to the object",Other,other,,argmin,Computation/Transformation
add_newdoc,"Adds documentation to obj which is in module place. If doc is a string add it to obj as a docstring If doc is a tuple, then the first element is interpreted as    an attribute of obj and the second as",Other,other,,argpartition,Computation/Transformation
add_newdoc_ufunc,"add_ufunc_docstring(ufunc, new_docstring) Replace the docstring for a ufunc with new_docstring. This method will only work if the current docstring for the ufunc is NULL. (At the C level, i.e. when uf",Other,other,,argsort,Computation/Transformation
add_newdocs,This is only meant to add docs to objects defined in C-extension modules. The purpose is to allow easier editing of the docstrings without requiring a re-compile. NOTE: Many of the methods of ndarray,Other,other,,astype,Computation/Transformation
alen,Return the length of the first dimension of the input array. Parameters ---------- a : array_like    Input array. Returns ------- alen : int    Length of the first dimension of `a`. See Also --------,MetaData/Attributes,size,,base,MetaData/Attributes
all,Test whether all array elements along a given axis evaluate to True. Parameters ---------- a : array_like     Input array or object that can be converted to an array. axis : None or int or tuple of in,Computation/Transformation,reduce,,byteswap,Computation/Transformation
allclose,"Returns True if two arrays are element-wise equal within a tolerance. The tolerance values are positive, typically very small numbers.  The relative difference (`rtol` * abs(`b`)) and the absolute dif",Computation/Transformation,zipmap,,choose,Creation/Reading
alltrue,Check if all elements of input array are true. See Also -------- numpy.all : Equivalent function; see for details.,Computation/Transformation,reduce,,clip,Computation/Transformation
amax,"Return the maximum of an array or maximum along an axis. Parameters ---------- a : array_like     Input data. axis : None or int or tuple of ints, optional     Axis or axes along which to operate.  By",Computation/Transformation,reduce,,compress,Indexing/Subsetting
amin,"Return the minimum of an array or minimum along an axis. Parameters ---------- a : array_like     Input data. axis : None or int or tuple of ints, optional     Axis or axes along which to operate.  By",Computation/Transformation,reduce,,conj,Computation/Transformation
angle,"Return the angle of the complex argument. Parameters ---------- z : array_like     A complex number or sequence of complex numbers. deg : bool, optional     Return angle in degrees if True, radians if",Computation/Transformation,map,,conjugate,Computation/Transformation
any,Test whether any array element along a given axis evaluates to True. Returns single boolean unless `axis` is not ``None`` Parameters ---------- a : array_like     Input array or object that can be con,Computation/Transformation,reduce,,copy,Creation/Reading
append,Append values to the end of an array. Parameters ---------- arr : array_like     Values are appended to a copy of this array. values : array_like     These values are appended to a copy of `arr`.  It,Creation/Reading,combine/split,,ctypes,MetaData/Attributes
apply_along_axis,"Apply a function to 1-D slices along the given axis. Execute `func1d(a, *args)` where `func1d` operates on 1-D arrays and `a` is a 1-D slice of `arr` along `axis`. This is equivalent to (but faster th",Computation/Transformation,reduce,,cumprod,Computation/Transformation
apply_over_axes,"Apply a function repeatedly over multiple axes. `func` is called as `res = func(a, axis)`, where `axis` is the first element of `axes`.  The result `res` of the function call must have either the same",Computation/Transformation,reduce,,cumsum,Computation/Transformation
arange,"arange([start,] stop[, step,], dtype=None) Return evenly spaced values within a given interval. Values are generated within the half-open interval ``[start, stop)`` (in other words, the interval inclu",Creation/Reading,function,,data,MetaData/Attributes
arccos,"arccos(x, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) Trigonometric inverse cosine, element-wise. The inverse of `cos` so that, if ``y = co",Computation/Transformation,map,,diagonal,Indexing/Subsetting
arccosh,"arccosh(x, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) Inverse hyperbolic cosine, element-wise. Parameters ---------- x : array_like     In",Computation/Transformation,map,,dot,Computation/Transformation
arcsin,"arcsin(x, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) Inverse sine, element-wise. Parameters ---------- x : array_like     `y`-coordinate o",Computation/Transformation,map,,dtype,MetaData/Attributes
arcsinh,"arcsinh(x, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) Inverse hyperbolic sine element-wise. Parameters ---------- x : array_like     Input",Computation/Transformation,map,,dump,Reporting/Output
arctan,"arctan(x, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) Trigonometric inverse tangent, element-wise. The inverse of tan, so that if ``y = tan",Computation/Transformation,map,,dumps,Reporting/Output
arctan2,"arctan2(x1, x2, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) Element-wise arc tangent of ``x1/x2`` choosing the quadrant correctly. The quad",Computation/Transformation,map,,fill,Creation/Reading
arctanh,"arctanh(x, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) Inverse hyperbolic tangent element-wise. Parameters ---------- x : array_like     In",Computation/Transformation,map,,flags,MetaData/Attributes
argmax,"Returns the indices of the maximum values along an axis. Parameters ---------- a : array_like     Input array. axis : int, optional     By default, the index is into the flattened array, otherwise",Computation/Transformation,reduce w/ index,,flat,Indexing/Subsetting
argmin,"Returns the indices of the minimum values along an axis. Parameters ---------- a : array_like     Input array. axis : int, optional     By default, the index is into the flattened array, otherwise",Computation/Transformation,reduce w/ index,,flatten,Indexing/Subsetting
argpartition,Perform an indirect partition along the given axis using the algorithm specified by the `kind` keyword. It returns an array of indices of the same shape as `a` that index data along the given axis in,Computation/Transformation,reduce w/ index,,getfield,Indexing/Subsetting
argsort,Returns the indices that would sort an array. Perform an indirect sort along the given axis using the algorithm specified by the `kind` keyword. It returns an array of indices of the same shape as `a`,Computation/Transformation,reduce w/ index,,imag,Indexing/Subsetting
argwhere,"Find the indices of array elements that are non-zero, grouped by element. Parameters ---------- a : array_like     Input data. Returns ------- index_array : ndarray     Indices of elements that are no",Computation/Transformation,map w/ index,,item,Indexing/Subsetting
around,"Evenly round to the given number of decimals. Parameters ---------- a : array_like     Input data. decimals : int, optional     Number of decimal places to round to (default: 0).  If     decimals is n",Computation/Transformation,map,,itemset,Indexing/Subsetting
array,"array(object, dtype=None, copy=True, order='K', subok=False, ndmin=0) Create an array. Parameters ---------- object : array_like     An array, any object exposing the array interface, an object whose",Creation/Reading,from type,,itemsize,MetaData/Attributes
array2string,"Return a string representation of an array. Parameters ---------- a : array_like     Input array. max_line_width : int, optional     The maximum number of columns the string should span. Newline     c",Reporting/Output,to string,,max,Computation/Transformation
array_equal,"True if two arrays have the same shape and elements, False otherwise. Parameters ---------- a1, a2 : array_like     Input arrays. Returns ------- b : bool     Returns True if the arrays are equal. See",Computation/Transformation,zipmap,,mean,Computation/Transformation
array_equiv,"Returns True if input arrays are shape consistent and all elements equal. Shape consistent means they are either the same shape, or one input array can be broadcasted to create the same shape as the o",Computation/Transformation,zipmap,,min,Computation/Transformation
array_repr,"Return the string representation of an array. Parameters ---------- arr : ndarray     Input array. max_line_width : int, optional     The maximum number of columns the string should span. Newline",Reporting/Output,to string,,nbytes,MetaData/Attributes
array_split,Split an array into multiple sub-arrays. Please refer to the ``split`` documentation.  The only difference between these functions is that ``array_split`` allows `indices_or_sections` to be an integer,Creation/Reading,combine/split,,ndim,MetaData/Attributes
array_str,"Return a string representation of the data in an array. The data in the array is returned as a single string.  This function is similar to `array_repr`, the difference being that `array_repr` also ret",Reporting/Output,to string,,newbyteorder,Computation/Transformation
asanyarray,"Convert the input to an ndarray, but pass ndarray subclasses through. Parameters ---------- a : array_like     Input data, in any form that can be converted to an array.  This     includes scalars, li",Creation/Reading,from type,,nonzero,Indexing/Subsetting
asarray,"Convert the input to an array. Parameters ---------- a : array_like     Input data, in any form that can be converted to an array.  This     includes lists, lists of tuples, tuples, tuples of tuples,",Creation/Reading,from type,,partition,Computation/Transformation
asarray_chkfinite,"Convert the input to an array, checking for NaNs or Infs. Parameters ---------- a : array_like     Input data, in any form that can be converted to an array.  This     includes lists, lists of tuples,",Creation/Reading,from type,,prod,Computation/Transformation
ascontiguousarray,"Return a contiguous array in memory (C order). Parameters ---------- a : array_like     Input array. dtype : str or dtype object, optional     Data-type of returned array. Returns ------- out : ndarra",Creation/Reading,from type,,ptp,Computation/Transformation
asfarray,"Return an array converted to a float type. Parameters ---------- a : array_like     The input array. dtype : str or dtype object, optional     Float type code to coerce input array `a`.  If `dtype` is",Creation/Reading,from type,,put,Computation/Transformation
asfortranarray,"Return an array laid out in Fortran order in memory. Parameters ---------- a : array_like     Input array. dtype : str or dtype object, optional     By default, the data-type is inferred from the inpu",Creation/Reading,from type,,ravel,Computation/Transformation
asmatrix,"Interpret the input as a matrix. Unlike `matrix`, `asmatrix` does not make a copy if the input is already a matrix or an ndarray.  Equivalent to ``matrix(data, copy=False)``. Parameters ---------- dat",Creation/Reading,from type,,real,Indexing/Subsetting
asscalar,Convert an array of size 1 to its scalar equivalent. Parameters ---------- a : ndarray     Input array of size 1. Returns ------- out : scalar     Scalar representation of `a`. The output data type is,Creation/Reading,from type,,repeat,Creation/Reading
atleast_1d,"Convert inputs to arrays with at least one dimension. Scalar inputs are converted to 1-dimensional arrays, whilst higher-dimensional inputs are preserved. Parameters ---------- arys1, arys2, ... : arr",Creation/Reading,from type,,reshape,Creation/Reading
atleast_2d,"View inputs as arrays with at least two dimensions. Parameters ---------- arys1, arys2, ... : array_like     One or more array-like sequences.  Non-array inputs are converted     to arrays.  Arrays th",Creation/Reading,from type,,resize,Creation/Reading
atleast_3d,"View inputs as arrays with at least three dimensions. Parameters ---------- arys1, arys2, ... : array_like     One or more array-like sequences.  Non-array inputs are converted to     arrays.  Arrays",Creation/Reading,from type,,round,Computation/Transformation
average,"Compute the weighted average along the specified axis. Parameters ---------- a : array_like     Array containing data to be averaged. If `a` is not an array, a     conversion is attempted. axis : None",Computation/Transformation,reduce,,searchsorted,Indexing/Subsetting
bartlett,"Return the Bartlett window. The Bartlett window is very similar to a triangular window, except that the end points are at zero.  It is often used in signal processing for tapering a signal, without ge",Creation/Reading,function,,setfield,Other
base_repr,"Return a string representation of a number in the given base system. Parameters ---------- number : int     The value to convert. Positive and negative values are handled. base : int, optional     Con",Reporting/Output,to string,,setflags,Other
bench,"Run benchmarks for module using nose. Parameters ---------- label : {'fast', 'full', '', attribute identifier}, optional     Identifies the benchmarks to run. This can be a string to pass to     the n",Other,other,,shape,MetaData/Attributes
binary_repr,"Return the binary representation of the input number as a string. For negative numbers, if width is not given, a minus sign is added to the front. If width is given, the two's complement of the number",Reporting/Output,to string,,size,MetaData/Attributes
bincount,"bincount(x, weights=None, minlength=0) Count number of occurrences of each value in array of non-negative ints. The number of bins (of size 1) is one larger than the largest value in `x`. If `minlengt",Computation/Transformation,reduce,,sort,Computation/Transformation
bitwise_and,"bitwise_and(x1, x2, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) Compute the bit-wise AND of two arrays element-wise. Computes the bit-wise",Computation/Transformation,zipmap,,squeeze,Computation/Transformation
bitwise_not,"invert(x, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) Compute bit-wise inversion, or bit-wise NOT, element-wise. Computes the bit-wise NOT",Computation/Transformation,zipmap,,std,Computation/Transformation
bitwise_or,"bitwise_or(x1, x2, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) Compute the bit-wise OR of two arrays element-wise. Computes the bit-wise OR",Computation/Transformation,zipmap,,strides,MetaData/Attributes
bitwise_xor,"bitwise_xor(x1, x2, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) Compute the bit-wise XOR of two arrays element-wise. Computes the bit-wise",Computation/Transformation,zipmap,,sum,Computation/Transformation
blackman,Return the Blackman window. The Blackman window is a taper formed by using the first three terms of a summation of cosines. It was designed to have close to the minimal leakage possible.  It is close,Creation/Reading,function,,swapaxes,Computation/Transformation
block,"Assemble an nd-array from nested lists of blocks. Blocks in the innermost lists are concatenated (see `concatenate`) along the last dimension (-1), then these are concatenated along the second-last di",Creation/Reading,combine/split,,take,Indexing/Subsetting
bmat,"Build a matrix object from a string, nested sequence, or array. Parameters ---------- obj : str or array_like     Input data. If a string, variables in the current scope may be     referenced by name.",Creation/Reading,from type,,tobytes,Reporting/Output
bool,"bool(x) -> bool Returns True when the argument x is true, False otherwise. The builtins True and False are the only two instances of the class bool. The class bool is a subclass of the class int, and",Other,from type,,tofile,Reporting/Output
bool8,NumPy's Boolean type.  Character code: ``?``.  Alias: bool8,Creation/Reading,from type,,tolist,Reporting/Output
bool_,NumPy's Boolean type.  Character code: ``?``.  Alias: bool8,Creation/Reading,from type,,tostring,Reporting/Output
broadcast,"Produce an object that mimics broadcasting. Parameters ---------- in1, in2, ... : array_like     Input parameters. Returns ------- b : broadcast object     Broadcast the input parameters against one a",Indexing/Subsetting,reshape,,trace,Computation/Transformation
broadcast_arrays,"Broadcast any number of arrays against each other. Parameters ---------- `*args` : array_likes     The arrays to broadcast. subok : bool, optional     If True, then sub-classes will be passed-through,",Indexing/Subsetting,reshape,,transpose,Computation/Transformation
broadcast_to,"Broadcast an array to a new shape. Parameters ---------- array : array_like     The array to broadcast. shape : tuple     The shape of the desired array. subok : bool, optional     If True, then sub-c",Indexing/Subsetting,reshape,,var,Computation/Transformation
busday_count,"busday_count(begindates, enddates, weekmask='1111100', holidays=[], busdaycal=None, out=None) Counts the number of valid days between `begindates` and `enddates`, not including the day of `enddates`.",Computation/Transformation,zipmap,,view,Creation/Reading
busday_offset,"busday_offset(dates, offsets, roll='raise', weekmask='1111100', holidays=None, busdaycal=None, out=None) First adjusts the date to fall on a valid day according to the ``roll`` rule, then applies offs",Computation/Transformation,zipmap,,,Computation/Transformation
busdaycalendar,"busdaycalendar(weekmask='1111100', holidays=None) A business day calendar object that efficiently stores information defining valid days for the busday family of functions. The default valid days are",Computation/Transformation,from type,,,Reporting/Output
byte,8-bit integer. Character code ``b``. C char compatible.,Creation/Reading,from type,,,Reporting/Output
byte_bounds,"Returns pointers to the end-points of an array. Parameters ---------- a : ndarray     Input array. It must conform to the Python-side of the array     interface. Returns ------- (low, high) : tuple of",Reporting/Output,to type,,,MetaData/Attributes
bytes0,"bytes(iterable_of_ints) -> bytes bytes(string, encoding[, errors]) -> bytes bytes(bytes_or_buffer) -> immutable copy of bytes_or_buffer bytes(int) -> bytes object of size given by the parameter initia",Creation/Reading,from type,,,Reporting/Output
bytes_,"bytes(iterable_of_ints) -> bytes bytes(string, encoding[, errors]) -> bytes bytes(bytes_or_buffer) -> immutable copy of bytes_or_buffer bytes(int) -> bytes object of size given by the parameter initia",Creation/Reading,from type,,,Reporting/Output
c_,"Translates slice objects to concatenation along the second axis. This is short-hand for ``np.r_['-1,2,0', index expression]``, which is useful because of its common occurrence. In particular, arrays w",Creation/Reading,combine/split,,,Creation/Reading
can_cast,"can_cast(from_, to, casting='safe') Returns True if cast between data types can occur according to the casting rule.  If from is a scalar or array scalar, also returns True if the scalar value can be",MetaData/Attributes,dtype,,,MetaData/Attributes
cast,"Base object for a dictionary for look-up with any alias for an array dtype. Instances of `_typedict` can not be used as dictionaries directly, first they have to be populated.",Other,Unkown,,,MetaData/Attributes
cbrt,"cbrt(x, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) Return the cube-root of an array, element-wise. .. versionadded:: 1.10.0 Parameters ---",Computation/Transformation,map,,,Computation/Transformation
cdouble,Composed of two 64 bit floats,Creation/Reading,from type,,,Reporting/Output
ceil,"ceil(x, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) Return the ceiling of the input, element-wise. The ceil of the scalar `x` is the smalle",Computation/Transformation,map,,,Computation/Transformation
cfloat,Composed of two 64 bit floats,Creation/Reading,from type,,,Reporting/Output
char,"This module contains a set of functions for vectorized string operations and methods. .. note::    The `chararray` class exists for backwards compatibility with    Numarray, it is not recommended for",Other,Unkown,,,Other
character,"Base class for numpy scalar types. Class from which most (all?) numpy scalar types are derived.  For consistency, exposes the same API as `ndarray`, despite many consequent attributes being either ""ge",Creation/Reading,from type,,,Reporting/Output
chararray,"chararray(shape, itemsize=1, unicode=False, buffer=None, offset=0,           strides=None, order=None) Provides a convenient view on arrays of string and unicode values. .. note::    The `chararray` c",Creation/Reading,from type,,,Reporting/Output
choose,"Construct an array from an index array and a set of arrays to choose from. First of all, if confused or uncertain, definitely look at the Examples - in its full generality, this function is less simpl",Creation/Reading,from type,,,Indexing/Subsetting
clip,"Clip (limit) the values in an array. Given an interval, values outside the interval are clipped to the interval edges.  For example, if an interval of ``[0, 1]`` is specified, values smaller than 0 be",Computation/Transformation,map,,,Computation/Transformation
clongdouble,Composed of two 128 bit floats,Creation/Reading,from type,,,Reporting/Output
clongfloat,Composed of two 128 bit floats,Creation/Reading,from type,,,Reporting/Output
column_stack,"Stack 1-D arrays as columns into a 2-D array. Take a sequence of 1-D arrays and stack them as columns to make a single 2-D array. 2-D arrays are stacked as-is, just like with `hstack`.  1-D arrays are",Creation/Reading,combine/split,,,Creation/Reading
common_type,"Return a scalar type which is common to the input arrays. The return type will always be an inexact (i.e. floating point) scalar type, even if all the arrays are integer arrays. If one of the inputs i",MetaData/Attributes,dtype,,,Other
compare_chararrays,?,Other,Unkown,,,
compat,"Compatibility module. This module contains duplicated code from Python itself or 3rd party extensions, which may be included for the following reasons:   * compatibility   * we may only need a small s",Other,other,,,
complex,"complex(real[, imag]) -> complex number Create a complex number from a real part and an optional imaginary part. This is equivalent to (real + imag*1j) where imag defaults to 0.",Creation/Reading,from type,,,Reporting/Output
complex128,Composed of two 64 bit floats,Creation/Reading,from type,,,Reporting/Output
complex256,Composed of two 128 bit floats,Creation/Reading,from type,,,Reporting/Output
complex64,Composed of two 32 bit floats,Creation/Reading,from type,,,Reporting/Output
complex_,Composed of two 64 bit floats,Creation/Reading,from type,,,Reporting/Output
complexfloating,"Base class for numpy scalar types. Class from which most (all?) numpy scalar types are derived.  For consistency, exposes the same API as `ndarray`, despite many consequent attributes being either ""ge",Creation/Reading,from type,,,Reporting/Output
compress,"Return selected slices of an array along given axis. When working along a given axis, a slice along that axis is returned in `output` for each index where `condition` evaluates to True. When working o",Indexing/Subsetting,index,,,Indexing/Subsetting
concatenate,"concatenate((a1, a2, ...), axis=0, out=None) Join a sequence of arrays along an existing axis. Parameters ---------- a1, a2, ... : sequence of array_like     The arrays must have the same shape, excep",Creation/Reading,combine/split,,,Creation/Reading
conj,"conjugate(x, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) Return the complex conjugate, element-wise. The complex conjugate of a complex num",Computation/Transformation,map,,,Computation/Transformation
conjugate,"conjugate(x, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) Return the complex conjugate, element-wise. The complex conjugate of a complex num",Computation/Transformation,map,,,Computation/Transformation
convolve,"Returns the discrete, linear convolution of two one-dimensional sequences. The convolution operator is often seen in signal processing, where it models the effect of a linear time-invariant system on",Computation/Transformation,reduce w/ index,,,Computation/Transformation
copy,"Return an array copy of the given object. Parameters ---------- a : array_like     Input data. order : {'C', 'F', 'A', 'K'}, optional     Controls the memory layout of the copy. 'C' means C-order,",Creation/Reading,combine/split,,,Creation/Reading
copysign,"copysign(x1, x2, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) Change the sign of x1 to that of x2, element-wise. If both arguments are array",Computation/Transformation,zipmap,,,Creation/Reading
copyto,"copyto(dst, src, casting='same_kind', where=True) Copies values from one array to another, broadcasting as necessary. Raises a TypeError if the `casting` rule is violated, and if `where` is provided,",Creation/Reading,zipmap,,,Computation/Transformation
core,Defines a multi-dimensional array and useful procedures for Numerical computation. Functions -   array                      - NumPy Array construction -   zeros                      - Return an array,Other,Unkown,,,
corrcoef,"Return Pearson product-moment correlation coefficients. Please refer to the documentation for `cov` for more detail.  The relationship between the correlation coefficient matrix, `R`, and the covarian",Computation/Transformation,reduce w/ index,,,
correlate,Cross-correlation of two 1-dimensional sequences. This function computes the correlation as generally defined in signal processing texts::     c_{av}[k] = sum_n a[n+k] * conj(v[n]) with a and v sequen,Computation/Transformation,reduce w/ index,,,
cos,"cos(x, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) Cosine element-wise. Parameters ---------- x : array_like     Input array in radians. ou",Computation/Transformation,map,,,
cosh,"cosh(x, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) Hyperbolic cosine, element-wise. Equivalent to ``1/2 * (np.exp(x) + np.exp(-x))`` and `",Computation/Transformation,map,,,
count_nonzero,"Counts the number of non-zero values in the array ``a``. The word ""non-zero"" is in reference to the Python 2.x built-in method ``__nonzero__()`` (renamed ``__bool__()`` in Python 3.x) of Python object",Computation/Transformation,reduce,,,
cov,"Estimate a covariance matrix, given data and weights. Covariance indicates the level to which two variables vary together. If we examine N-dimensional samples, :math:`X = [x_1, x_2, ... x_N]^T`, then",Computation/Transformation,reduce w/ index,,,
cross,"Return the cross product of two (arrays of) vectors. The cross product of `a` and `b` in :math:`R^3` is a vector perpendicular to both `a` and `b`.  If `a` and `b` are arrays of vectors, the vectors a",Computation/Transformation,reduce w/ index,,,
csingle,Composed of two 32 bit floats,Creation/Reading,from type,,,
ctypeslib,\============================ ``ctypes`` Utility Functions ============================ See Also --------- load_library : Load a C library. ndpointer : Array restype/argtype with verification. as_ctype,Other,other,,,
cumprod,"Return the cumulative product of elements along a given axis. Parameters ---------- a : array_like     Input array. axis : int, optional     Axis along which the cumulative product is computed.  By de",Computation/Transformation,reduce,,,
cumproduct,Return the cumulative product over the given axis. See Also -------- cumprod : equivalent function; see for details.,Computation/Transformation,reduce,,,
cumsum,"Return the cumulative sum of the elements along a given axis. Parameters ---------- a : array_like     Input array. axis : int, optional     Axis along which the cumulative sum is computed. The defaul",Computation/Transformation,reduce,,,
datetime64,"Base class for numpy scalar types. Class from which most (all?) numpy scalar types are derived.  For consistency, exposes the same API as `ndarray`, despite many consequent attributes being either ""ge",Creation/Reading,from type,,,
datetime_as_string,"datetime_as_string(arr, unit=None, timezone='naive', casting='same_kind') Convert an array of datetimes into an array of strings. Parameters ---------- arr : array_like of datetime64     The array of",Reporting/Output,to string,,,
datetime_data,"datetime_data(dtype, /) Get information about the step size of a date or time type. The returned tuple can be passed as the second argument of `datetime64` and `timedelta64`. Parameters ---------- dty",Computation/Transformation,map,,,
deg2rad,"deg2rad(x, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) Convert angles from degrees to radians. Parameters ---------- x : array_like     Ang",Computation/Transformation,map,,,
degrees,"degrees(x, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) Convert angles from radians to degrees. Parameters ---------- x : array_like     Inp",Computation/Transformation,map,,,
delete,"Return a new array with sub-arrays along an axis deleted. For a one dimensional array, this returns those entries not returned by `arr[obj]`. Parameters ---------- arr : array_like   Input array. obj",Indexing/Subsetting,index,,,
deprecate,"Issues a DeprecationWarning, adds warning to `old_name`'s docstring, rebinds ``old_name.__name__`` and returns the new function object. This function may also be used as a decorator. Parameters ------",Other,other,,,
deprecate_with_doc,?,Other,other,,,
diag,Extract a diagonal or construct a diagonal array. See the more detailed documentation for ``numpy.diagonal`` if you use this function to extract a diagonal and wish to write to the resulting array; wh,Creation/Reading,,,,
diag_indices,"Return the indices to access the main diagonal of an array. This returns a tuple of indices that can be used to access the main diagonal of an array `a` with ``a.ndim >= 2`` dimensions and shape (n, n",,,,,
diag_indices_from,"Return the indices to access the main diagonal of an n-dimensional array. See `diag_indices` for full details. Parameters ---------- arr : array, at least 2-D See Also -------- diag_indices Notes ----",,,,,
diagflat,"Create a two-dimensional array with the flattened input as a diagonal. Parameters ---------- v : array_like     Input data, which is flattened and set as the `k`-th     diagonal of the output. k : int",,,,,
diagonal,"Return specified diagonals. If `a` is 2-D, returns the diagonal of `a` with the given offset, i.e., the collection of elements of the form ``a[i, i+offset]``.  If `a` has more than two dimensions, the",,,,,
diff,"Calculate the n-th discrete difference along the given axis. The first difference is given by ``out[n] = a[n+1] - a[n]`` along the given axis, higher differences are calculated by using `diff` recursi",Computation/Transformation,,,,
digitize,"digitize(x, bins, right=False) Return the indices of the bins to which each value in input array belongs. Each index ``i`` returned is such that ``bins[i-1] <= x < bins[i]`` if `bins` is monotonically",Computation/Transformation,reduce w/ index,,,
disp,"Display a message on a device. Parameters ---------- mesg : str     Message to display. device : object     Device to write message. If None, defaults to ``sys.stdout`` which is     very similar to ``",Reporting/Output,to string,,,
divide,"true_divide(x1, x2, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) Returns a true division of the inputs, element-wise. Instead of the Python",Computation/Transformation,map,,,
division,?,Computation/Transformation,map,,,
divmod,"divmod(x1, x2[, out1, out2], / [, out=(None, None)], *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) Return element-wise quotient and remainder simultaneous",Computation/Transformation,map,,,
dot,"dot(a, b, out=None) Dot product of two arrays. Specifically, - If both `a` and `b` are 1-D arrays, it is inner product of vectors   (without complex conjugation). - If both `a` and `b` are 2-D arrays,",Computation/Transformation,,,,
double,64-bit floating-point number. Character code 'd'. Python float compatible.,Creation/Reading,from type,,,
dsplit,"Split array into multiple sub-arrays along the 3rd axis (depth). Please refer to the `split` documentation.  `dsplit` is equivalent to `split` with ``axis=2``, the array is always split along the thir",Creation/Reading,combine/split,,,
dstack,"Stack arrays in sequence depth wise (along third axis). This is equivalent to concatenation along the third axis after 2-D arrays of shape `(M,N)` have been reshaped to `(M,N,1)` and 1-D arrays of sha",Creation/Reading,combine/split,,,
dtype,"dtype(obj, align=False, copy=False) Create a data type object. A numpy array is homogeneous, and contains elements described by a dtype object. A dtype object can be constructed from different combina",Other,other,,,
e,"float(x) -> floating point number Convert a string or number to a floating point number, if possible.",Creation/Reading,constant,,,
ediff1d,"The differences between consecutive elements of an array. Parameters ---------- ary : array_like     If necessary, will be flattened before the differences are taken. to_end : array_like, optional",Computation/Transformation,reduce,,,
einsum,"einsum(subscripts, *operands, out=None, dtype=None, order='K',        casting='safe', optimize=False) Evaluates the Einstein summation convention on the operands. Using the Einstein summation conventi",Computation/Transformation,,,,
einsum_path,"einsum_path(subscripts, *operands, optimize='greedy') Evaluates the lowest cost contraction order for an einsum expression by considering the creation of intermediate arrays. Parameters ---------- sub",Other,,,,
emath,"Wrapper functions to more user-friendly calling of certain math functions whose output data-type is different than the input data-type in certain domains of the input. For example, for functions like",Other,Unkown,,,
empty,"empty(shape, dtype=float, order='C') Return a new array of given shape and type, without initializing entries. Parameters ---------- shape : int or tuple of int     Shape of the empty array dtype : da",Creation/Reading,function,,,
empty_like,"empty_like(a, dtype=None, order='K', subok=True) Return a new array with the same shape and type as a given array. Parameters ---------- a : array_like     The shape and data-type of `a` define these",Creation/Reading,function,,,
equal,"equal(x1, x2, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) Return (x1 == x2) element-wise. Parameters ---------- x1, x2 : array_like     Inp",Computation/Transformation,zipmap,,,
errstate,errstate(**kwargs) Context manager for floating-point error handling. Using an instance of `errstate` as a context manager allows statements in that context to execute with a known error handling beha,Other,other,,,
euler_gamma,"float(x) -> floating point number Convert a string or number to a floating point number, if possible.",Creation/Reading,constant,,,
exp,"exp(x, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) Calculate the exponential of all elements in the input array. Parameters ---------- x :",Computation/Transformation,map,,,
exp2,"exp2(x, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) Calculate `2**p` for all `p` in the input array. Parameters ---------- x : array_like",Computation/Transformation,map,,,
expand_dims,"Expand the shape of an array. Insert a new axis that will appear at the `axis` position in the expanded array shape. .. note:: Previous to NumPy 1.13.0, neither ``axis < -a.ndim - 1`` nor    ``axis >",Indexing/Subsetting,reshape,,,
expm1,"expm1(x, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) Calculate ``exp(x) - 1`` for all elements in the array. Parameters ---------- x : arra",Computation/Transformation,map,,,
extract,"Return the elements of an array that satisfy some condition. This is equivalent to ``np.compress(ravel(condition), ravel(arr))``.  If `condition` is boolean ``np.extract`` is equivalent to ``arr[condi",Indexing/Subsetting,reduce,,,
eye,"Return a 2-D array with ones on the diagonal and zeros elsewhere. Parameters ---------- N : int   Number of rows in the output. M : int, optional   Number of columns in the output. If None, defaults t",Creation/Reading,function,,,
fabs,"fabs(x, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) Compute the absolute values element-wise. This function returns the absolute values (po",Computation/Transformation,map,,,
fastCopyAndTranspose,_fastCopyAndTranspose(a),Computation/Transformation,reshape,,,
fft,Discrete Fourier Transform (:mod:`numpy.fft`) ============================================= .. currentmodule:: numpy.fft Standard FFTs ------------- .. autosummary::    :toctree: generated/    fft,Computation/Transformation,,,,
fill_diagonal,"Fill the main diagonal of the given array of any dimensionality. For an array `a` with ``a.ndim >= 2``, the diagonal is the list of locations with indices ``a[i, ..., i]`` all identical. This function",Computation/Transformation,,,,
find_common_type,Determine common type following standard coercion rules. Parameters ---------- array_types : sequence     A list of dtypes or dtype convertible objects representing arrays. scalar_types : sequence,MetaData/Attributes,dtype,,,
finfo,finfo(dtype) Machine limits for floating point types. Attributes ---------- bits : int     The number of bits occupied by the type. eps : float     The smallest representable positive number such that,Other,other,,,
fix,Round to nearest integer towards zero. Round an array of floats element-wise to nearest integer towards zero. The rounded values are returned as floats. Parameters ---------- x : array_like     An arr,Computation/Transformation,map,,,
flatiter,"Flat iterator object to iterate over arrays. A `flatiter` iterator is returned by ``x.flat`` for any array `x`. It allows iterating over the array as if it were a 1-D array, either in a for-loop or by",Reporting/Output,to type,,,
flatnonzero,Return indices that are non-zero in the flattened version of a. This is equivalent to a.ravel().nonzero()[0]. Parameters ---------- a : ndarray     Input array. Returns ------- res : ndarray     Outpu,Computation/Transformation,map w/ index,,,
flexible,"Base class for numpy scalar types. Class from which most (all?) numpy scalar types are derived.  For consistency, exposes the same API as `ndarray`, despite many consequent attributes being either ""ge",Other,from type,,,
flip,"Reverse the order of elements in an array along the given axis. The shape of the array is preserved, but the elements are reordered. .. versionadded:: 1.12.0 Parameters ---------- m : array_like     I",Indexing/Subsetting,index,,,
fliplr,"Flip array in the left/right direction. Flip the entries in each row in the left/right direction. Columns are preserved, but appear in a different order than before. Parameters ---------- m : array_li",Indexing/Subsetting,index,,,
flipud,"Flip array in the up/down direction. Flip the entries in each column in the up/down direction. Rows are preserved, but appear in a different order than before. Parameters ---------- m : array_like",Indexing/Subsetting,index,,,
float,"float(x) -> floating point number Convert a string or number to a floating point number, if possible.",Creation/Reading,from type,,,
float128,128-bit floating-point number. Character code: 'g'. C long float compatible.,Creation/Reading,from type,,,
float16,"Base class for numpy scalar types. Class from which most (all?) numpy scalar types are derived.  For consistency, exposes the same API as `ndarray`, despite many consequent attributes being either ""ge",Creation/Reading,from type,,,
float32,32-bit floating-point number. Character code 'f'. C float compatible.,Creation/Reading,from type,,,
float64,64-bit floating-point number. Character code 'd'. Python float compatible.,Creation/Reading,from type,,,
float_,64-bit floating-point number. Character code 'd'. Python float compatible.,Creation/Reading,from type,,,
float_power,"float_power(x1, x2, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) First array elements raised to powers from second array, element-wise. Rais",Computation/Transformation,from type,,,
floating,"Base class for numpy scalar types. Class from which most (all?) numpy scalar types are derived.  For consistency, exposes the same API as `ndarray`, despite many consequent attributes being either ""ge",Other,from type,,,
floor,"floor(x, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) Return the floor of the input, element-wise. The floor of the scalar `x` is the larges",Computation/Transformation,map,,,
floor_divide,"floor_divide(x1, x2, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) Return the largest integer smaller or equal to the division of the inputs.",Computation/Transformation,zipmap,,,
fmax,"fmax(x1, x2, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) Element-wise maximum of array elements. Compare two arrays and returns a new array",Computation/Transformation,zipmap,,,
fmin,"fmin(x1, x2, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) Element-wise minimum of array elements. Compare two arrays and returns a new array",Computation/Transformation,zipmap,,,
fmod,"fmod(x1, x2, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) Return the element-wise remainder of division. This is the NumPy implementation of",Computation/Transformation,zipmap,,,
format_float_positional,"Format a floating-point scalar as a decimal string in positional notation. Provides control over rounding, trimming and padding. Uses and assumes IEEE unbiased rounding. Uses the ""Dragon4"" algorithm.",Reporting/Output,to string,,,
format_float_scientific,"Format a floating-point scalar as a decimal string in scientific notation. Provides control over rounding, trimming and padding. Uses and assumes IEEE unbiased rounding. Uses the ""Dragon4"" algorithm.",Reporting/Output,to string,,,
format_parser,"Class to convert formats, names, titles description to a dtype. After constructing the format_parser object, the dtype attribute is the converted data-type: ``dtype = format_parser(formats, names, tit",Reporting/Output,to string,,,
frexp,"frexp(x[, out1, out2], / [, out=(None, None)], *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) Decompose the elements of x into mantissa and twos exponent.",Computation/Transformation,map,,,
frombuffer,"frombuffer(buffer, dtype=float, count=-1, offset=0) Interpret a buffer as a 1-dimensional array. Parameters ---------- buffer : buffer_like     An object that exposes the buffer interface. dtype : dat",Creation/Reading,from type,,,
fromfile,"fromfile(file, dtype=float, count=-1, sep='') Construct an array from data in a text or binary file. A highly efficient way of reading binary data with a known data-type, as well as parsing simply for",Creation/Reading,from type,,,
fromfunction,"Construct an array by executing a function over each coordinate. The resulting array therefore has a value ``fn(x, y, z)`` at coordinate ``(x, y, z)``. Parameters ---------- function : callable     Th",Creation/Reading,function,,,
fromiter,"fromiter(iterable, dtype, count=-1) Create a new 1-dimensional array from an iterable object. Parameters ---------- iterable : iterable object     An iterable object providing data for the array. dtyp",Creation/Reading,from type,,,
frompyfunc,"frompyfunc(func, nin, nout) Takes an arbitrary Python function and returns a NumPy ufunc. Can be used, for example, to add broadcasting to a built-in Python function (see Examples section). Parameters",Other,other,,,
fromregex,"Construct an array from a text file, using regular expression parsing. The returned array is always a structured array, and is constructed from all matches of the regular expression in the file. Group",Creation/Reading,from type,,,
fromstring,"fromstring(string, dtype=float, count=-1, sep='') A new 1-D array initialized from text data in a string. Parameters ---------- string : str     A string containing the data. dtype : data-type, option",Creation/Reading,from type,,,
full,"Return a new array of given shape and type, filled with `fill_value`. Parameters ---------- shape : int or sequence of ints     Shape of the new array, e.g., ``(2, 3)`` or ``2``. fill_value : scalar",Creation/Reading,function,,,
full_like,Return a full array with the same shape and type as a given array. Parameters ---------- a : array_like     The shape and data-type of `a` define these same attributes of     the returned array. fill_,Creation/Reading,function,,,
fv,"Compute the future value. Given:  * a present value, `pv`  * an interest `rate` compounded once per period, of which    there are  * `nper` total  * a (fixed) payment, `pmt`, paid either  * at the beg",Computation/Transformation,map,,,
generic,"Base class for numpy scalar types. Class from which most (all?) numpy scalar types are derived.  For consistency, exposes the same API as `ndarray`, despite many consequent attributes being either ""ge",Creation/Reading,from type,,,
genfromtxt,"Load data from a text file, with missing values handled as specified. Each line past the first `skip_header` lines is split at the `delimiter` character, and characters following the `comments` charac",Creation/Reading,from type,,,
geomspace,"Return numbers spaced evenly on a log scale (a geometric progression). This is similar to `logspace`, but with endpoints specified directly. Each output sample is a constant multiple of the previous.",Creation/Reading,function,,,
get_array_wrap,"Find the wrapper for the array with the highest priority. In case of ties, leftmost wins. If no wrapper is found, return None",Other,other,,,
get_include,Return the directory that contains the NumPy \*.h header files. Extension modules that need to compile against NumPy should use this function to locate the appropriate include directory. Notes ----- W,Other,other,,,
get_printoptions,Return the current print options. Returns ------- print_opts : dict     Dictionary of current print options with keys       - precision : int       - threshold : int       - edgeitems : int       - li,Other,other,,,
getbufsize,Return the size of the buffer used in ufuncs. Returns ------- getbufsize : int     Size of ufunc buffer in bytes.,MetaData/Attributes,size,,,
geterr,"Get the current way of handling floating-point errors. Returns ------- res : dict     A dictionary with keys ""divide"", ""over"", ""under"", and ""invalid"",     whose values are from the strings ""ignore"", """,Other,other,,,
geterrcall,"Return the current callback function used on floating-point errors. When the error handling for a floating-point error (one of ""divide"", ""over"", ""under"", or ""invalid"") is set to 'call' or 'log', the f",Other,other,,,
geterrobj,geterrobj() Return the current object that defines floating-point error handling. The error object contains all information that defines the error handling behavior in NumPy. `geterrobj` is used inter,Other,other,,,
gradient,Return the gradient of an N-dimensional array. The gradient is computed using second order accurate central differences in the interior points and either first or second order accurate one-sides (forw,Computation/Transformation,,,,
greater,"greater(x1, x2, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) Return the truth value of (x1 > x2) element-wise. Parameters ---------- x1, x2",Computation/Transformation,zipmap,,,
greater_equal,"greater_equal(x1, x2, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) Return the truth value of (x1 >= x2) element-wise. Parameters ----------",Computation/Transformation,zipmap,,,
half,"Base class for numpy scalar types. Class from which most (all?) numpy scalar types are derived.  For consistency, exposes the same API as `ndarray`, despite many consequent attributes being either ""ge",Creation/Reading,from type,,,
hamming,"Return the Hamming window. The Hamming window is a taper formed by using a weighted cosine. Parameters ---------- M : int     Number of points in the output window. If zero or less, an     empty array",Creation/Reading,function,,,
hanning,"Return the Hanning window. The Hanning window is a taper formed by using a weighted cosine. Parameters ---------- M : int     Number of points in the output window. If zero or less, an     empty array",Creation/Reading,function,,,
heaviside,"heaviside(x1, x2, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) Compute the Heaviside step function. The Heaviside step function is defined a",Computation/Transformation,zipmap,,,
histogram,"Compute the histogram of a set of data. Parameters ---------- a : array_like     Input data. The histogram is computed over the flattened array. bins : int or sequence of scalars or str, optional",Computation/Transformation,reshape,,,
histogram2d,"Compute the bi-dimensional histogram of two data samples. Parameters ---------- x : array_like, shape (N,)     An array containing the x coordinates of the points to be     histogrammed. y : array_lik",Computation/Transformation,reduce,,,
histogramdd,"Compute the multidimensional histogram of some data. Parameters ---------- sample : array_like     The data to be histogrammed. It must be an (N,D) array or data     that can be converted to such. The",Computation/Transformation,reduce,,,
hsplit,"Split an array into multiple sub-arrays horizontally (column-wise). Please refer to the `split` documentation.  `hsplit` is equivalent to `split` with ``axis=1``, the array is always split along the s",Indexing/Subsetting,combine/split,,,
hstack,"Stack arrays in sequence horizontally (column wise). This is equivalent to concatenation along the second axis, except for 1-D arrays where it concatenates along the first axis. Rebuilds arrays divide",Indexing/Subsetting,combine/split,,,
hypot,"hypot(x1, x2, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) Given the ""legs"" of a right triangle, return its hypotenuse. Equivalent to ``sqrt",Computation/Transformation,map,,,
i0,"Modified Bessel function of the first kind, order 0. Usually denoted :math:`I_0`.  This function does broadcast, but will *not* ""up-cast"" int dtype arguments unless accompanied by at least one float o",Computation/Transformation,map,,,
identity,"Return the identity array. The identity array is a square array with ones on the main diagonal. Parameters ---------- n : int     Number of rows (and columns) in `n` x `n` output. dtype : data-type, o",Creation/Reading,function,,,
iinfo,iinfo(type) Machine limits for integer types. Attributes ---------- bits : int     The number of bits occupied by the type. min : int     The smallest integer expressible by the type. max : int     Th,Other,other,,,
imag,Return the imaginary part of the complex argument. Parameters ---------- val : array_like     Input array. Returns ------- out : ndarray or scalar     The imaginary component of the complex argument.,Computation/Transformation,map,,,
in1d,Test whether each element of a 1-D array is also present in a second array. Returns a boolean array the same length as `ar1` that is True where an element of `ar1` is in `ar2` and False otherwise. We,Computation/Transformation,map,,,
index_exp,"A nicer way to build up index tuples for arrays. .. note::    Use one of the two predefined instances `index_exp` or `s_`    rather than directly using `IndexExpression`. For any index combination, in",Indexing/Subsetting,index,,,
indices,"Return an array representing the indices of a grid. Compute an array where the subarrays contain index values 0,1,... varying only along the corresponding axis. Parameters ---------- dimensions : sequ",Creation/Reading,function,,,
inexact,"Base class for numpy scalar types. Class from which most (all?) numpy scalar types are derived.  For consistency, exposes the same API as `ndarray`, despite many consequent attributes being either ""ge",Creation/Reading,from type,,,
inf,"float(x) -> floating point number Convert a string or number to a floating point number, if possible.",Creation/Reading,from type,,,
info,"Get help information for a function, class, or module. Parameters ---------- object : object or str, optional     Input object or name to get information about. If `object` is a     numpy object, its",Other,other,,,
infty,"float(x) -> floating point number Convert a string or number to a floating point number, if possible.",Creation/Reading,from type,,,
inner,"inner(a, b) Inner product of two arrays. Ordinary inner product of vectors for 1-D arrays (without complex conjugation), in higher dimensions a sum product over the last axes. Parameters ---------- a,",Computation/Transformation,,,,
insert,"Insert values along the given axis before the given indices. Parameters ---------- arr : array_like     Input array. obj : int, slice or sequence of ints     Object that defines the index or indices b",Creation/Reading,combine/split,,,
int,"int(x=0) -> integer int(x, base=10) -> integer Convert a number or string to an integer, or return 0 if no arguments are given.  If x is a number, return x.__int__().  For floating point numbers, this",Creation/Reading,from type,,,
int0,64-bit integer. Character code 'l'. Python int compatible.,Creation/Reading,from type,,,
int16,16-bit integer. Character code ``h``. C short compatible.,Creation/Reading,from type,,,
int32,32-bit integer. Character code 'i'. C int compatible.,Creation/Reading,from type,,,
int64,64-bit integer. Character code 'l'. Python int compatible.,Creation/Reading,from type,,,
int8,8-bit integer. Character code ``b``. C char compatible.,Creation/Reading,from type,,,
int_,64-bit integer. Character code 'l'. Python int compatible.,Creation/Reading,from type,,,
int_asbuffer,?,Other,from type,,,
intc,32-bit integer. Character code 'i'. C int compatible.,Creation/Reading,from type,,,
integer,"Base class for numpy scalar types. Class from which most (all?) numpy scalar types are derived.  For consistency, exposes the same API as `ndarray`, despite many consequent attributes being either ""ge",Creation/Reading,from type,,,
interp,One-dimensional linear interpolation. Returns the one-dimensional piecewise linear interpolant to a function with given values at discrete data-points. Parameters ---------- x : array_like     The x-c,Computation/Transformation,map,,,
intersect1d,"Find the intersection of two arrays. Return the sorted, unique values that are in both of the input arrays. Parameters ---------- ar1, ar2 : array_like     Input arrays. assume_unique : bool     If Tr",Computation/Transformation,zipreduce,,,
intp,64-bit integer. Character code 'l'. Python int compatible.,Creation/Reading,from type,,,
invert,"invert(x, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) Compute bit-wise inversion, or bit-wise NOT, element-wise. Computes the bit-wise NOT",Computation/Transformation,map,,,
ipmt,"Compute the interest portion of a payment. Parameters ---------- rate : scalar or array_like of shape(M, )     Rate of interest as decimal (not per cent) per period per : scalar or array_like of shape",Computation/Transformation,map,,,
irr,"Return the Internal Rate of Return (IRR). This is the ""average"" periodically compounded rate of return that gives a net present value of 0.0; for a more complete explanation, see Notes below. :class:`",Computation/Transformation,map,,,
is_busday,"is_busday(dates, weekmask='1111100', holidays=None, busdaycal=None, out=None) Calculates which of the given dates are valid days, and which are not. .. versionadded:: 1.7.0 Parameters ---------- dates",Computation/Transformation,map,,,
isclose,"Returns a boolean array where two arrays are element-wise equal within a tolerance. The tolerance values are positive, typically very small numbers.  The relative difference (`rtol` * abs(`b`)) and th",Computation/Transformation,zipmap,,,
iscomplex,"Returns a bool array, where True if input element is complex. What is tested is whether the input has a non-zero imaginary part, not if the input type is complex. Parameters ---------- x : array_like",Computation/Transformation,map,,,
iscomplexobj,"Check for a complex type or an array of complex numbers. The type of the input is checked, not the value. Even if the input has an imaginary part equal to zero, `iscomplexobj` evaluates to True. Param",MetaData/Attributes,dtype,,,
isfinite,"isfinite(x, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) Test element-wise for finiteness (not infinity or not Not a Number). The result is",Computation/Transformation,map,,,
isfortran,"Returns True if the array is Fortran contiguous but *not* C contiguous. This function is obsolete and, because of changes due to relaxed stride checking, its return value for the same array may differ",MetaData/Attributes,,,,
isin,"Calculates `element in test_elements`, broadcasting over `element` only. Returns a boolean array of the same shape as `element` that is True where an element of `element` is in `test_elements` and Fal",Computation/Transformation,map,,,
isinf,"isinf(x, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) Test element-wise for positive or negative infinity. Returns a boolean array of the sa",Computation/Transformation,map,,,
isnan,"isnan(x, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) Test element-wise for NaN and return result as a boolean array. Parameters ----------",Computation/Transformation,map,,,
isnat,"isnat(x, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) Test element-wise for NaT (not a time) and return result as a boolean array. Parameter",Computation/Transformation,map,,,
isneginf,"Test element-wise for negative infinity, return result as bool array. Parameters ---------- x : array_like     The input array. out : array_like, optional     A boolean array with the same shape and t",Computation/Transformation,map,,,
isposinf,"Test element-wise for positive infinity, return result as bool array. Parameters ---------- x : array_like     The input array. y : array_like, optional     A boolean array with the same shape as `x`",Computation/Transformation,map,,,
isreal,"Returns a bool array, where True if input element is real. If element has complex type with zero complex part, the return value for that element is True. Parameters ---------- x : array_like     Input",Computation/Transformation,map,,,
isrealobj,"Return True if x is a not complex type or an array of complex numbers. The type of the input is checked, not the value. So even if the input has an imaginary part equal to zero, `isrealobj` evaluates",MetaData/Attributes,dtype,,,
isscalar,"Returns True if the type of `num` is a scalar type. Parameters ---------- num : any     Input argument, can be of any type and shape. Returns ------- val : bool     True if `num` is a scalar type, Fal",MetaData/Attributes,dtype,,,
issctype,"Determines whether the given object represents a scalar data-type. Parameters ---------- rep : any     If `rep` is an instance of a scalar dtype, True is returned. If not,     False is returned. Retur",MetaData/Attributes,dtype,,,
issubclass_,"Determine if a class is a subclass of a second class. `issubclass_` is equivalent to the Python built-in ``issubclass``, except that it returns False instead of raising a TypeError if one of the argum",MetaData/Attributes,dtype,,,
issubdtype,"Returns True if first argument is a typecode lower/equal in type hierarchy. Parameters ---------- arg1, arg2 : dtype_like     dtype or string representing a typecode. Returns ------- out : bool See Al",MetaData/Attributes,dtype,,,
issubsctype,"Determine if the first argument is a subclass of the second argument. Parameters ---------- arg1, arg2 : dtype or dtype specifier     Data-types. Returns ------- out : bool     The result. See Also --",MetaData/Attributes,dtype,,,
iterable,Check whether or not an object can be iterated over. Parameters ---------- y : object   Input object. Returns ------- b : bool   Return ``True`` if the object has an iterator method or is a   sequence,Reporting/Output,to type,,,
ix_,"Construct an open mesh from multiple sequences. This function takes N 1-D sequences and returns N outputs with N dimensions each, such that the shape is 1 in all but one dimension and the dimension wi",Creation/Reading,combine/split,,,
kaiser,"Return the Kaiser window. The Kaiser window is a taper formed by using a Bessel function. Parameters ---------- M : int     Number of points in the output window. If zero or less, an     empty array i",Computation/Transformation,function,,,
kron,"Kronecker product of two arrays. Computes the Kronecker product, a composite array made of blocks of the second array scaled by the first. Parameters ---------- a, b : array_like Returns ------- out :",Computation/Transformation,,,,
ldexp,"ldexp(x1, x2, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) Returns x1 * 2**x2, element-wise. The mantissas `x1` and twos exponents `x2` are",Computation/Transformation,zipmap,,,
left_shift,"left_shift(x1, x2, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) Shift the bits of an integer to the left. Bits are shifted to the left by ap",Computation/Transformation,zipmap,,,
less,"less(x1, x2, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) Return the truth value of (x1 < x2) element-wise. Parameters ---------- x1, x2 : a",Computation/Transformation,zipmap,,,
less_equal,"less_equal(x1, x2, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) Return the truth value of (x1 =< x2) element-wise. Parameters ---------- x1,",Computation/Transformation,zipmap,,,
lexsort,"lexsort(keys, axis=-1) Perform an indirect sort using a sequence of keys. Given multiple sorting keys, which can be interpreted as columns in a spreadsheet, lexsort returns an array of integer indices",Computation/Transformation,reduce,,,
lib,"Basic functions used by several sub-packages and useful to have in the main name-space. Type Handling ------------- ================ =================== iscomplexobj     Test for complex object, scala",Other,Unkown,,,
linalg,Core Linear Algebra Tools ------------------------- Linear algebra basics: - norm            Vector or matrix norm - inv             Inverse of a square matrix - solve           Solve a linear system,Other,Unkown,,,
linspace,"Return evenly spaced numbers over a specified interval. Returns `num` evenly spaced samples, calculated over the interval [`start`, `stop`]. The endpoint of the interval can optionally be excluded. Pa",Creation/Reading,function,,,
little_endian,"bool(x) -> bool Returns True when the argument x is true, False otherwise. The builtins True and False are the only two instances of the class bool. The class bool is a subclass of the class int, and",Other,dtype,,,
load,"Load arrays or pickled objects from ``.npy``, ``.npz`` or pickled files. Parameters ---------- file : file-like object, string, or pathlib.Path     The file to read. File-like objects must support the",Creation/Reading,from type,,,
loads,"Read and return an object from the given pickle data. The protocol version of the pickle is detected automatically, so no protocol argument is needed.  Bytes past the pickled object's representation a",Creation/Reading,from type,,,
loadtxt,"Load data from a text file. Each row in the text file must have the same number of values. Parameters ---------- fname : file, str, or pathlib.Path     File, filename, or generator to read.  If the fi",Creation/Reading,from type,,,
log,"log(x, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) Natural logarithm, element-wise. The natural logarithm `log` is the inverse of the expon",Computation/Transformation,map,,,
log10,"log10(x, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) Return the base 10 logarithm of the input array, element-wise. Parameters ---------- x",Computation/Transformation,map,,,
log1p,"log1p(x, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) Return the natural logarithm of one plus the input array, element-wise. Calculates ``l",Computation/Transformation,map,,,
log2,"log2(x, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) Base-2 logarithm of `x`. Parameters ---------- x : array_like     Input values. out : n",Computation/Transformation,map,,,
logaddexp,"logaddexp(x1, x2, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) Logarithm of the sum of exponentiations of the inputs. Calculates ``log(exp(x",Computation/Transformation,zipmap,,,
logaddexp2,"logaddexp2(x1, x2, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) Logarithm of the sum of exponentiations of the inputs in base-2. Calculates",Computation/Transformation,zipmap,,,
logical_and,"logical_and(x1, x2, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) Compute the truth value of x1 AND x2 element-wise. Parameters ---------- x1",Computation/Transformation,zipmap,,,
logical_not,"logical_not(x, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) Compute the truth value of NOT x element-wise. Parameters ---------- x : array_l",Computation/Transformation,map,,,
logical_or,"logical_or(x1, x2, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) Compute the truth value of x1 OR x2 element-wise. Parameters ---------- x1,",Computation/Transformation,zipmap,,,
logical_xor,"logical_xor(x1, x2, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) Compute the truth value of x1 XOR x2, element-wise. Parameters ---------- x",Computation/Transformation,zipmap,,,
logspace,"Return numbers spaced evenly on a log scale. In linear space, the sequence starts at ``base ** start`` (`base` to the power of `start`) and ends with ``base ** stop`` (see `endpoint` below). Parameter",Creation/Reading,function,,,
long,"int(x=0) -> integer int(x, base=10) -> integer Convert a number or string to an integer, or return 0 if no arguments are given.  If x is a number, return x.__int__().  For floating point numbers, this",Creation/Reading,from type,,,
longcomplex,Composed of two 128 bit floats,Creation/Reading,from type,,,
longdouble,128-bit floating-point number. Character code: 'g'. C long float compatible.,Creation/Reading,from type,,,
longfloat,128-bit floating-point number. Character code: 'g'. C long float compatible.,Creation/Reading,from type,,,
longlong,"Base class for numpy scalar types. Class from which most (all?) numpy scalar types are derived.  For consistency, exposes the same API as `ndarray`, despite many consequent attributes being either ""ge",Creation/Reading,from type,,,
lookfor,"Do a keyword search on docstrings. A list of of objects that matched the search is displayed, sorted by relevance. All given keywords need to be found in the docstring for it to be returned as a resul",Other,other,,,
ma,"\============= Masked Arrays ============= Arrays sometimes contain invalid or missing data.  When doing operations on such arrays, we wish to suppress invalid values, which is the purpose masked array",Other,Unkown,,,
mafromtxt,"Load ASCII data stored in a text file and return a masked array. Parameters ---------- fname, kwargs : For a description of input parameters, see `genfromtxt`. See Also -------- numpy.genfromtxt : gen",Creation/Reading,from type,,,
mask_indices,"Return the indices to access (n, n) arrays, given a masking function. Assume `mask_func` is a function that, for a square array a of size ``(n, n)`` with a possible offset argument `k`, when called as",Creation/Reading,function,,,
mat,"Interpret the input as a matrix. Unlike `matrix`, `asmatrix` does not make a copy if the input is already a matrix or an ndarray.  Equivalent to ``matrix(data, copy=False)``. Parameters ---------- dat",Creation/Reading,from type,,,
math,This module is always available.  It provides access to the mathematical functions defined by the C standard.,other,Unkown,,,
matmul,"matmul(a, b, out=None) Matrix product of two arrays. The behavior depends on the arguments in the following way. - If both arguments are 2-D they are multiplied like conventional   matrices. - If eith",Computation/Transformation,,,,
matrix,"matrix(data, dtype=None, copy=True) Returns a matrix from an array-like object, or from a string of data. A matrix is a specialized 2-D array that retains its 2-D nature through operations.  It has ce",Creation/Reading,from type,,,
matrixlib,Sub-package containing the matrix class and related functions.,Other,Unkown,,,
max,"Return the maximum of an array or maximum along an axis. Parameters ---------- a : array_like     Input data. axis : None or int or tuple of ints, optional     Axis or axes along which to operate.  By",Computation/Transformation,reshape,,,
maximum,"maximum(x1, x2, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) Element-wise maximum of array elements. Compare two arrays and returns a new ar",Computation/Transformation,zipmap,,,
maximum_sctype,Return the scalar type of highest precision of the same kind as the input. Parameters ---------- t : dtype or dtype specifier     The input data type. This can be a `dtype` object or an object that,MetaData/Attributes,dtype,,,
may_share_memory,"may_share_memory(a, b, max_work=None) Determine if two arrays might share memory A return of True does not necessarily mean that the two arrays share any element.  It just means that they *might*. Onl",MetaData/Attributes,other,,,
mean,"Compute the arithmetic mean along the specified axis. Returns the average of the array elements.  The average is taken over the flattened array by default, otherwise over the specified axis. `float64`",Computation/Transformation,reduce,,,
median,"Compute the median along the specified axis. Returns the median of the array elements. Parameters ---------- a : array_like     Input array or object that can be converted to an array. axis : {int, se",Computation/Transformation,reduce,,,
memmap,"Create a memory-map to an array stored in a *binary* file on disk. Memory-mapped files are used for accessing small segments of large files on disk, without reading the entire file into memory.  NumPy",Creation/Reading,from type,,,
meshgrid,"Return coordinate matrices from coordinate vectors. Make N-D coordinate arrays for vectorized evaluations of N-D scalar/vector fields over N-D grids, given one-dimensional coordinate arrays x1, x2,...",Creation/Reading,function,,,
mgrid,"`nd_grid` instance which returns a dense multi-dimensional ""meshgrid"". An instance of `numpy.lib.index_tricks.nd_grid` which returns an dense (or fleshed out) mesh-grid when indexed, so that each retu",Creation/Reading,function,,,
min,"Return the minimum of an array or minimum along an axis. Parameters ---------- a : array_like     Input data. axis : None or int or tuple of ints, optional     Axis or axes along which to operate.  By",Computation/Transformation,reduce,,,
min_scalar_type,"min_scalar_type(a) For scalar ``a``, returns the data type with the smallest size and smallest scalar kind which can hold its value.  For non-scalar array ``a``, returns the vector's dtype unmodified.",MetaData/Attributes,dtype,,,
minimum,"minimum(x1, x2, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) Element-wise minimum of array elements. Compare two arrays and returns a new ar",Computation/Transformation,,,,
mintypecode,Return the character for the minimum-size type to which given types can be safely cast. The returned type character must represent the smallest size dtype such that an array of the returned type can h,MetaData/Attributes,dtype,,,
mirr,Modified internal rate of return. Parameters ---------- values : array_like     Cash flows (must contain at least one positive and one negative     value) or nan is returned.  The first value is consi,Computation/Transformation,map,,,
mod,"remainder(x1, x2, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) Return element-wise remainder of division. Computes the remainder complementa",Computation/Transformation,zipmap,,,
modf,"modf(x[, out1, out2], / [, out=(None, None)], *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) Return the fractional and integral parts of an array, element-",Computation/Transformation,map,,,
moveaxis,Move axes of an array to new positions. Other axes remain in their original order. .. versionadded:: 1.11.0 Parameters ---------- a : np.ndarray     The array whose axes should be reordered. source :,Indexing/Subsetting,index,,,
msort,Return a copy of an array sorted along the first axis. Parameters ---------- a : array_like     Array to be sorted. Returns ------- sorted_array : ndarray     Array of the same type and shape as `a`.,Computation/Transformation,,,,
multiply,"multiply(x1, x2, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) Multiply arguments element-wise. Parameters ---------- x1, x2 : array_like",Computation/Transformation,map,,,
nan,"float(x) -> floating point number Convert a string or number to a floating point number, if possible.",Creation/Reading,from type,,,
nan_to_num,"Replace nan with zero and inf with large finite numbers. If `x` is inexact, NaN is replaced by zero, and infinity and -infinity replaced by the respectively largest and most negative finite floating p",Computation/Transformation,map,,,
nanargmax,Return the indices of the maximum values in the specified axis ignoring NaNs. For all-NaN slices ``ValueError`` is raised. Warning: the results cannot be trusted if a slice contains only NaNs and -Inf,Computation/Transformation,reduce w/ index,,,
nanargmin,Return the indices of the minimum values in the specified axis ignoring NaNs. For all-NaN slices ``ValueError`` is raised. Warning: the results cannot be trusted if a slice contains only NaNs and Infs,Computation/Transformation,reduce w/ index,,,
nancumprod,Return the cumulative product of array elements over a given axis treating Not a Numbers (NaNs) as one.  The cumulative product does not change when NaNs are encountered and leading NaNs are replaced,Computation/Transformation,reduce,,,
nancumsum,Return the cumulative sum of array elements over a given axis treating Not a Numbers (NaNs) as zero.  The cumulative sum does not change when NaNs are encountered and leading NaNs are replaced by zero,Computation/Transformation,reduce,,,
nanmax,"Return the maximum of an array or maximum along an axis, ignoring any NaNs.  When all-NaN slices are encountered a ``RuntimeWarning`` is raised and NaN is returned for that slice. Parameters ---------",Computation/Transformation,reduce,,,
nanmean,"Compute the arithmetic mean along the specified axis, ignoring NaNs. Returns the average of the array elements.  The average is taken over the flattened array by default, otherwise over the specified",Computation/Transformation,reduce,,,
nanmedian,"Compute the median along the specified axis, while ignoring NaNs. Returns the median of the array elements. .. versionadded:: 1.9.0 Parameters ---------- a : array_like     Input array or object that",Computation/Transformation,reduce,,,
nanmin,"Return minimum of an array or minimum along an axis, ignoring any NaNs. When all-NaN slices are encountered a ``RuntimeWarning`` is raised and Nan is returned for that slice. Parameters ---------- a :",Computation/Transformation,reduce,,,
nanpercentile,"Compute the qth percentile of the data along the specified axis, while ignoring nan values. Returns the qth percentile(s) of the array elements. .. versionadded:: 1.9.0 Parameters ---------- a : array",Computation/Transformation,reduce,,,
nanprod,Return the product of array elements over a given axis treating Not a Numbers (NaNs) as ones. One is returned for slices that are all-NaN or empty. .. versionadded:: 1.10.0 Parameters ---------- a : a,Computation/Transformation,reduce,,,
nanstd,"Compute the standard deviation along the specified axis, while ignoring NaNs. Returns the standard deviation, a measure of the spread of a distribution, of the non-NaN array elements. The standard dev",Computation/Transformation,reduce,,,
nansum,Return the sum of array elements over a given axis treating Not a Numbers (NaNs) as zero. In NumPy versions <= 1.8.0 Nan is returned for slices that are all-NaN or empty. In later versions zero is ret,Computation/Transformation,reduce,,,
nanvar,"Compute the variance along the specified axis, while ignoring NaNs. Returns the variance of the array elements, a measure of the spread of a distribution.  The variance is computed for the flattened a",Computation/Transformation,reduce,,,
nbytes,"Base object for a dictionary for look-up with any alias for an array dtype. Instances of `_typedict` can not be used as dictionaries directly, first they have to be populated.",Creation/Reading,from type,,,
ndarray,"ndarray(shape, dtype=float, buffer=None, offset=0,         strides=None, order=None) An array object represents a multidimensional, homogeneous array of fixed-size items.  An associated data-type obje",Creation/Reading,from type,,,
ndenumerate,"Multidimensional index iterator. Return an iterator yielding pairs of array coordinates and values. Parameters ---------- arr : ndarray   Input array. See Also -------- ndindex, flatiter Examples ----",Reporting/Output,to type,,,
ndfromtxt,"Load ASCII data stored in a file and return it as a single array. Parameters ---------- fname, kwargs : For a description of input parameters, see `genfromtxt`. See Also -------- numpy.genfromtxt : ge",Indexing/Subsetting,from type,,,
ndim,"Return the number of dimensions of an array. Parameters ---------- a : array_like     Input array.  If it is not already an ndarray, a conversion is     attempted. Returns ------- number_of_dimensions",MetaData/Attributes,dimension,,,
ndindex,"An N-dimensional iterator object to index arrays. Given the shape of an array, an `ndindex` instance iterates over the N-dimensional index of the array. At each iteration a tuple of indices is returne",Reporting/Output,to type,,,
nditer,"Efficient multi-dimensional iterator object to iterate over arrays. To get started using this object, see the :ref:`introductory guide to array iteration <arrays.nditer>`. Parameters ---------- op : n",Reporting/Output,to type,,,
negative,"negative(x, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) Numerical negative, element-wise. Parameters ---------- x : array_like or scalar",Computation/Transformation,map,,,
nested_iters,?,Reporting/Output,to type,,,
newaxis,?,Indexing/Subsetting,index,,,
nextafter,"nextafter(x1, x2, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) Return the next floating-point value after x1 towards x2, element-wise. Param",Computation/Transformation,zipmap,,,
nonzero,"Return the indices of the elements that are non-zero. Returns a tuple of arrays, one for each dimension of `a`, containing the indices of the non-zero elements in that dimension. The values in `a` are",Computation/Transformation,map w/ index,,,
not_equal,"not_equal(x1, x2, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) Return (x1 != x2) element-wise. Parameters ---------- x1, x2 : array_like   I",Computation/Transformation,zipmap,,,
nper,Compute the number of periodic payments. :class:`decimal.Decimal` type is not supported. Parameters ---------- rate : array_like     Rate of interest (per period) pmt : array_like     Payment pv : arr,Computation/Transformation,zipmap,,,
npv,"Returns the NPV (Net Present Value) of a cash flow series. Parameters ---------- rate : scalar     The discount rate. values : array_like, shape(M, )     The values of the time series of cash flows.",Computation/Transformation,map,,,
numarray,"str(object='') -> str str(bytes_or_buffer[, encoding[, errors]]) -> str Create a new string object from the given object. If encoding or errors is specified, then the object must expose a data buffer",Creation/Reading,from type,,,
number,"Base class for numpy scalar types. Class from which most (all?) numpy scalar types are derived.  For consistency, exposes the same API as `ndarray`, despite many consequent attributes being either ""ge",Creation/Reading,from type,,,
obj2sctype,"Return the scalar dtype or NumPy equivalent of Python type of an object. Parameters ---------- rep : any     The object of which the type is returned. default : any, optional     If given, this is ret",Creation/Reading,from type,,,
object,The most base type,Creation/Reading,from type,,,
object0,Any Python object.  Character code: 'O'.,Creation/Reading,from type,,,
object_,Any Python object.  Character code: 'O'.,Creation/Reading,from type,,,
ogrid,"`nd_grid` instance which returns an open multi-dimensional ""meshgrid"". An instance of `numpy.lib.index_tricks.nd_grid` which returns an open (i.e. not fleshed out) mesh-grid when indexed, so that only",Creation/Reading,function,,,
oldnumeric,"str(object='') -> str str(bytes_or_buffer[, encoding[, errors]]) -> str Create a new string object from the given object. If encoding or errors is specified, then the object must expose a data buffer",Creation/Reading,from type,,,
ones,"Return a new array of given shape and type, filled with ones. Parameters ---------- shape : int or sequence of ints     Shape of the new array, e.g., ``(2, 3)`` or ``2``. dtype : data-type, optional",Creation/Reading,function,,,
ones_like,Return an array of ones with the same shape and type as a given array. Parameters ---------- a : array_like     The shape and data-type of `a` define these same attributes of     the returned array. d,Creation/Reading,function,,,
outer,"Compute the outer product of two vectors. Given two vectors, ``a = [a0, a1, ..., aM]`` and ``b = [b0, b1, ..., bN]``, the outer product [1]_ is::   [[a0*b0  a0*b1 ... a0*bN ]    [a1*b0    .    [ ...",Computation/Transformation,,,,
packbits,"packbits(myarray, axis=None) Packs the elements of a binary-valued array into bits in a uint8 array. The result is padded to full bytes by inserting zero bits at the end. Parameters ---------- myarray",Computation/Transformation,from type,,,
pad,"Pads an array. Parameters ---------- array : array_like of rank N     Input array pad_width : {sequence, array_like, int}     Number of values padded to the edges of each axis.     ((before_1, after_1",Creation/Reading,combine/split,,,
partition,Return a partitioned copy of an array. Creates a copy of the array with its elements rearranged in such a way that the value of the element in k-th position is in the position it would be in a sorted,Computation/Transformation,,,,
percentile,Compute the qth percentile of the data along the specified axis. Returns the qth percentile(s) of the array elements. Parameters ---------- a : array_like     Input array or object that can be convert,Computation/Transformation,reduce,,,
pi,"float(x) -> floating point number Convert a string or number to a floating point number, if possible.",Creation/Reading,from type,,,
piecewise,"Evaluate a piecewise-defined function. Given a set of conditions and corresponding functions, evaluate each function on the input data wherever its condition is true. Parameters ---------- x : ndarray",Creation/Reading,function,,,
pkgload,"Load one or more packages into parent package top-level namespace. This function is intended to shorten the need to import many subpackages, say of scipy, constantly with statements such as   import s",Other,other,,,
place,"Change elements of an array based on conditional and input values. Similar to ``np.copyto(arr, vals, where=mask)``, the difference is that `place` uses the first N elements of `vals`, where N is the n",Indexing/Subsetting,index,,,
pmt,"Compute the payment against loan principal plus interest. Given:  * a present value, `pv` (e.g., an amount borrowed)  * a future value, `fv` (e.g., 0)  * an interest `rate` compounded once per period,",Computation/Transformation,map,,,
poly,Find the coefficients of a polynomial with the given sequence of roots. Returns the coefficients of the polynomial whose leading coefficient is one for the given sequence of zeros (multiple roots must,Computation/Transformation,reduce,,,
poly1d,"A one-dimensional polynomial class. A convenience class, used to encapsulate ""natural"" operations on polynomials so that said operations may take on their customary form in code (see Examples). Parame",Computation/Transformation,map,,,
polyadd,"Find the sum of two polynomials. Returns the polynomial resulting from the sum of two input polynomials. Each input must be either a poly1d object or a 1D sequence of polynomial coefficients, from hig",Computation/Transformation,zipmap,,,
polyder,"Return the derivative of the specified order of a polynomial. Parameters ---------- p : poly1d or sequence     Polynomial to differentiate.     A sequence is interpreted as polynomial coefficients, se",Computation/Transformation,map,,,
polydiv,"Returns the quotient and remainder of polynomial division. The input arrays are the coefficients (including any coefficients equal to zero) of the ""numerator"" (dividend) and ""denominator"" (divisor) po",Computation/Transformation,zipmap,,,
polyfit,"Least squares polynomial fit. Fit a polynomial ``p(x) = p[0] * x**deg + ... + p[deg]`` of degree `deg` to points `(x, y)`. Returns a vector of coefficients `p` that minimises the squared error. Parame",Computation/Transformation,reduce,,,
polyint,Return an antiderivative (indefinite integral) of a polynomial. The returned order `m` antiderivative `P` of polynomial `p` satisfies :math:`\frac{d^m}{dx^m}P(x) = p(x)` and is defined up to `m - 1` i,Computation/Transformation,map,,,
polymul,Find the product of two polynomials. Finds the polynomial resulting from the multiplication of the two input polynomials. Each input must be either a poly1d object or a 1D sequence of polynomial coeff,Computation/Transformation,map,,,
polynomial,"A sub-package for efficiently dealing with polynomials. Within the documentation for this sub-package, a ""finite power series,"" i.e., a polynomial (also referred to simply as a ""series"") is represente",Computation/Transformation,map,,,
polysub,"Difference (subtraction) of two polynomials. Given two polynomials `a1` and `a2`, returns ``a1 - a2``. `a1` and `a2` can be either array_like sequences of the polynomials' coefficients (including coef",Computation/Transformation,zipmap,,,
polyval,"Evaluate a polynomial at specific values. If `p` is of length N, this function returns the value:     ``p[0]*x**(N-1) + p[1]*x**(N-2) + ... + p[N-2]*x + p[N-1]`` If `x` is a sequence, then `p(x)` is r",Computation/Transformation,map,,,
positive,"positive(x, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) Numerical positive, element-wise. .. versionadded:: 1.13.0 Parameters ---------- x",Computation/Transformation,map,,,
power,"power(x1, x2, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) First array elements raised to powers from second array, element-wise. Raise each",Computation/Transformation,zipmap,,,
ppmt,"Compute the payment against loan principal. Parameters ---------- rate : array_like     Rate of interest (per period) per : array_like, int     Amount paid against the loan changes.  The `per` is the",Computation/Transformation,zipmap,,,
print_function,?,Other,to string,,,
prod,"Return the product of array elements over a given axis. Parameters ---------- a : array_like     Input data. axis : None or int or tuple of ints, optional     Axis or axes along which a product is per",Computation/Transformation,reduce,,,
product,Return the product of array elements over a given axis. See Also -------- prod : equivalent function; see for details.,Computation/Transformation,reduce,,,
promote_types,"promote_types(type1, type2) Returns the data type with the smallest size and smallest scalar kind to which both ``type1`` and ``type2`` may be safely cast. The returned data type is always in native b",Other,other,,,
ptp,"Range of values (maximum - minimum) along an axis. The name of the function comes from the acronym for 'peak to peak'. Parameters ---------- a : array_like     Input values. axis : int, optional     A",Computation/Transformation,reduce,,,
put,Replaces specified elements of an array with given values. The indexing works on the flattened target array. `put` is roughly equivalent to: ::     a.flat[ind] = v Parameters ---------- a : ndarray,Indexing/Subsetting,index,,,
putmask,"putmask(a, mask, values) Changes elements of an array based on conditional and input values. Sets ``a.flat[n] = values[n]`` for each n where ``mask.flat[n]==True``. If `values` is not the same size as",Indexing/Subsetting,index,,,
pv,"Compute the present value. Given:  * a future value, `fv`  * an interest `rate` compounded once per period, of which    there are  * `nper` total  * a (fixed) payment, `pmt`, paid either  * at the beg",Computation/Transformation,map,,,
r_,"Translates slice objects to concatenation along the first axis. This is a simple way to build up arrays quickly. There are two use cases. 1. If the index expression contains comma separated arrays, th",Creation/Reading,combine/split,,,
rad2deg,"rad2deg(x, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) Convert angles from radians to degrees. Parameters ---------- x : array_like     Ang",Computation/Transformation,map,,,
radians,"radians(x, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) Convert angles from degrees to radians. Parameters ---------- x : array_like     Inp",Computation/Transformation,map,,,
random,/======================== Random Number Generation ======================== ==================== ========================================================= Utility functions ===========================\,Computation/Transformation,function,,,
rank,"Return the number of dimensions of an array. If `a` is not already an array, a conversion is attempted. Scalars are zero dimensional. .. note::     This function is deprecated in NumPy 1.9 to avoid co",MetaData/Attributes,dimension,,,
rate,Compute the rate of interest per period. Parameters ---------- nper : array_like     Number of compounding periods pmt : array_like     Payment pv : array_like     Present value fv : array_like     Fu,Computation/Transformation,zipmap,,,
ravel,"Return a contiguous flattened array. A 1-D array, containing the elements of the input, is returned.  A copy is made only if needed. As of NumPy 1.10, the returned array will have the same type as the",Indexing/Subsetting,reshape,,,
ravel_multi_index,"ravel_multi_index(multi_index, dims, mode='raise', order='C') Converts a tuple of index arrays into an array of flat indices, applying boundary modes to the multi-index. Parameters ---------- multi_in",Indexing/Subsetting,reshape,,,
real,Return the real part of the complex argument. Parameters ---------- val : array_like     Input array. Returns ------- out : ndarray or scalar     The real component of the complex argument. If `val` i,Computation/Transformation,map,,,
real_if_close,"If complex input returns a real array if complex parts are close to zero. ""Close to zero"" is defined as `tol` * (machine epsilon of the type for `a`). Parameters ---------- a : array_like     Input ar",Computation/Transformation,map,,,
rec,"Record Arrays ============= Record arrays expose the fields of structured arrays as properties. Most commonly, ndarrays contain elements of a single type, e.g. floats, integers, bools etc.  However, i",Creation/Reading,from type,,,
recarray,"Construct an ndarray that allows field access using attributes. Arrays may have a data-types containing fields, analogous to columns in a spread sheet.  An example is ``[(x, int), (y, float)]``, where",Creation/Reading,from type,,,
recfromcsv,"Load ASCII data stored in a comma-separated file. The returned array is a record array (if ``usemask=False``, see `recarray`) or a masked record array (if ``usemask=True``, see `ma.mrecords.MaskedReco",Creation/Reading,from type,,,
recfromtxt,"Load ASCII data from a file and return it in a record array. If ``usemask=False`` a standard `recarray` is returned, if ``usemask=True`` a MaskedRecords array is returned. Parameters ---------- fname,",Creation/Reading,from type,,,
reciprocal,"reciprocal(x, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) Return the reciprocal of the argument, element-wise. Calculates ``1/x``. Paramete",Computation/Transformation,map,,,
record,A data-type scalar that allows field access as attribute lookup.,Other,from type,,,
remainder,"remainder(x1, x2, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) Return element-wise remainder of division. Computes the remainder complementa",Computation/Transformation,zipmap,,,
repeat,Repeat elements of an array. Parameters ---------- a : array_like     Input array. repeats : int or array of ints     The number of repetitions for each element.  `repeats` is broadcasted     to fit t,Creation/Reading,function,,,
require,Return an ndarray of the provided type that satisfies requirements. This function is useful to be sure that an array with the correct flags is returned for passing to compiled code (perhaps through ct,Creation/Reading,from type,,,
reshape,Gives a new shape to an array without changing its data. Parameters ---------- a : array_like     Array to be reshaped. newshape : int or tuple of ints     The new shape should be compatible with the,Indexing/Subsetting,reshape,,,
resize,"Return a new array with the specified shape. If the new array is larger than the original array, then the new array is filled with repeated copies of `a`.  Note that this behavior is different from a.",Indexing/Subsetting,reshape,,,
result_type,"result_type(*arrays_and_dtypes) Returns the type that results from applying the NumPy type promotion rules to the arguments. Type promotion in NumPy works similarly to the rules in languages like C++,",Other,other,,,
right_shift,"right_shift(x1, x2, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) Shift the bits of an integer to the right. Bits are shifted to the right `x",Computation/Transformation,zipmap,,,
rint,"rint(x, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) Round elements of the array to the nearest integer. Parameters ---------- x : array_lik",Computation/Transformation,map,,,
roll,Roll array elements along a given axis. Elements that roll beyond the last position are re-introduced at the first. Parameters ---------- a : array_like     Input array. shift : int or tuple of ints,Indexing/Subsetting,reshape,,,
rollaxis,"Roll the specified axis backwards, until it lies in a given position. This function continues to be supported for backward compatibility, but you should prefer `moveaxis`. The `moveaxis` function was",Indexing/Subsetting,reshape,,,
roots,Return the roots of a polynomial with coefficients given in p. The values in the rank-1 array `p` are coefficients of a polynomial. If the length of `p` is n+1 then the polynomial is described by::,Computation/Transformation,reduce,,,
rot90,Rotate an array by 90 degrees in the plane specified by axes. Rotation direction is from the first towards the second axis. Parameters ---------- m : array_like     Array of two or more dimensions. k,Computation/Transformation,,,,
round,Round an array to the given number of decimals. Refer to `around` for full documentation. See Also -------- around : equivalent function,Computation/Transformation,map,,,
round_,Round an array to the given number of decimals. Refer to `around` for full documentation. See Also -------- around : equivalent function,Computation/Transformation,map,,,
row_stack,"Stack arrays in sequence vertically (row wise). This is equivalent to concatenation along the first axis after 1-D arrays of shape `(N,)` have been reshaped to `(1,N)`. Rebuilds arrays divided by `vsp",Creation/Reading,combine/split,,,
s_,"A nicer way to build up index tuples for arrays. .. note::    Use one of the two predefined instances `index_exp` or `s_`    rather than directly using `IndexExpression`. For any index combination, in",Indexing/Subsetting,index,,,
safe_eval,Protected string evaluation. Evaluate a string containing a Python literal expression without allowing the execution of arbitrary non-literal code. Parameters ---------- source : str     The string to,Other,other,,,
save,"Save an array to a binary file in NumPy ``.npy`` format. Parameters ---------- file : file, str, or pathlib.Path     File or filename to which the data is saved.  If file is a file-object,     then th",Reporting/Output,to type,,,
savetxt,"Save an array to a text file. Parameters ---------- fname : filename or file handle     If the filename ends in ``.gz``, the file is automatically saved in     compressed gzip format.  `loadtxt` under",Reporting/Output,to type,,,
savez,"Save several arrays into a single file in uncompressed ``.npz`` format. If arguments are passed in with no keywords, the corresponding variable names, in the ``.npz`` file, are 'arr_0', 'arr_1', etc.",Reporting/Output,to type,,,
savez_compressed,"Save several arrays into a single file in compressed ``.npz`` format. If keyword arguments are given, then filenames are taken from the keywords. If arguments are passed in with no keywords, then stor",Reporting/Output,to type,,,
sctype2char,"Return the string representation of a scalar dtype. Parameters ---------- sctype : scalar dtype or object     If a scalar dtype, the corresponding string character is     returned. If an object, `scty",Other,to string,,,
sctypeDict,"dict() -> new empty dictionary dict(mapping) -> new dictionary initialized from a mapping object's     (key, value) pairs dict(iterable) -> new dictionary initialized as if via:     d = {}     for k,",Other,other,,,
sctypeNA,"dict() -> new empty dictionary dict(mapping) -> new dictionary initialized from a mapping object's     (key, value) pairs dict(iterable) -> new dictionary initialized as if via:     d = {}     for k,",Other,other,,,
sctypes,"dict() -> new empty dictionary dict(mapping) -> new dictionary initialized from a mapping object's     (key, value) pairs dict(iterable) -> new dictionary initialized as if via:     d = {}     for k,",Other,other,,,
searchsorted,"Find indices where elements should be inserted to maintain order. Find the indices into a sorted array `a` such that, if the corresponding elements in `v` were inserted before the indices, the order o",Computation/Transformation,reduce w/ index,,,
select,"Return an array drawn from elements in choicelist, depending on conditions. Parameters ---------- condlist : list of bool ndarrays     The list of conditions which determine from which array in `choic",Creation/Reading,from type,,,
set_numeric_ops,"set_numeric_ops(op1=func1, op2=func2, ...) Set numerical operators for array objects. Parameters ---------- op1, op2, ... : callable     Each ``op = func`` pair describes an operator to be replaced.",Other,other,,,
set_printoptions,"Set printing options. These options determine the way floating point numbers, arrays and other NumPy objects are displayed. Parameters ---------- precision : int or None, optional     Number of digits",Other,other,,,
set_string_function,Set a Python function to be used when pretty printing arrays. Parameters ---------- f : function or None     Function to be used to pretty print arrays. The function should expect     a single array a,Other,other,,,
setbufsize,Set the size of the buffer used in ufuncs. Parameters ---------- size : int     Size of buffer.,Other,other,,,
setdiff1d,"Find the set difference of two arrays. Return the sorted, unique values in `ar1` that are not in `ar2`. Parameters ---------- ar1 : array_like     Input array. ar2 : array_like     Input comparison ar",Computation/Transformation,zipreduce,,,
seterr,"Set how floating-point errors are handled. Note that operations on integer scalar types (such as `int16`) are handled like floating point, and are affected by these settings. Parameters ---------- all",Other,other,,,
seterrcall,"Set the floating-point error callback function or log object. There are two ways to capture floating-point error messages.  The first is to set the error-handler to 'call', using `seterr`.  Then, set",Other,other,,,
seterrobj,seterrobj(errobj) Set the object that defines floating-point error handling. The error object contains all information that defines the error handling behavior in NumPy. `seterrobj` is used internally,Other,other,,,
setxor1d,"Find the set exclusive-or of two arrays. Return the sorted, unique values that are in only one (not both) of the input arrays. Parameters ---------- ar1, ar2 : array_like     Input arrays. assume_uniq",Computation/Transformation,zipreduce,,,
shape,Return the shape of an array. Parameters ---------- a : array_like     Input array. Returns ------- shape : tuple of ints     The elements of the shape tuple give the lengths of the     corresponding,MetaData/Attributes,dimension,,,
shares_memory,"shares_memory(a, b, max_work=None) Determine if two arrays share memory Parameters ---------- a, b : ndarray     Input arrays max_work : int, optional     Effort to spend on solving the overlap proble",Other,other,,,
short,16-bit integer. Character code ``h``. C short compatible.,Creation/Reading,from type,,,
show_config,?,Other,other,,,
sign,"sign(x, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) Returns an element-wise indication of the sign of a number. The `sign` function returns",Computation/Transformation,map,,,
signbit,"signbit(x, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) Returns element-wise True where signbit is set (less than zero). Parameters --------",Computation/Transformation,map,,,
signedinteger,"Base class for numpy scalar types. Class from which most (all?) numpy scalar types are derived.  For consistency, exposes the same API as `ndarray`, despite many consequent attributes being either ""ge",Creation/Reading,from type,,,
sin,"sin(x, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) Trigonometric sine, element-wise. Parameters ---------- x : array_like     Angle, in rad",Computation/Transformation,map,,,
sinc,Return the sinc function. The sinc function is :math:`\sin(\pi x)/(\pi x)`. Parameters ---------- x : ndarray     Array (possibly multi-dimensional) of values for which to to     calculate ``sinc(x)``,Computation/Transformation,map,,,
single,32-bit floating-point number. Character code 'f'. C float compatible.,Creation/Reading,from type,,,
singlecomplex,Composed of two 32 bit floats,Creation/Reading,from type,,,
sinh,"sinh(x, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) Hyperbolic sine, element-wise. Equivalent to ``1/2 * (np.exp(x) - np.exp(-x))`` or ``-1",Computation/Transformation,map,,,
size,"Return the number of elements along a given axis. Parameters ---------- a : array_like     Input data. axis : int, optional     Axis along which the elements are counted.  By default, give     the tot",MetaData/Attributes,size,,,
sometrue,Check whether some values are true. Refer to `any` for full documentation. See Also -------- any : equivalent function,Computation/Transformation,reduce,,,
sort,"Return a sorted copy of an array. Parameters ---------- a : array_like     Array to be sorted. axis : int or None, optional     Axis along which to sort. If None, the array is flattened before     sor",Computation/Transformation,reduce,,,
sort_complex,"Sort a complex array using the real part first, then the imaginary part. Parameters ---------- a : array_like     Input array Returns ------- out : complex ndarray     Always returns a sorted complex",Computation/Transformation,reduce,,,
source,Print or write to a file the source code for a NumPy object. The source code is only returned for objects written in Python. Many functions and classes are defined in C and will therefore not return u,Other,other,,,
spacing,"spacing(x, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) Return the distance between x and the nearest adjacent number. Parameters ----------",Computation/Transformation,map,,,
split,"Split an array into multiple sub-arrays. Parameters ---------- ary : ndarray     Array to be divided into sub-arrays. indices_or_sections : int or 1-D array     If `indices_or_sections` is an integer,",Creation/Reading,combine/split,,,
sqrt,"sqrt(x, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) Return the positive square-root of an array, element-wise. Parameters ---------- x : ar",Computation/Transformation,map,,,
square,"square(x, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) Return the element-wise square of the input. Parameters ---------- x : array_like",Computation/Transformation,map,,,
squeeze,"Remove single-dimensional entries from the shape of an array. Parameters ---------- a : array_like     Input data. axis : None or int or tuple of ints, optional     .. versionadded:: 1.7.0     Selects",Indexing/Subsetting,reshape,,,
stack,"Join a sequence of arrays along a new axis. The `axis` parameter specifies the index of the new axis in the dimensions of the result. For example, if ``axis=0`` it will be the first dimension and if `",Creation/Reading,combine/split,,,
std,"Compute the standard deviation along the specified axis. Returns the standard deviation, a measure of the spread of a distribution, of the array elements. The standard deviation is computed for the fl",Computation/Transformation,map,,,
str,"str(object='') -> str str(bytes_or_buffer[, encoding[, errors]]) -> str Create a new string object from the given object. If encoding or errors is specified, then the object must expose a data buffer",Creation/Reading,from type,,,
str0,"str(object='') -> str str(bytes_or_buffer[, encoding[, errors]]) -> str Create a new string object from the given object. If encoding or errors is specified, then the object must expose a data buffer",Creation/Reading,from type,,,
str_,"str(object='') -> str str(bytes_or_buffer[, encoding[, errors]]) -> str Create a new string object from the given object. If encoding or errors is specified, then the object must expose a data buffer",Creation/Reading,from type,,,
string_,"bytes(iterable_of_ints) -> bytes bytes(string, encoding[, errors]) -> bytes bytes(bytes_or_buffer) -> immutable copy of bytes_or_buffer bytes(int) -> bytes object of size given by the parameter initia",Creation/Reading,from type,,,
subtract,"subtract(x1, x2, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) Subtract arguments, element-wise. Parameters ---------- x1, x2 : array_like",Computation/Transformation,zipmap,,,
sum,"Sum of array elements over a given axis. Parameters ---------- a : array_like     Elements to sum. axis : None or int or tuple of ints, optional     Axis or axes along which a sum is performed.  The d",Computation/Transformation,reduce,,,
swapaxes,Interchange two axes of an array. Parameters ---------- a : array_like     Input array. axis1 : int     First axis. axis2 : int     Second axis. Returns ------- a_swapped : ndarray     For NumPy >= 1.,Indexing/Subsetting,reshape,,,
sys,This module provides access to some objects used or maintained by the interpreter and to functions that interact strongly with the interpreter. Dynamic objects: argv -- command line arguments; argv[0],Other,other,,,
take,"Take elements from an array along an axis. When axis is not None, this function does the same thing as ""fancy"" indexing (indexing arrays using arrays); however, it can be easier to use if you need ele",Indexing/Subsetting,index,,,
tan,"tan(x, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) Compute tangent element-wise. Equivalent to ``np.sin(x)/np.cos(x)`` element-wise. Parame",Computation/Transformation,map,,,
tanh,"tanh(x, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) Compute hyperbolic tangent element-wise. Equivalent to ``np.sinh(x)/np.cosh(x)`` or ``-",Computation/Transformation,map,,,
tensordot,"Compute tensor dot product along specified axes for arrays >= 1-D. Given two tensors (arrays of dimension greater than or equal to one), `a` and `b`, and an array_like object containing two array_like",Computation/Transformation,,,,
test,"Run tests for module using nose. Parameters ---------- label : {'fast', 'full', '', attribute identifier}, optional     Identifies the tests to run. This can be a string to pass to     the nosetests e",Other,other,,,
testing,"Common test support for all numpy test scripts. This single module should provide all the common functionality for numpy tests in a single location, so that test scripts can just import it and work ri",Other,other,,,
tile,"Construct an array by repeating A the number of times given by reps. If `reps` has length ``d``, the result will have dimension of ``max(d, A.ndim)``. If ``A.ndim < d``, `A` is promoted to be d-dimens",Creation/Reading,combine/split,,,
timedelta64,"Base class for numpy scalar types. Class from which most (all?) numpy scalar types are derived.  For consistency, exposes the same API as `ndarray`, despite many consequent attributes being either ""ge",Creation/Reading,from type,,,
trace,"Return the sum along diagonals of the array. If `a` is 2-D, the sum along its diagonal with the given offset is returned, i.e., the sum of elements ``a[i,i+offset]`` for all i. If `a` has more than tw",Computation/Transformation,,,,
tracemalloc_domain,"int(x=0) -> integer int(x, base=10) -> integer Convert a number or string to an integer, or return 0 if no arguments are given.  If x is a number, return x.__int__().  For floating point numbers, this",Other,other,,,
transpose,"Permute the dimensions of an array. Parameters ---------- a : array_like     Input array. axes : list of ints, optional     By default, reverse the dimensions, otherwise permute the axes     according",Indexing/Subsetting,reshape,,,
trapz,"Integrate along the given axis using the composite trapezoidal rule. Integrate `y` (`x`) along given axis. Parameters ---------- y : array_like     Input array to integrate. x : array_like, optional",Computation/Transformation,reduce,,,
tri,"An array with ones at and below the given diagonal and zeros elsewhere. Parameters ---------- N : int     Number of rows in the array. M : int, optional     Number of columns in the array.     By defa",Creation/Reading,function,,,
tril,"Lower triangle of an array. Return a copy of an array with elements above the `k`-th diagonal zeroed. Parameters ---------- m : array_like, shape (M, N)     Input array. k : int, optional     Diagonal",Indexing/Subsetting,index,,,
tril_indices,"Return the indices for the lower-triangle of an (n, m) array. Parameters ---------- n : int     The row dimension of the arrays for which the returned     indices will be valid. k : int, optional",Indexing/Subsetting,index,,,
tril_indices_from,Return the indices for the lower-triangle of arr. See `tril_indices` for full details. Parameters ---------- arr : array_like     The indices will be valid for square arrays whose dimensions are     t,Indexing/Subsetting,index,,,
trim_zeros,"Trim the leading and/or trailing zeros from a 1-D array or sequence. Parameters ---------- filt : 1-D array or sequence     Input array. trim : str, optional     A string with 'f' representing trim fr",Creation/Reading,combine/split,,,
triu,Upper triangle of an array. Return a copy of a matrix with the elements below the `k`-th diagonal zeroed. Please refer to the documentation for `tril` for further details. See Also -------- tril : low,Indexing/Subsetting,index,,,
triu_indices,"Return the indices for the upper-triangle of an (n, m) array. Parameters ---------- n : int     The size of the arrays for which the returned indices will     be valid. k : int, optional     Diagonal",Indexing/Subsetting,index,,,
triu_indices_from,"Return the indices for the upper-triangle of arr. See `triu_indices` for full details. Parameters ---------- arr : ndarray, shape(N, N)     The indices will be valid for square arrays. k : int, option",Indexing/Subsetting,index,,,
true_divide,"true_divide(x1, x2, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) Returns a true division of the inputs, element-wise. Instead of the Python",Computation/Transformation,zipmap,,,
trunc,"trunc(x, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) Return the truncated value of the input, element-wise. The truncated value of the scal",Computation/Transformation,map,,,
typeDict,"dict() -> new empty dictionary dict(mapping) -> new dictionary initialized from a mapping object's     (key, value) pairs dict(iterable) -> new dictionary initialized as if via:     d = {}     for k,",Creation/Reading,from type,,,
typeNA,"dict() -> new empty dictionary dict(mapping) -> new dictionary initialized from a mapping object's     (key, value) pairs dict(iterable) -> new dictionary initialized as if via:     d = {}     for k,",Creation/Reading,from type,,,
typecodes,"dict() -> new empty dictionary dict(mapping) -> new dictionary initialized from a mapping object's     (key, value) pairs dict(iterable) -> new dictionary initialized as if via:     d = {}     for k,",Creation/Reading,from type,,,
typename,"Return a description for the given data type code. Parameters ---------- char : str     Data type code. Returns ------- out : str     Description of the input data type code. See Also -------- dtype,",Reporting/Output,to string,,,
ubyte,"Base class for numpy scalar types. Class from which most (all?) numpy scalar types are derived.  For consistency, exposes the same API as `ndarray`, despite many consequent attributes being either ""ge",Creation/Reading,from type,,,
ufunc,"Functions that operate element by element on whole arrays. To see the documentation for a specific ufunc, use `info`.  For example, ``np.info(np.sin)``.  Because ufuncs are written in C (for speed) an",Other,other,,,
uint,"Base class for numpy scalar types. Class from which most (all?) numpy scalar types are derived.  For consistency, exposes the same API as `ndarray`, despite many consequent attributes being either ""ge",Creation/Reading,from type,,,
uint0,"Base class for numpy scalar types. Class from which most (all?) numpy scalar types are derived.  For consistency, exposes the same API as `ndarray`, despite many consequent attributes being either ""ge",Creation/Reading,from type,,,
uint16,"Base class for numpy scalar types. Class from which most (all?) numpy scalar types are derived.  For consistency, exposes the same API as `ndarray`, despite many consequent attributes being either ""ge",Creation/Reading,from type,,,
uint32,"Base class for numpy scalar types. Class from which most (all?) numpy scalar types are derived.  For consistency, exposes the same API as `ndarray`, despite many consequent attributes being either ""ge",Creation/Reading,from type,,,
uint64,"Base class for numpy scalar types. Class from which most (all?) numpy scalar types are derived.  For consistency, exposes the same API as `ndarray`, despite many consequent attributes being either ""ge",Creation/Reading,from type,,,
uint8,"Base class for numpy scalar types. Class from which most (all?) numpy scalar types are derived.  For consistency, exposes the same API as `ndarray`, despite many consequent attributes being either ""ge",Creation/Reading,from type,,,
uintc,"Base class for numpy scalar types. Class from which most (all?) numpy scalar types are derived.  For consistency, exposes the same API as `ndarray`, despite many consequent attributes being either ""ge",Creation/Reading,from type,,,
uintp,"Base class for numpy scalar types. Class from which most (all?) numpy scalar types are derived.  For consistency, exposes the same API as `ndarray`, despite many consequent attributes being either ""ge",Creation/Reading,from type,,,
ulonglong,"Base class for numpy scalar types. Class from which most (all?) numpy scalar types are derived.  For consistency, exposes the same API as `ndarray`, despite many consequent attributes being either ""ge",Creation/Reading,from type,,,
unicode,"str(object='') -> str str(bytes_or_buffer[, encoding[, errors]]) -> str Create a new string object from the given object. If encoding or errors is specified, then the object must expose a data buffer",Creation/Reading,from type,,,
unicode_,"str(object='') -> str str(bytes_or_buffer[, encoding[, errors]]) -> str Create a new string object from the given object. If encoding or errors is specified, then the object must expose a data buffer",Creation/Reading,from type,,,
union1d,"Find the union of two arrays. Return the unique, sorted array of values that are in either of the two input arrays. Parameters ---------- ar1, ar2 : array_like     Input arrays. They are flattened if",Computation/Transformation,zipreduce,,,
unique,Find the unique elements of an array. Returns the sorted unique elements of an array. There are three optional outputs in addition to the unique elements: the indices of the input array that give the,Computation/Transformation,reduce,,,
unpackbits,"unpackbits(myarray, axis=None) Unpacks elements of a uint8 array into a binary-valued output array. Each element of `myarray` represents a bit-field that should be unpacked into a binary-valued output",Computation/Transformation,map,,,
unravel_index,"unravel_index(indices, dims, order='C') Converts a flat index or array of flat indices into a tuple of coordinate arrays. Parameters ---------- indices : array_like     An integer array whose elements",Indexing/Subsetting,index,,,
unsignedinteger,"Base class for numpy scalar types. Class from which most (all?) numpy scalar types are derived.  For consistency, exposes the same API as `ndarray`, despite many consequent attributes being either ""ge",Creation/Reading,from type,,,
unwrap,Unwrap by changing deltas between values to 2*pi complement. Unwrap radian phase `p` by changing absolute jumps greater than `discont` to their 2*pi complement along the given axis. Parameters -------,Computation/Transformation,map,,,
ushort,"Base class for numpy scalar types. Class from which most (all?) numpy scalar types are derived.  For consistency, exposes the same API as `ndarray`, despite many consequent attributes being either ""ge",Creation/Reading,from type,,,
vander,"Generate a Vandermonde matrix. The columns of the output matrix are powers of the input vector. The order of the powers is determined by the `increasing` boolean argument. Specifically, when `increasi",Creation/Reading,function,,,
var,"Compute the variance along the specified axis. Returns the variance of the array elements, a measure of the spread of a distribution.  The variance is computed for the flattened array by default, othe",Computation/Transformation,reduce,,,
vdot,"vdot(a, b) Return the dot product of two vectors. The vdot(`a`, `b`) function handles complex numbers differently than dot(`a`, `b`).  If the first argument is complex the complex conjugate of the fir",Computation/Transformation,,,,
vectorize,"vectorize(pyfunc, otypes=None, doc=None, excluded=None, cache=False,           signature=None) Generalized function class. Define a vectorized function which takes a nested sequence of objects or nump",Other,other,,,
version,?,Other,other,,,
void,"Base class for numpy scalar types. Class from which most (all?) numpy scalar types are derived.  For consistency, exposes the same API as `ndarray`, despite many consequent attributes being either ""ge",Creation/Reading,from type,,,
void0,"Base class for numpy scalar types. Class from which most (all?) numpy scalar types are derived.  For consistency, exposes the same API as `ndarray`, despite many consequent attributes being either ""ge",Creation/Reading,from type,,,
vsplit,"Split an array into multiple sub-arrays vertically (row-wise). Please refer to the ``split`` documentation.  ``vsplit`` is equivalent to ``split`` with `axis=0` (default), the array is always split al",Creation/Reading,combine/split,,,
vstack,"Stack arrays in sequence vertically (row wise). This is equivalent to concatenation along the first axis after 1-D arrays of shape `(N,)` have been reshaped to `(1,N)`. Rebuilds arrays divided by `vsp",Creation/Reading,combine/split,,,
warnings,Python part of the warnings subsystem.,Other,other,,,
where,"where(condition, [x, y]) Return elements, either from `x` or `y`, depending on `condition`. If only `condition` is given, return ``condition.nonzero()``. Parameters ---------- condition : array_like,",Indexing/Subsetting,index,,,
who,Print the NumPy arrays in the given dictionary. If there is no dictionary passed in or `vardict` is None then returns NumPy arrays in the globals() dictionary (all NumPy arrays in the namespace). Para,Other,other,,,
zeros,"zeros(shape, dtype=float, order='C') Return a new array of given shape and type, filled with zeros. Parameters ---------- shape : int or sequence of ints     Shape of the new array, e.g., ``(2, 3)`` o",Creation/Reading,function,,,
zeros_like,Return an array of zeros with the same shape and type as a given array. Parameters ---------- a : array_like     The shape and data-type of `a` define these same attributes of     the returned array.,Creation/Reading,function,,,
,,,,,,
,,,,,,
,226,Computation/Transformation,,,33,
,170,Creation/Reading,,,7,
,22,Reporting/Output,,,6,
,38,Indexing/Subsetting,,,12,
,21,MetaData/Attributes,,,11,
,68,Other,,,2,