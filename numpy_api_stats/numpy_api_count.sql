SELECT
count(CASE WHEN abs THEN 1 END) AS abs_count,
count(CASE WHEN absolute THEN 1 END) AS absolute_count,
count(CASE WHEN absolute_import THEN 1 END) AS absolute_import_count,
count(CASE WHEN add THEN 1 END) AS add_count,
count(CASE WHEN add_docstring THEN 1 END) AS add_docstring_count,
count(CASE WHEN add_newdoc THEN 1 END) AS add_newdoc_count,
count(CASE WHEN add_newdoc_ufunc THEN 1 END) AS add_newdoc_ufunc_count,
count(CASE WHEN add_newdocs THEN 1 END) AS add_newdocs_count,
count(CASE WHEN alen THEN 1 END) AS alen_count,
count(CASE WHEN all THEN 1 END) AS all_count,
count(CASE WHEN allclose THEN 1 END) AS allclose_count,
count(CASE WHEN alltrue THEN 1 END) AS alltrue_count,
count(CASE WHEN amax THEN 1 END) AS amax_count,
count(CASE WHEN amin THEN 1 END) AS amin_count,
count(CASE WHEN angle THEN 1 END) AS angle_count,
count(CASE WHEN any THEN 1 END) AS any_count,
count(CASE WHEN append THEN 1 END) AS append_count,
count(CASE WHEN apply_along_axis THEN 1 END) AS apply_along_axis_count,
count(CASE WHEN apply_over_axes THEN 1 END) AS apply_over_axes_count,
count(CASE WHEN arange THEN 1 END) AS arange_count,
count(CASE WHEN arccos THEN 1 END) AS arccos_count,
count(CASE WHEN arccosh THEN 1 END) AS arccosh_count,
count(CASE WHEN arcsin THEN 1 END) AS arcsin_count,
count(CASE WHEN arcsinh THEN 1 END) AS arcsinh_count,
count(CASE WHEN arctan THEN 1 END) AS arctan_count,
count(CASE WHEN arctan2 THEN 1 END) AS arctan2_count,
count(CASE WHEN arctanh THEN 1 END) AS arctanh_count,
count(CASE WHEN argmax THEN 1 END) AS argmax_count,
count(CASE WHEN argmin THEN 1 END) AS argmin_count,
count(CASE WHEN argpartition THEN 1 END) AS argpartition_count,
count(CASE WHEN argsort THEN 1 END) AS argsort_count,
count(CASE WHEN argwhere THEN 1 END) AS argwhere_count,
count(CASE WHEN around THEN 1 END) AS around_count,
count(CASE WHEN array THEN 1 END) AS array_count,
count(CASE WHEN array2string THEN 1 END) AS array2string_count,
count(CASE WHEN array_equal THEN 1 END) AS array_equal_count,
count(CASE WHEN array_equiv THEN 1 END) AS array_equiv_count,
count(CASE WHEN array_repr THEN 1 END) AS array_repr_count,
count(CASE WHEN array_split THEN 1 END) AS array_split_count,
count(CASE WHEN array_str THEN 1 END) AS array_str_count,
count(CASE WHEN asanyarray THEN 1 END) AS asanyarray_count,
count(CASE WHEN asarray THEN 1 END) AS asarray_count,
count(CASE WHEN asarray_chkfinite THEN 1 END) AS asarray_chkfinite_count,
count(CASE WHEN ascontiguousarray THEN 1 END) AS ascontiguousarray_count,
count(CASE WHEN asfarray THEN 1 END) AS asfarray_count,
count(CASE WHEN asfortranarray THEN 1 END) AS asfortranarray_count,
count(CASE WHEN asmatrix THEN 1 END) AS asmatrix_count,
count(CASE WHEN asscalar THEN 1 END) AS asscalar_count,
count(CASE WHEN atleast_1d THEN 1 END) AS atleast_1d_count,
count(CASE WHEN atleast_2d THEN 1 END) AS atleast_2d_count,
count(CASE WHEN atleast_3d THEN 1 END) AS atleast_3d_count,
count(CASE WHEN average THEN 1 END) AS average_count,
count(CASE WHEN bartlett THEN 1 END) AS bartlett_count,
count(CASE WHEN base_repr THEN 1 END) AS base_repr_count,
count(CASE WHEN bench THEN 1 END) AS bench_count,
count(CASE WHEN binary_repr THEN 1 END) AS binary_repr_count,
count(CASE WHEN bincount THEN 1 END) AS bincount_count,
count(CASE WHEN bitwise_and THEN 1 END) AS bitwise_and_count,
count(CASE WHEN bitwise_not THEN 1 END) AS bitwise_not_count,
count(CASE WHEN bitwise_or THEN 1 END) AS bitwise_or_count,
count(CASE WHEN bitwise_xor THEN 1 END) AS bitwise_xor_count,
count(CASE WHEN blackman THEN 1 END) AS blackman_count,
count(CASE WHEN block THEN 1 END) AS block_count,
count(CASE WHEN bmat THEN 1 END) AS bmat_count,
count(CASE WHEN bool THEN 1 END) AS bool_count,
count(CASE WHEN bool8 THEN 1 END) AS bool8_count,
count(CASE WHEN bool_ THEN 1 END) AS bool__count,
count(CASE WHEN broadcast THEN 1 END) AS broadcast_count,
count(CASE WHEN broadcast_arrays THEN 1 END) AS broadcast_arrays_count,
count(CASE WHEN broadcast_to THEN 1 END) AS broadcast_to_count,
count(CASE WHEN busday_count THEN 1 END) AS busday_count_count,
count(CASE WHEN busday_offset THEN 1 END) AS busday_offset_count,
count(CASE WHEN busdaycalendar THEN 1 END) AS busdaycalendar_count,
count(CASE WHEN byte THEN 1 END) AS byte_count,
count(CASE WHEN byte_bounds THEN 1 END) AS byte_bounds_count,
count(CASE WHEN bytes0 THEN 1 END) AS bytes0_count,
count(CASE WHEN bytes_ THEN 1 END) AS bytes__count,
count(CASE WHEN c_ THEN 1 END) AS c__count,
count(CASE WHEN can_cast THEN 1 END) AS can_cast_count,
count(CASE WHEN cast THEN 1 END) AS cast_count,
count(CASE WHEN cbrt THEN 1 END) AS cbrt_count,
count(CASE WHEN cdouble THEN 1 END) AS cdouble_count,
count(CASE WHEN ceil THEN 1 END) AS ceil_count,
count(CASE WHEN cfloat THEN 1 END) AS cfloat_count,
count(CASE WHEN char THEN 1 END) AS char_count,
count(CASE WHEN character THEN 1 END) AS character_count,
count(CASE WHEN chararray THEN 1 END) AS chararray_count,
count(CASE WHEN choose THEN 1 END) AS choose_count,
count(CASE WHEN clip THEN 1 END) AS clip_count,
count(CASE WHEN clongdouble THEN 1 END) AS clongdouble_count,
count(CASE WHEN clongfloat THEN 1 END) AS clongfloat_count,
count(CASE WHEN column_stack THEN 1 END) AS column_stack_count,
count(CASE WHEN common_type THEN 1 END) AS common_type_count,
count(CASE WHEN compare_chararrays THEN 1 END) AS compare_chararrays_count,
count(CASE WHEN compat THEN 1 END) AS compat_count,
count(CASE WHEN complex THEN 1 END) AS complex_count,
count(CASE WHEN complex128 THEN 1 END) AS complex128_count,
count(CASE WHEN complex256 THEN 1 END) AS complex256_count,
count(CASE WHEN complex64 THEN 1 END) AS complex64_count,
count(CASE WHEN complex_ THEN 1 END) AS complex__count,
count(CASE WHEN complexfloating THEN 1 END) AS complexfloating_count,
count(CASE WHEN compress THEN 1 END) AS compress_count,
count(CASE WHEN concatenate THEN 1 END) AS concatenate_count,
count(CASE WHEN conj THEN 1 END) AS conj_count,
count(CASE WHEN conjugate THEN 1 END) AS conjugate_count,
count(CASE WHEN convolve THEN 1 END) AS convolve_count,
count(CASE WHEN copy THEN 1 END) AS copy_count,
count(CASE WHEN copysign THEN 1 END) AS copysign_count,
count(CASE WHEN copyto THEN 1 END) AS copyto_count,
count(CASE WHEN core THEN 1 END) AS core_count,
count(CASE WHEN corrcoef THEN 1 END) AS corrcoef_count,
count(CASE WHEN correlate THEN 1 END) AS correlate_count,
count(CASE WHEN cos THEN 1 END) AS cos_count,
count(CASE WHEN cosh THEN 1 END) AS cosh_count,
count(CASE WHEN count_nonzero THEN 1 END) AS count_nonzero_count,
count(CASE WHEN cov THEN 1 END) AS cov_count,
count(CASE WHEN cross THEN 1 END) AS cross_count,
count(CASE WHEN csingle THEN 1 END) AS csingle_count,
count(CASE WHEN ctypeslib THEN 1 END) AS ctypeslib_count,
count(CASE WHEN cumprod THEN 1 END) AS cumprod_count,
count(CASE WHEN cumproduct THEN 1 END) AS cumproduct_count,
count(CASE WHEN cumsum THEN 1 END) AS cumsum_count,
count(CASE WHEN datetime64 THEN 1 END) AS datetime64_count,
count(CASE WHEN datetime_as_string THEN 1 END) AS datetime_as_string_count,
count(CASE WHEN datetime_data THEN 1 END) AS datetime_data_count,
count(CASE WHEN deg2rad THEN 1 END) AS deg2rad_count,
count(CASE WHEN degrees THEN 1 END) AS degrees_count,
count(CASE WHEN delete THEN 1 END) AS delete_count,
count(CASE WHEN deprecate THEN 1 END) AS deprecate_count,
count(CASE WHEN deprecate_with_doc THEN 1 END) AS deprecate_with_doc_count,
count(CASE WHEN diag THEN 1 END) AS diag_count,
count(CASE WHEN diag_indices THEN 1 END) AS diag_indices_count,
count(CASE WHEN diag_indices_from THEN 1 END) AS diag_indices_from_count,
count(CASE WHEN diagflat THEN 1 END) AS diagflat_count,
count(CASE WHEN diagonal THEN 1 END) AS diagonal_count,
count(CASE WHEN diff THEN 1 END) AS diff_count,
count(CASE WHEN digitize THEN 1 END) AS digitize_count,
count(CASE WHEN disp THEN 1 END) AS disp_count,
count(CASE WHEN divide THEN 1 END) AS divide_count,
count(CASE WHEN division THEN 1 END) AS division_count,
count(CASE WHEN divmod THEN 1 END) AS divmod_count,
count(CASE WHEN dot THEN 1 END) AS dot_count,
count(CASE WHEN double THEN 1 END) AS double_count,
count(CASE WHEN dsplit THEN 1 END) AS dsplit_count,
count(CASE WHEN dstack THEN 1 END) AS dstack_count,
count(CASE WHEN dtype THEN 1 END) AS dtype_count,
count(CASE WHEN e THEN 1 END) AS e_count,
count(CASE WHEN ediff1d THEN 1 END) AS ediff1d_count,
count(CASE WHEN einsum THEN 1 END) AS einsum_count,
count(CASE WHEN einsum_path THEN 1 END) AS einsum_path_count,
count(CASE WHEN emath THEN 1 END) AS emath_count,
count(CASE WHEN empty THEN 1 END) AS empty_count,
count(CASE WHEN empty_like THEN 1 END) AS empty_like_count,
count(CASE WHEN equal THEN 1 END) AS equal_count,
count(CASE WHEN errstate THEN 1 END) AS errstate_count,
count(CASE WHEN euler_gamma THEN 1 END) AS euler_gamma_count,
count(CASE WHEN exp THEN 1 END) AS exp_count,
count(CASE WHEN exp2 THEN 1 END) AS exp2_count,
count(CASE WHEN expand_dims THEN 1 END) AS expand_dims_count,
count(CASE WHEN expm1 THEN 1 END) AS expm1_count,
count(CASE WHEN extract THEN 1 END) AS extract_count,
count(CASE WHEN eye THEN 1 END) AS eye_count,
count(CASE WHEN fabs THEN 1 END) AS fabs_count,
count(CASE WHEN fastCopyAndTranspose THEN 1 END) AS fastCopyAndTranspose_count,
count(CASE WHEN fft THEN 1 END) AS fft_count,
count(CASE WHEN fill_diagonal THEN 1 END) AS fill_diagonal_count,
count(CASE WHEN find_common_type THEN 1 END) AS find_common_type_count,
count(CASE WHEN finfo THEN 1 END) AS finfo_count,
count(CASE WHEN fix THEN 1 END) AS fix_count,
count(CASE WHEN flatiter THEN 1 END) AS flatiter_count,
count(CASE WHEN flatnonzero THEN 1 END) AS flatnonzero_count,
count(CASE WHEN flexible THEN 1 END) AS flexible_count,
count(CASE WHEN flip THEN 1 END) AS flip_count,
count(CASE WHEN fliplr THEN 1 END) AS fliplr_count,
count(CASE WHEN flipud THEN 1 END) AS flipud_count,
count(CASE WHEN float THEN 1 END) AS float_count,
count(CASE WHEN float128 THEN 1 END) AS float128_count,
count(CASE WHEN float16 THEN 1 END) AS float16_count,
count(CASE WHEN float32 THEN 1 END) AS float32_count,
count(CASE WHEN float64 THEN 1 END) AS float64_count,
count(CASE WHEN float_ THEN 1 END) AS float__count,
count(CASE WHEN float_power THEN 1 END) AS float_power_count,
count(CASE WHEN floating THEN 1 END) AS floating_count,
count(CASE WHEN floor THEN 1 END) AS floor_count,
count(CASE WHEN floor_divide THEN 1 END) AS floor_divide_count,
count(CASE WHEN fmax THEN 1 END) AS fmax_count,
count(CASE WHEN fmin THEN 1 END) AS fmin_count,
count(CASE WHEN fmod THEN 1 END) AS fmod_count,
count(CASE WHEN format_float_positional THEN 1 END) AS format_float_positional_count,
count(CASE WHEN format_float_scientific THEN 1 END) AS format_float_scientific_count,
count(CASE WHEN format_parser THEN 1 END) AS format_parser_count,
count(CASE WHEN frexp THEN 1 END) AS frexp_count,
count(CASE WHEN frombuffer THEN 1 END) AS frombuffer_count,
count(CASE WHEN fromfile THEN 1 END) AS fromfile_count,
count(CASE WHEN fromfunction THEN 1 END) AS fromfunction_count,
count(CASE WHEN fromiter THEN 1 END) AS fromiter_count,
count(CASE WHEN frompyfunc THEN 1 END) AS frompyfunc_count,
count(CASE WHEN fromregex THEN 1 END) AS fromregex_count,
count(CASE WHEN fromstring THEN 1 END) AS fromstring_count,
count(CASE WHEN full THEN 1 END) AS full_count,
count(CASE WHEN full_like THEN 1 END) AS full_like_count,
count(CASE WHEN fv THEN 1 END) AS fv_count,
count(CASE WHEN generic THEN 1 END) AS generic_count,
count(CASE WHEN genfromtxt THEN 1 END) AS genfromtxt_count,
count(CASE WHEN geomspace THEN 1 END) AS geomspace_count,
count(CASE WHEN get_array_wrap THEN 1 END) AS get_array_wrap_count,
count(CASE WHEN get_include THEN 1 END) AS get_include_count,
count(CASE WHEN get_printoptions THEN 1 END) AS get_printoptions_count,
count(CASE WHEN getbufsize THEN 1 END) AS getbufsize_count,
count(CASE WHEN geterr THEN 1 END) AS geterr_count,
count(CASE WHEN geterrcall THEN 1 END) AS geterrcall_count,
count(CASE WHEN geterrobj THEN 1 END) AS geterrobj_count,
count(CASE WHEN gradient THEN 1 END) AS gradient_count,
count(CASE WHEN greater THEN 1 END) AS greater_count,
count(CASE WHEN greater_equal THEN 1 END) AS greater_equal_count,
count(CASE WHEN half THEN 1 END) AS half_count,
count(CASE WHEN hamming THEN 1 END) AS hamming_count,
count(CASE WHEN hanning THEN 1 END) AS hanning_count,
count(CASE WHEN heaviside THEN 1 END) AS heaviside_count,
count(CASE WHEN histogram THEN 1 END) AS histogram_count,
count(CASE WHEN histogram2d THEN 1 END) AS histogram2d_count,
count(CASE WHEN histogramdd THEN 1 END) AS histogramdd_count,
count(CASE WHEN hsplit THEN 1 END) AS hsplit_count,
count(CASE WHEN hstack THEN 1 END) AS hstack_count,
count(CASE WHEN hypot THEN 1 END) AS hypot_count,
count(CASE WHEN i0 THEN 1 END) AS i0_count,
count(CASE WHEN identity THEN 1 END) AS identity_count,
count(CASE WHEN iinfo THEN 1 END) AS iinfo_count,
count(CASE WHEN imag THEN 1 END) AS imag_count,
count(CASE WHEN in1d THEN 1 END) AS in1d_count,
count(CASE WHEN index_exp THEN 1 END) AS index_exp_count,
count(CASE WHEN indices THEN 1 END) AS indices_count,
count(CASE WHEN inexact THEN 1 END) AS inexact_count,
count(CASE WHEN inf THEN 1 END) AS inf_count,
count(CASE WHEN info THEN 1 END) AS info_count,
count(CASE WHEN infty THEN 1 END) AS infty_count,
count(CASE WHEN inner THEN 1 END) AS inner_count,
count(CASE WHEN insert THEN 1 END) AS insert_count,
count(CASE WHEN int THEN 1 END) AS int_count,
count(CASE WHEN int0 THEN 1 END) AS int0_count,
count(CASE WHEN int16 THEN 1 END) AS int16_count,
count(CASE WHEN int32 THEN 1 END) AS int32_count,
count(CASE WHEN int64 THEN 1 END) AS int64_count,
count(CASE WHEN int8 THEN 1 END) AS int8_count,
count(CASE WHEN int_ THEN 1 END) AS int__count,
count(CASE WHEN int_asbuffer THEN 1 END) AS int_asbuffer_count,
count(CASE WHEN intc THEN 1 END) AS intc_count,
count(CASE WHEN integer THEN 1 END) AS integer_count,
count(CASE WHEN interp THEN 1 END) AS interp_count,
count(CASE WHEN intersect1d THEN 1 END) AS intersect1d_count,
count(CASE WHEN intp THEN 1 END) AS intp_count,
count(CASE WHEN invert THEN 1 END) AS invert_count,
count(CASE WHEN ipmt THEN 1 END) AS ipmt_count,
count(CASE WHEN irr THEN 1 END) AS irr_count,
count(CASE WHEN is_busday THEN 1 END) AS is_busday_count,
count(CASE WHEN isclose THEN 1 END) AS isclose_count,
count(CASE WHEN iscomplex THEN 1 END) AS iscomplex_count,
count(CASE WHEN iscomplexobj THEN 1 END) AS iscomplexobj_count,
count(CASE WHEN isfinite THEN 1 END) AS isfinite_count,
count(CASE WHEN isfortran THEN 1 END) AS isfortran_count,
count(CASE WHEN isin THEN 1 END) AS isin_count,
count(CASE WHEN isinf THEN 1 END) AS isinf_count,
count(CASE WHEN isnan THEN 1 END) AS isnan_count,
count(CASE WHEN isnat THEN 1 END) AS isnat_count,
count(CASE WHEN isneginf THEN 1 END) AS isneginf_count,
count(CASE WHEN isposinf THEN 1 END) AS isposinf_count,
count(CASE WHEN isreal THEN 1 END) AS isreal_count,
count(CASE WHEN isrealobj THEN 1 END) AS isrealobj_count,
count(CASE WHEN isscalar THEN 1 END) AS isscalar_count,
count(CASE WHEN issctype THEN 1 END) AS issctype_count,
count(CASE WHEN issubclass_ THEN 1 END) AS issubclass__count,
count(CASE WHEN issubdtype THEN 1 END) AS issubdtype_count,
count(CASE WHEN issubsctype THEN 1 END) AS issubsctype_count,
count(CASE WHEN iterable THEN 1 END) AS iterable_count,
count(CASE WHEN ix_ THEN 1 END) AS ix__count,
count(CASE WHEN kaiser THEN 1 END) AS kaiser_count,
count(CASE WHEN kron THEN 1 END) AS kron_count,
count(CASE WHEN ldexp THEN 1 END) AS ldexp_count,
count(CASE WHEN left_shift THEN 1 END) AS left_shift_count,
count(CASE WHEN less THEN 1 END) AS less_count,
count(CASE WHEN less_equal THEN 1 END) AS less_equal_count,
count(CASE WHEN lexsort THEN 1 END) AS lexsort_count,
count(CASE WHEN lib THEN 1 END) AS lib_count,
count(CASE WHEN linalg THEN 1 END) AS linalg_count,
count(CASE WHEN linspace THEN 1 END) AS linspace_count,
count(CASE WHEN little_endian THEN 1 END) AS little_endian_count,
count(CASE WHEN load THEN 1 END) AS load_count,
count(CASE WHEN loads THEN 1 END) AS loads_count,
count(CASE WHEN loadtxt THEN 1 END) AS loadtxt_count,
count(CASE WHEN log THEN 1 END) AS log_count,
count(CASE WHEN log10 THEN 1 END) AS log10_count,
count(CASE WHEN log1p THEN 1 END) AS log1p_count,
count(CASE WHEN log2 THEN 1 END) AS log2_count,
count(CASE WHEN logaddexp THEN 1 END) AS logaddexp_count,
count(CASE WHEN logaddexp2 THEN 1 END) AS logaddexp2_count,
count(CASE WHEN logical_and THEN 1 END) AS logical_and_count,
count(CASE WHEN logical_not THEN 1 END) AS logical_not_count,
count(CASE WHEN logical_or THEN 1 END) AS logical_or_count,
count(CASE WHEN logical_xor THEN 1 END) AS logical_xor_count,
count(CASE WHEN logspace THEN 1 END) AS logspace_count,
count(CASE WHEN long THEN 1 END) AS long_count,
count(CASE WHEN longcomplex THEN 1 END) AS longcomplex_count,
count(CASE WHEN longdouble THEN 1 END) AS longdouble_count,
count(CASE WHEN longfloat THEN 1 END) AS longfloat_count,
count(CASE WHEN longlong THEN 1 END) AS longlong_count,
count(CASE WHEN lookfor THEN 1 END) AS lookfor_count,
count(CASE WHEN ma THEN 1 END) AS ma_count,
count(CASE WHEN mafromtxt THEN 1 END) AS mafromtxt_count,
count(CASE WHEN mask_indices THEN 1 END) AS mask_indices_count,
count(CASE WHEN mat THEN 1 END) AS mat_count,
count(CASE WHEN math THEN 1 END) AS math_count,
count(CASE WHEN matmul THEN 1 END) AS matmul_count,
count(CASE WHEN matrix THEN 1 END) AS matrix_count,
count(CASE WHEN matrixlib THEN 1 END) AS matrixlib_count,
count(CASE WHEN max THEN 1 END) AS max_count,
count(CASE WHEN maximum THEN 1 END) AS maximum_count,
count(CASE WHEN maximum_sctype THEN 1 END) AS maximum_sctype_count,
count(CASE WHEN may_share_memory THEN 1 END) AS may_share_memory_count,
count(CASE WHEN mean THEN 1 END) AS mean_count,
count(CASE WHEN median THEN 1 END) AS median_count,
count(CASE WHEN memmap THEN 1 END) AS memmap_count,
count(CASE WHEN meshgrid THEN 1 END) AS meshgrid_count,
count(CASE WHEN mgrid THEN 1 END) AS mgrid_count,
count(CASE WHEN min THEN 1 END) AS min_count,
count(CASE WHEN min_scalar_type THEN 1 END) AS min_scalar_type_count,
count(CASE WHEN minimum THEN 1 END) AS minimum_count,
count(CASE WHEN mintypecode THEN 1 END) AS mintypecode_count,
count(CASE WHEN mirr THEN 1 END) AS mirr_count,
count(CASE WHEN mod THEN 1 END) AS mod_count,
count(CASE WHEN modf THEN 1 END) AS modf_count,
count(CASE WHEN moveaxis THEN 1 END) AS moveaxis_count,
count(CASE WHEN msort THEN 1 END) AS msort_count,
count(CASE WHEN multiply THEN 1 END) AS multiply_count,
count(CASE WHEN nan THEN 1 END) AS nan_count,
count(CASE WHEN nan_to_num THEN 1 END) AS nan_to_num_count,
count(CASE WHEN nanargmax THEN 1 END) AS nanargmax_count,
count(CASE WHEN nanargmin THEN 1 END) AS nanargmin_count,
count(CASE WHEN nancumprod THEN 1 END) AS nancumprod_count,
count(CASE WHEN nancumsum THEN 1 END) AS nancumsum_count,
count(CASE WHEN nanmax THEN 1 END) AS nanmax_count,
count(CASE WHEN nanmean THEN 1 END) AS nanmean_count,
count(CASE WHEN nanmedian THEN 1 END) AS nanmedian_count,
count(CASE WHEN nanmin THEN 1 END) AS nanmin_count,
count(CASE WHEN nanpercentile THEN 1 END) AS nanpercentile_count,
count(CASE WHEN nanprod THEN 1 END) AS nanprod_count,
count(CASE WHEN nanstd THEN 1 END) AS nanstd_count,
count(CASE WHEN nansum THEN 1 END) AS nansum_count,
count(CASE WHEN nanvar THEN 1 END) AS nanvar_count,
count(CASE WHEN nbytes THEN 1 END) AS nbytes_count,
count(CASE WHEN ndarray THEN 1 END) AS ndarray_count,
count(CASE WHEN ndenumerate THEN 1 END) AS ndenumerate_count,
count(CASE WHEN ndfromtxt THEN 1 END) AS ndfromtxt_count,
count(CASE WHEN ndim THEN 1 END) AS ndim_count,
count(CASE WHEN ndindex THEN 1 END) AS ndindex_count,
count(CASE WHEN nditer THEN 1 END) AS nditer_count,
count(CASE WHEN negative THEN 1 END) AS negative_count,
count(CASE WHEN nested_iters THEN 1 END) AS nested_iters_count,
count(CASE WHEN newaxis THEN 1 END) AS newaxis_count,
count(CASE WHEN nextafter THEN 1 END) AS nextafter_count,
count(CASE WHEN nonzero THEN 1 END) AS nonzero_count,
count(CASE WHEN not_equal THEN 1 END) AS not_equal_count,
count(CASE WHEN nper THEN 1 END) AS nper_count,
count(CASE WHEN npv THEN 1 END) AS npv_count,
count(CASE WHEN numarray THEN 1 END) AS numarray_count,
count(CASE WHEN number THEN 1 END) AS number_count,
count(CASE WHEN obj2sctype THEN 1 END) AS obj2sctype_count,
count(CASE WHEN object THEN 1 END) AS object_count,
count(CASE WHEN object0 THEN 1 END) AS object0_count,
count(CASE WHEN object_ THEN 1 END) AS object__count,
count(CASE WHEN ogrid THEN 1 END) AS ogrid_count,
count(CASE WHEN oldnumeric THEN 1 END) AS oldnumeric_count,
count(CASE WHEN ones THEN 1 END) AS ones_count,
count(CASE WHEN ones_like THEN 1 END) AS ones_like_count,
count(CASE WHEN outer THEN 1 END) AS outer_count,
count(CASE WHEN packbits THEN 1 END) AS packbits_count,
count(CASE WHEN pad THEN 1 END) AS pad_count,
count(CASE WHEN partition THEN 1 END) AS partition_count,
count(CASE WHEN percentile THEN 1 END) AS percentile_count,
count(CASE WHEN pi THEN 1 END) AS pi_count,
count(CASE WHEN piecewise THEN 1 END) AS piecewise_count,
count(CASE WHEN pkgload THEN 1 END) AS pkgload_count,
count(CASE WHEN place THEN 1 END) AS place_count,
count(CASE WHEN pmt THEN 1 END) AS pmt_count,
count(CASE WHEN poly THEN 1 END) AS poly_count,
count(CASE WHEN poly1d THEN 1 END) AS poly1d_count,
count(CASE WHEN polyadd THEN 1 END) AS polyadd_count,
count(CASE WHEN polyder THEN 1 END) AS polyder_count,
count(CASE WHEN polydiv THEN 1 END) AS polydiv_count,
count(CASE WHEN polyfit THEN 1 END) AS polyfit_count,
count(CASE WHEN polyint THEN 1 END) AS polyint_count,
count(CASE WHEN polymul THEN 1 END) AS polymul_count,
count(CASE WHEN polynomial THEN 1 END) AS polynomial_count,
count(CASE WHEN polysub THEN 1 END) AS polysub_count,
count(CASE WHEN polyval THEN 1 END) AS polyval_count,
count(CASE WHEN positive THEN 1 END) AS positive_count,
count(CASE WHEN power THEN 1 END) AS power_count,
count(CASE WHEN ppmt THEN 1 END) AS ppmt_count,
count(CASE WHEN print_function THEN 1 END) AS print_function_count,
count(CASE WHEN prod THEN 1 END) AS prod_count,
count(CASE WHEN product THEN 1 END) AS product_count,
count(CASE WHEN promote_types THEN 1 END) AS promote_types_count,
count(CASE WHEN ptp THEN 1 END) AS ptp_count,
count(CASE WHEN put THEN 1 END) AS put_count,
count(CASE WHEN putmask THEN 1 END) AS putmask_count,
count(CASE WHEN pv THEN 1 END) AS pv_count,
count(CASE WHEN r_ THEN 1 END) AS r__count,
count(CASE WHEN rad2deg THEN 1 END) AS rad2deg_count,
count(CASE WHEN radians THEN 1 END) AS radians_count,
count(CASE WHEN random THEN 1 END) AS random_count,
count(CASE WHEN rank THEN 1 END) AS rank_count,
count(CASE WHEN rate THEN 1 END) AS rate_count,
count(CASE WHEN ravel THEN 1 END) AS ravel_count,
count(CASE WHEN ravel_multi_index THEN 1 END) AS ravel_multi_index_count,
count(CASE WHEN real THEN 1 END) AS real_count,
count(CASE WHEN real_if_close THEN 1 END) AS real_if_close_count,
count(CASE WHEN rec THEN 1 END) AS rec_count,
count(CASE WHEN recarray THEN 1 END) AS recarray_count,
count(CASE WHEN recfromcsv THEN 1 END) AS recfromcsv_count,
count(CASE WHEN recfromtxt THEN 1 END) AS recfromtxt_count,
count(CASE WHEN reciprocal THEN 1 END) AS reciprocal_count,
count(CASE WHEN record THEN 1 END) AS record_count,
count(CASE WHEN remainder THEN 1 END) AS remainder_count,
count(CASE WHEN repeat THEN 1 END) AS repeat_count,
count(CASE WHEN require THEN 1 END) AS require_count,
count(CASE WHEN reshape THEN 1 END) AS reshape_count,
count(CASE WHEN resize THEN 1 END) AS resize_count,
count(CASE WHEN result_type THEN 1 END) AS result_type_count,
count(CASE WHEN right_shift THEN 1 END) AS right_shift_count,
count(CASE WHEN rint THEN 1 END) AS rint_count,
count(CASE WHEN roll THEN 1 END) AS roll_count,
count(CASE WHEN rollaxis THEN 1 END) AS rollaxis_count,
count(CASE WHEN roots THEN 1 END) AS roots_count,
count(CASE WHEN rot90 THEN 1 END) AS rot90_count,
count(CASE WHEN round THEN 1 END) AS round_count,
count(CASE WHEN round_ THEN 1 END) AS round__count,
count(CASE WHEN row_stack THEN 1 END) AS row_stack_count,
count(CASE WHEN s_ THEN 1 END) AS s__count,
count(CASE WHEN safe_eval THEN 1 END) AS safe_eval_count,
count(CASE WHEN save THEN 1 END) AS save_count,
count(CASE WHEN savetxt THEN 1 END) AS savetxt_count,
count(CASE WHEN savez THEN 1 END) AS savez_count,
count(CASE WHEN savez_compressed THEN 1 END) AS savez_compressed_count,
count(CASE WHEN sctype2char THEN 1 END) AS sctype2char_count,
count(CASE WHEN sctypeDict THEN 1 END) AS sctypeDict_count,
count(CASE WHEN sctypeNA THEN 1 END) AS sctypeNA_count,
count(CASE WHEN sctypes THEN 1 END) AS sctypes_count,
count(CASE WHEN searchsorted THEN 1 END) AS searchsorted_count,
count(CASE WHEN select THEN 1 END) AS select_count,
count(CASE WHEN set_numeric_ops THEN 1 END) AS set_numeric_ops_count,
count(CASE WHEN set_printoptions THEN 1 END) AS set_printoptions_count,
count(CASE WHEN set_string_function THEN 1 END) AS set_string_function_count,
count(CASE WHEN setbufsize THEN 1 END) AS setbufsize_count,
count(CASE WHEN setdiff1d THEN 1 END) AS setdiff1d_count,
count(CASE WHEN seterr THEN 1 END) AS seterr_count,
count(CASE WHEN seterrcall THEN 1 END) AS seterrcall_count,
count(CASE WHEN seterrobj THEN 1 END) AS seterrobj_count,
count(CASE WHEN setxor1d THEN 1 END) AS setxor1d_count,
count(CASE WHEN shape THEN 1 END) AS shape_count,
count(CASE WHEN shares_memory THEN 1 END) AS shares_memory_count,
count(CASE WHEN short THEN 1 END) AS short_count,
count(CASE WHEN show_config THEN 1 END) AS show_config_count,
count(CASE WHEN sign THEN 1 END) AS sign_count,
count(CASE WHEN signbit THEN 1 END) AS signbit_count,
count(CASE WHEN signedinteger THEN 1 END) AS signedinteger_count,
count(CASE WHEN sin THEN 1 END) AS sin_count,
count(CASE WHEN sinc THEN 1 END) AS sinc_count,
count(CASE WHEN single THEN 1 END) AS single_count,
count(CASE WHEN singlecomplex THEN 1 END) AS singlecomplex_count,
count(CASE WHEN sinh THEN 1 END) AS sinh_count,
count(CASE WHEN size THEN 1 END) AS size_count,
count(CASE WHEN sometrue THEN 1 END) AS sometrue_count,
count(CASE WHEN sort THEN 1 END) AS sort_count,
count(CASE WHEN sort_complex THEN 1 END) AS sort_complex_count,
count(CASE WHEN source THEN 1 END) AS source_count,
count(CASE WHEN spacing THEN 1 END) AS spacing_count,
count(CASE WHEN split THEN 1 END) AS split_count,
count(CASE WHEN sqrt THEN 1 END) AS sqrt_count,
count(CASE WHEN square THEN 1 END) AS square_count,
count(CASE WHEN squeeze THEN 1 END) AS squeeze_count,
count(CASE WHEN stack THEN 1 END) AS stack_count,
count(CASE WHEN std THEN 1 END) AS std_count,
count(CASE WHEN str THEN 1 END) AS str_count,
count(CASE WHEN str0 THEN 1 END) AS str0_count,
count(CASE WHEN str_ THEN 1 END) AS str__count,
count(CASE WHEN string_ THEN 1 END) AS string__count,
count(CASE WHEN subtract THEN 1 END) AS subtract_count,
count(CASE WHEN sum THEN 1 END) AS sum_count,
count(CASE WHEN swapaxes THEN 1 END) AS swapaxes_count,
count(CASE WHEN sys THEN 1 END) AS sys_count,
count(CASE WHEN take THEN 1 END) AS take_count,
count(CASE WHEN tan THEN 1 END) AS tan_count,
count(CASE WHEN tanh THEN 1 END) AS tanh_count,
count(CASE WHEN tensordot THEN 1 END) AS tensordot_count,
count(CASE WHEN test THEN 1 END) AS test_count,
count(CASE WHEN testing THEN 1 END) AS testing_count,
count(CASE WHEN tile THEN 1 END) AS tile_count,
count(CASE WHEN timedelta64 THEN 1 END) AS timedelta64_count,
count(CASE WHEN trace THEN 1 END) AS trace_count,
count(CASE WHEN tracemalloc_domain THEN 1 END) AS tracemalloc_domain_count,
count(CASE WHEN transpose THEN 1 END) AS transpose_count,
count(CASE WHEN trapz THEN 1 END) AS trapz_count,
count(CASE WHEN tri THEN 1 END) AS tri_count,
count(CASE WHEN tril THEN 1 END) AS tril_count,
count(CASE WHEN tril_indices THEN 1 END) AS tril_indices_count,
count(CASE WHEN tril_indices_from THEN 1 END) AS tril_indices_from_count,
count(CASE WHEN trim_zeros THEN 1 END) AS trim_zeros_count,
count(CASE WHEN triu THEN 1 END) AS triu_count,
count(CASE WHEN triu_indices THEN 1 END) AS triu_indices_count,
count(CASE WHEN triu_indices_from THEN 1 END) AS triu_indices_from_count,
count(CASE WHEN true_divide THEN 1 END) AS true_divide_count,
count(CASE WHEN trunc THEN 1 END) AS trunc_count,
count(CASE WHEN typeDict THEN 1 END) AS typeDict_count,
count(CASE WHEN typeNA THEN 1 END) AS typeNA_count,
count(CASE WHEN typecodes THEN 1 END) AS typecodes_count,
count(CASE WHEN typename THEN 1 END) AS typename_count,
count(CASE WHEN ubyte THEN 1 END) AS ubyte_count,
count(CASE WHEN ufunc THEN 1 END) AS ufunc_count,
count(CASE WHEN uint THEN 1 END) AS uint_count,
count(CASE WHEN uint0 THEN 1 END) AS uint0_count,
count(CASE WHEN uint16 THEN 1 END) AS uint16_count,
count(CASE WHEN uint32 THEN 1 END) AS uint32_count,
count(CASE WHEN uint64 THEN 1 END) AS uint64_count,
count(CASE WHEN uint8 THEN 1 END) AS uint8_count,
count(CASE WHEN uintc THEN 1 END) AS uintc_count,
count(CASE WHEN uintp THEN 1 END) AS uintp_count,
count(CASE WHEN ulonglong THEN 1 END) AS ulonglong_count,
count(CASE WHEN unicode THEN 1 END) AS unicode_count,
count(CASE WHEN unicode_ THEN 1 END) AS unicode__count,
count(CASE WHEN union1d THEN 1 END) AS union1d_count,
count(CASE WHEN unique THEN 1 END) AS unique_count,
count(CASE WHEN unpackbits THEN 1 END) AS unpackbits_count,
count(CASE WHEN unravel_index THEN 1 END) AS unravel_index_count,
count(CASE WHEN unsignedinteger THEN 1 END) AS unsignedinteger_count,
count(CASE WHEN unwrap THEN 1 END) AS unwrap_count,
count(CASE WHEN ushort THEN 1 END) AS ushort_count,
count(CASE WHEN vander THEN 1 END) AS vander_count,
count(CASE WHEN var THEN 1 END) AS var_count,
count(CASE WHEN vdot THEN 1 END) AS vdot_count,
count(CASE WHEN vectorize THEN 1 END) AS vectorize_count,
count(CASE WHEN version THEN 1 END) AS version_count,
count(CASE WHEN void THEN 1 END) AS void_count,
count(CASE WHEN void0 THEN 1 END) AS void0_count,
count(CASE WHEN vsplit THEN 1 END) AS vsplit_count,
count(CASE WHEN vstack THEN 1 END) AS vstack_count,
count(CASE WHEN warnings THEN 1 END) AS warnings_count,
count(CASE WHEN where THEN 1 END) AS where_count,
count(CASE WHEN who THEN 1 END) AS who_count,
count(CASE WHEN zeros THEN 1 END) AS zeros_count,
count(CASE WHEN zeros_like THEN 1 END) AS zeros_like_count
FROM (SELECT
REGEXP_MATCH( commit,r'abs(\s?[A-Za-z0-9_]+\s?[.,/)]') AS abs,
REGEXP_MATCH( commit,r'absolute(\s?[A-Za-z0-9_]+\s?[.,/)]') AS absolute,
REGEXP_MATCH( commit,r'absolute_import(\s?[A-Za-z0-9_]+\s?[.,/)]') AS absolute_import,
REGEXP_MATCH( commit,r'add(\s?[A-Za-z0-9_]+\s?[.,/)]') AS add,
REGEXP_MATCH( commit,r'add_docstring(\s?[A-Za-z0-9_]+\s?[.,/)]') AS add_docstring,
REGEXP_MATCH( commit,r'add_newdoc(\s?[A-Za-z0-9_]+\s?[.,/)]') AS add_newdoc,
REGEXP_MATCH( commit,r'add_newdoc_ufunc(\s?[A-Za-z0-9_]+\s?[.,/)]') AS add_newdoc_ufunc,
REGEXP_MATCH( commit,r'add_newdocs(\s?[A-Za-z0-9_]+\s?[.,/)]') AS add_newdocs,
REGEXP_MATCH( commit,r'alen(\s?[A-Za-z0-9_]+\s?[.,/)]') AS alen,
REGEXP_MATCH( commit,r'all(\s?[A-Za-z0-9_]+\s?[.,/)]') AS all,
REGEXP_MATCH( commit,r'allclose(\s?[A-Za-z0-9_]+\s?[.,/)]') AS allclose,
REGEXP_MATCH( commit,r'alltrue(\s?[A-Za-z0-9_]+\s?[.,/)]') AS alltrue,
REGEXP_MATCH( commit,r'amax(\s?[A-Za-z0-9_]+\s?[.,/)]') AS amax,
REGEXP_MATCH( commit,r'amin(\s?[A-Za-z0-9_]+\s?[.,/)]') AS amin,
REGEXP_MATCH( commit,r'angle(\s?[A-Za-z0-9_]+\s?[.,/)]') AS angle,
REGEXP_MATCH( commit,r'any(\s?[A-Za-z0-9_]+\s?[.,/)]') AS any,
REGEXP_MATCH( commit,r'append(\s?[A-Za-z0-9_]+\s?[.,/)]') AS append,
REGEXP_MATCH( commit,r'apply_along_axis(\s?[A-Za-z0-9_]+\s?[.,/)]') AS apply_along_axis,
REGEXP_MATCH( commit,r'apply_over_axes(\s?[A-Za-z0-9_]+\s?[.,/)]') AS apply_over_axes,
REGEXP_MATCH( commit,r'arange(\s?[A-Za-z0-9_]+\s?[.,/)]') AS arange,
REGEXP_MATCH( commit,r'arccos(\s?[A-Za-z0-9_]+\s?[.,/)]') AS arccos,
REGEXP_MATCH( commit,r'arccosh(\s?[A-Za-z0-9_]+\s?[.,/)]') AS arccosh,
REGEXP_MATCH( commit,r'arcsin(\s?[A-Za-z0-9_]+\s?[.,/)]') AS arcsin,
REGEXP_MATCH( commit,r'arcsinh(\s?[A-Za-z0-9_]+\s?[.,/)]') AS arcsinh,
REGEXP_MATCH( commit,r'arctan(\s?[A-Za-z0-9_]+\s?[.,/)]') AS arctan,
REGEXP_MATCH( commit,r'arctan2(\s?[A-Za-z0-9_]+\s?[.,/)]') AS arctan2,
REGEXP_MATCH( commit,r'arctanh(\s?[A-Za-z0-9_]+\s?[.,/)]') AS arctanh,
REGEXP_MATCH( commit,r'argmax(\s?[A-Za-z0-9_]+\s?[.,/)]') AS argmax,
REGEXP_MATCH( commit,r'argmin(\s?[A-Za-z0-9_]+\s?[.,/)]') AS argmin,
REGEXP_MATCH( commit,r'argpartition(\s?[A-Za-z0-9_]+\s?[.,/)]') AS argpartition,
REGEXP_MATCH( commit,r'argsort(\s?[A-Za-z0-9_]+\s?[.,/)]') AS argsort,
REGEXP_MATCH( commit,r'argwhere(\s?[A-Za-z0-9_]+\s?[.,/)]') AS argwhere,
REGEXP_MATCH( commit,r'around(\s?[A-Za-z0-9_]+\s?[.,/)]') AS around,
REGEXP_MATCH( commit,r'array(\s?[A-Za-z0-9_]+\s?[.,/)]') AS array,
REGEXP_MATCH( commit,r'array2string(\s?[A-Za-z0-9_]+\s?[.,/)]') AS array2string,
REGEXP_MATCH( commit,r'array_equal(\s?[A-Za-z0-9_]+\s?[.,/)]') AS array_equal,
REGEXP_MATCH( commit,r'array_equiv(\s?[A-Za-z0-9_]+\s?[.,/)]') AS array_equiv,
REGEXP_MATCH( commit,r'array_repr(\s?[A-Za-z0-9_]+\s?[.,/)]') AS array_repr,
REGEXP_MATCH( commit,r'array_split(\s?[A-Za-z0-9_]+\s?[.,/)]') AS array_split,
REGEXP_MATCH( commit,r'array_str(\s?[A-Za-z0-9_]+\s?[.,/)]') AS array_str,
REGEXP_MATCH( commit,r'asanyarray(\s?[A-Za-z0-9_]+\s?[.,/)]') AS asanyarray,
REGEXP_MATCH( commit,r'asarray(\s?[A-Za-z0-9_]+\s?[.,/)]') AS asarray,
REGEXP_MATCH( commit,r'asarray_chkfinite(\s?[A-Za-z0-9_]+\s?[.,/)]') AS asarray_chkfinite,
REGEXP_MATCH( commit,r'ascontiguousarray(\s?[A-Za-z0-9_]+\s?[.,/)]') AS ascontiguousarray,
REGEXP_MATCH( commit,r'asfarray(\s?[A-Za-z0-9_]+\s?[.,/)]') AS asfarray,
REGEXP_MATCH( commit,r'asfortranarray(\s?[A-Za-z0-9_]+\s?[.,/)]') AS asfortranarray,
REGEXP_MATCH( commit,r'asmatrix(\s?[A-Za-z0-9_]+\s?[.,/)]') AS asmatrix,
REGEXP_MATCH( commit,r'asscalar(\s?[A-Za-z0-9_]+\s?[.,/)]') AS asscalar,
REGEXP_MATCH( commit,r'atleast_1d(\s?[A-Za-z0-9_]+\s?[.,/)]') AS atleast_1d,
REGEXP_MATCH( commit,r'atleast_2d(\s?[A-Za-z0-9_]+\s?[.,/)]') AS atleast_2d,
REGEXP_MATCH( commit,r'atleast_3d(\s?[A-Za-z0-9_]+\s?[.,/)]') AS atleast_3d,
REGEXP_MATCH( commit,r'average(\s?[A-Za-z0-9_]+\s?[.,/)]') AS average,
REGEXP_MATCH( commit,r'bartlett(\s?[A-Za-z0-9_]+\s?[.,/)]') AS bartlett,
REGEXP_MATCH( commit,r'base_repr(\s?[A-Za-z0-9_]+\s?[.,/)]') AS base_repr,
REGEXP_MATCH( commit,r'bench(\s?[A-Za-z0-9_]+\s?[.,/)]') AS bench,
REGEXP_MATCH( commit,r'binary_repr(\s?[A-Za-z0-9_]+\s?[.,/)]') AS binary_repr,
REGEXP_MATCH( commit,r'bincount(\s?[A-Za-z0-9_]+\s?[.,/)]') AS bincount,
REGEXP_MATCH( commit,r'bitwise_and(\s?[A-Za-z0-9_]+\s?[.,/)]') AS bitwise_and,
REGEXP_MATCH( commit,r'bitwise_not(\s?[A-Za-z0-9_]+\s?[.,/)]') AS bitwise_not,
REGEXP_MATCH( commit,r'bitwise_or(\s?[A-Za-z0-9_]+\s?[.,/)]') AS bitwise_or,
REGEXP_MATCH( commit,r'bitwise_xor(\s?[A-Za-z0-9_]+\s?[.,/)]') AS bitwise_xor,
REGEXP_MATCH( commit,r'blackman(\s?[A-Za-z0-9_]+\s?[.,/)]') AS blackman,
REGEXP_MATCH( commit,r'block(\s?[A-Za-z0-9_]+\s?[.,/)]') AS block,
REGEXP_MATCH( commit,r'bmat(\s?[A-Za-z0-9_]+\s?[.,/)]') AS bmat,
REGEXP_MATCH( commit,r'bool(\s?[A-Za-z0-9_]+\s?[.,/)]') AS bool,
REGEXP_MATCH( commit,r'bool8(\s?[A-Za-z0-9_]+\s?[.,/)]') AS bool8,
REGEXP_MATCH( commit,r'bool_(\s?[A-Za-z0-9_]+\s?[.,/)]') AS bool_,
REGEXP_MATCH( commit,r'broadcast(\s?[A-Za-z0-9_]+\s?[.,/)]') AS broadcast,
REGEXP_MATCH( commit,r'broadcast_arrays(\s?[A-Za-z0-9_]+\s?[.,/)]') AS broadcast_arrays,
REGEXP_MATCH( commit,r'broadcast_to(\s?[A-Za-z0-9_]+\s?[.,/)]') AS broadcast_to,
REGEXP_MATCH( commit,r'busday_count(\s?[A-Za-z0-9_]+\s?[.,/)]') AS busday_count,
REGEXP_MATCH( commit,r'busday_offset(\s?[A-Za-z0-9_]+\s?[.,/)]') AS busday_offset,
REGEXP_MATCH( commit,r'busdaycalendar(\s?[A-Za-z0-9_]+\s?[.,/)]') AS busdaycalendar,
REGEXP_MATCH( commit,r'byte(\s?[A-Za-z0-9_]+\s?[.,/)]') AS byte,
REGEXP_MATCH( commit,r'byte_bounds(\s?[A-Za-z0-9_]+\s?[.,/)]') AS byte_bounds,
REGEXP_MATCH( commit,r'bytes0(\s?[A-Za-z0-9_]+\s?[.,/)]') AS bytes0,
REGEXP_MATCH( commit,r'bytes_(\s?[A-Za-z0-9_]+\s?[.,/)]') AS bytes_,
REGEXP_MATCH( commit,r'c_(\s?[A-Za-z0-9_]+\s?[.,/)]') AS c_,
REGEXP_MATCH( commit,r'can_cast(\s?[A-Za-z0-9_]+\s?[.,/)]') AS can_cast,
REGEXP_MATCH( commit,r'cast(\s?[A-Za-z0-9_]+\s?[.,/)]') AS cast,
REGEXP_MATCH( commit,r'cbrt(\s?[A-Za-z0-9_]+\s?[.,/)]') AS cbrt,
REGEXP_MATCH( commit,r'cdouble(\s?[A-Za-z0-9_]+\s?[.,/)]') AS cdouble,
REGEXP_MATCH( commit,r'ceil(\s?[A-Za-z0-9_]+\s?[.,/)]') AS ceil,
REGEXP_MATCH( commit,r'cfloat(\s?[A-Za-z0-9_]+\s?[.,/)]') AS cfloat,
REGEXP_MATCH( commit,r'char(\s?[A-Za-z0-9_]+\s?[.,/)]') AS char,
REGEXP_MATCH( commit,r'character(\s?[A-Za-z0-9_]+\s?[.,/)]') AS character,
REGEXP_MATCH( commit,r'chararray(\s?[A-Za-z0-9_]+\s?[.,/)]') AS chararray,
REGEXP_MATCH( commit,r'choose(\s?[A-Za-z0-9_]+\s?[.,/)]') AS choose,
REGEXP_MATCH( commit,r'clip(\s?[A-Za-z0-9_]+\s?[.,/)]') AS clip,
REGEXP_MATCH( commit,r'clongdouble(\s?[A-Za-z0-9_]+\s?[.,/)]') AS clongdouble,
REGEXP_MATCH( commit,r'clongfloat(\s?[A-Za-z0-9_]+\s?[.,/)]') AS clongfloat,
REGEXP_MATCH( commit,r'column_stack(\s?[A-Za-z0-9_]+\s?[.,/)]') AS column_stack,
REGEXP_MATCH( commit,r'common_type(\s?[A-Za-z0-9_]+\s?[.,/)]') AS common_type,
REGEXP_MATCH( commit,r'compare_chararrays(\s?[A-Za-z0-9_]+\s?[.,/)]') AS compare_chararrays,
REGEXP_MATCH( commit,r'compat(\s?[A-Za-z0-9_]+\s?[.,/)]') AS compat,
REGEXP_MATCH( commit,r'complex(\s?[A-Za-z0-9_]+\s?[.,/)]') AS complex,
REGEXP_MATCH( commit,r'complex128(\s?[A-Za-z0-9_]+\s?[.,/)]') AS complex128,
REGEXP_MATCH( commit,r'complex256(\s?[A-Za-z0-9_]+\s?[.,/)]') AS complex256,
REGEXP_MATCH( commit,r'complex64(\s?[A-Za-z0-9_]+\s?[.,/)]') AS complex64,
REGEXP_MATCH( commit,r'complex_(\s?[A-Za-z0-9_]+\s?[.,/)]') AS complex_,
REGEXP_MATCH( commit,r'complexfloating(\s?[A-Za-z0-9_]+\s?[.,/)]') AS complexfloating,
REGEXP_MATCH( commit,r'compress(\s?[A-Za-z0-9_]+\s?[.,/)]') AS compress,
REGEXP_MATCH( commit,r'concatenate(\s?[A-Za-z0-9_]+\s?[.,/)]') AS concatenate,
REGEXP_MATCH( commit,r'conj(\s?[A-Za-z0-9_]+\s?[.,/)]') AS conj,
REGEXP_MATCH( commit,r'conjugate(\s?[A-Za-z0-9_]+\s?[.,/)]') AS conjugate,
REGEXP_MATCH( commit,r'convolve(\s?[A-Za-z0-9_]+\s?[.,/)]') AS convolve,
REGEXP_MATCH( commit,r'copy(\s?[A-Za-z0-9_]+\s?[.,/)]') AS copy,
REGEXP_MATCH( commit,r'copysign(\s?[A-Za-z0-9_]+\s?[.,/)]') AS copysign,
REGEXP_MATCH( commit,r'copyto(\s?[A-Za-z0-9_]+\s?[.,/)]') AS copyto,
REGEXP_MATCH( commit,r'core(\s?[A-Za-z0-9_]+\s?[.,/)]') AS core,
REGEXP_MATCH( commit,r'corrcoef(\s?[A-Za-z0-9_]+\s?[.,/)]') AS corrcoef,
REGEXP_MATCH( commit,r'correlate(\s?[A-Za-z0-9_]+\s?[.,/)]') AS correlate,
REGEXP_MATCH( commit,r'cos(\s?[A-Za-z0-9_]+\s?[.,/)]') AS cos,
REGEXP_MATCH( commit,r'cosh(\s?[A-Za-z0-9_]+\s?[.,/)]') AS cosh,
REGEXP_MATCH( commit,r'count_nonzero(\s?[A-Za-z0-9_]+\s?[.,/)]') AS count_nonzero,
REGEXP_MATCH( commit,r'cov(\s?[A-Za-z0-9_]+\s?[.,/)]') AS cov,
REGEXP_MATCH( commit,r'cross(\s?[A-Za-z0-9_]+\s?[.,/)]') AS cross,
REGEXP_MATCH( commit,r'csingle(\s?[A-Za-z0-9_]+\s?[.,/)]') AS csingle,
REGEXP_MATCH( commit,r'ctypeslib(\s?[A-Za-z0-9_]+\s?[.,/)]') AS ctypeslib,
REGEXP_MATCH( commit,r'cumprod(\s?[A-Za-z0-9_]+\s?[.,/)]') AS cumprod,
REGEXP_MATCH( commit,r'cumproduct(\s?[A-Za-z0-9_]+\s?[.,/)]') AS cumproduct,
REGEXP_MATCH( commit,r'cumsum(\s?[A-Za-z0-9_]+\s?[.,/)]') AS cumsum,
REGEXP_MATCH( commit,r'datetime64(\s?[A-Za-z0-9_]+\s?[.,/)]') AS datetime64,
REGEXP_MATCH( commit,r'datetime_as_string(\s?[A-Za-z0-9_]+\s?[.,/)]') AS datetime_as_string,
REGEXP_MATCH( commit,r'datetime_data(\s?[A-Za-z0-9_]+\s?[.,/)]') AS datetime_data,
REGEXP_MATCH( commit,r'deg2rad(\s?[A-Za-z0-9_]+\s?[.,/)]') AS deg2rad,
REGEXP_MATCH( commit,r'degrees(\s?[A-Za-z0-9_]+\s?[.,/)]') AS degrees,
REGEXP_MATCH( commit,r'delete(\s?[A-Za-z0-9_]+\s?[.,/)]') AS delete,
REGEXP_MATCH( commit,r'deprecate(\s?[A-Za-z0-9_]+\s?[.,/)]') AS deprecate,
REGEXP_MATCH( commit,r'deprecate_with_doc(\s?[A-Za-z0-9_]+\s?[.,/)]') AS deprecate_with_doc,
REGEXP_MATCH( commit,r'diag(\s?[A-Za-z0-9_]+\s?[.,/)]') AS diag,
REGEXP_MATCH( commit,r'diag_indices(\s?[A-Za-z0-9_]+\s?[.,/)]') AS diag_indices,
REGEXP_MATCH( commit,r'diag_indices_from(\s?[A-Za-z0-9_]+\s?[.,/)]') AS diag_indices_from,
REGEXP_MATCH( commit,r'diagflat(\s?[A-Za-z0-9_]+\s?[.,/)]') AS diagflat,
REGEXP_MATCH( commit,r'diagonal(\s?[A-Za-z0-9_]+\s?[.,/)]') AS diagonal,
REGEXP_MATCH( commit,r'diff(\s?[A-Za-z0-9_]+\s?[.,/)]') AS diff,
REGEXP_MATCH( commit,r'digitize(\s?[A-Za-z0-9_]+\s?[.,/)]') AS digitize,
REGEXP_MATCH( commit,r'disp(\s?[A-Za-z0-9_]+\s?[.,/)]') AS disp,
REGEXP_MATCH( commit,r'divide(\s?[A-Za-z0-9_]+\s?[.,/)]') AS divide,
REGEXP_MATCH( commit,r'division(\s?[A-Za-z0-9_]+\s?[.,/)]') AS division,
REGEXP_MATCH( commit,r'divmod(\s?[A-Za-z0-9_]+\s?[.,/)]') AS divmod,
REGEXP_MATCH( commit,r'dot(\s?[A-Za-z0-9_]+\s?[.,/)]') AS dot,
REGEXP_MATCH( commit,r'double(\s?[A-Za-z0-9_]+\s?[.,/)]') AS double,
REGEXP_MATCH( commit,r'dsplit(\s?[A-Za-z0-9_]+\s?[.,/)]') AS dsplit,
REGEXP_MATCH( commit,r'dstack(\s?[A-Za-z0-9_]+\s?[.,/)]') AS dstack,
REGEXP_MATCH( commit,r'dtype(\s?[A-Za-z0-9_]+\s?[.,/)]') AS dtype,
REGEXP_MATCH( commit,r'e(\s?[A-Za-z0-9_]+\s?[.,/)]') AS e,
REGEXP_MATCH( commit,r'ediff1d(\s?[A-Za-z0-9_]+\s?[.,/)]') AS ediff1d,
REGEXP_MATCH( commit,r'einsum(\s?[A-Za-z0-9_]+\s?[.,/)]') AS einsum,
REGEXP_MATCH( commit,r'einsum_path(\s?[A-Za-z0-9_]+\s?[.,/)]') AS einsum_path,
REGEXP_MATCH( commit,r'emath(\s?[A-Za-z0-9_]+\s?[.,/)]') AS emath,
REGEXP_MATCH( commit,r'empty(\s?[A-Za-z0-9_]+\s?[.,/)]') AS empty,
REGEXP_MATCH( commit,r'empty_like(\s?[A-Za-z0-9_]+\s?[.,/)]') AS empty_like,
REGEXP_MATCH( commit,r'equal(\s?[A-Za-z0-9_]+\s?[.,/)]') AS equal,
REGEXP_MATCH( commit,r'errstate(\s?[A-Za-z0-9_]+\s?[.,/)]') AS errstate,
REGEXP_MATCH( commit,r'euler_gamma(\s?[A-Za-z0-9_]+\s?[.,/)]') AS euler_gamma,
REGEXP_MATCH( commit,r'exp(\s?[A-Za-z0-9_]+\s?[.,/)]') AS exp,
REGEXP_MATCH( commit,r'exp2(\s?[A-Za-z0-9_]+\s?[.,/)]') AS exp2,
REGEXP_MATCH( commit,r'expand_dims(\s?[A-Za-z0-9_]+\s?[.,/)]') AS expand_dims,
REGEXP_MATCH( commit,r'expm1(\s?[A-Za-z0-9_]+\s?[.,/)]') AS expm1,
REGEXP_MATCH( commit,r'extract(\s?[A-Za-z0-9_]+\s?[.,/)]') AS extract,
REGEXP_MATCH( commit,r'eye(\s?[A-Za-z0-9_]+\s?[.,/)]') AS eye,
REGEXP_MATCH( commit,r'fabs(\s?[A-Za-z0-9_]+\s?[.,/)]') AS fabs,
REGEXP_MATCH( commit,r'fastCopyAndTranspose(\s?[A-Za-z0-9_]+\s?[.,/)]') AS fastCopyAndTranspose,
REGEXP_MATCH( commit,r'fft(\s?[A-Za-z0-9_]+\s?[.,/)]') AS fft,
REGEXP_MATCH( commit,r'fill_diagonal(\s?[A-Za-z0-9_]+\s?[.,/)]') AS fill_diagonal,
REGEXP_MATCH( commit,r'find_common_type(\s?[A-Za-z0-9_]+\s?[.,/)]') AS find_common_type,
REGEXP_MATCH( commit,r'finfo(\s?[A-Za-z0-9_]+\s?[.,/)]') AS finfo,
REGEXP_MATCH( commit,r'fix(\s?[A-Za-z0-9_]+\s?[.,/)]') AS fix,
REGEXP_MATCH( commit,r'flatiter(\s?[A-Za-z0-9_]+\s?[.,/)]') AS flatiter,
REGEXP_MATCH( commit,r'flatnonzero(\s?[A-Za-z0-9_]+\s?[.,/)]') AS flatnonzero,
REGEXP_MATCH( commit,r'flexible(\s?[A-Za-z0-9_]+\s?[.,/)]') AS flexible,
REGEXP_MATCH( commit,r'flip(\s?[A-Za-z0-9_]+\s?[.,/)]') AS flip,
REGEXP_MATCH( commit,r'fliplr(\s?[A-Za-z0-9_]+\s?[.,/)]') AS fliplr,
REGEXP_MATCH( commit,r'flipud(\s?[A-Za-z0-9_]+\s?[.,/)]') AS flipud,
REGEXP_MATCH( commit,r'float(\s?[A-Za-z0-9_]+\s?[.,/)]') AS float,
REGEXP_MATCH( commit,r'float128(\s?[A-Za-z0-9_]+\s?[.,/)]') AS float128,
REGEXP_MATCH( commit,r'float16(\s?[A-Za-z0-9_]+\s?[.,/)]') AS float16,
REGEXP_MATCH( commit,r'float32(\s?[A-Za-z0-9_]+\s?[.,/)]') AS float32,
REGEXP_MATCH( commit,r'float64(\s?[A-Za-z0-9_]+\s?[.,/)]') AS float64,
REGEXP_MATCH( commit,r'float_(\s?[A-Za-z0-9_]+\s?[.,/)]') AS float_,
REGEXP_MATCH( commit,r'float_power(\s?[A-Za-z0-9_]+\s?[.,/)]') AS float_power,
REGEXP_MATCH( commit,r'floating(\s?[A-Za-z0-9_]+\s?[.,/)]') AS floating,
REGEXP_MATCH( commit,r'floor(\s?[A-Za-z0-9_]+\s?[.,/)]') AS floor,
REGEXP_MATCH( commit,r'floor_divide(\s?[A-Za-z0-9_]+\s?[.,/)]') AS floor_divide,
REGEXP_MATCH( commit,r'fmax(\s?[A-Za-z0-9_]+\s?[.,/)]') AS fmax,
REGEXP_MATCH( commit,r'fmin(\s?[A-Za-z0-9_]+\s?[.,/)]') AS fmin,
REGEXP_MATCH( commit,r'fmod(\s?[A-Za-z0-9_]+\s?[.,/)]') AS fmod,
REGEXP_MATCH( commit,r'format_float_positional(\s?[A-Za-z0-9_]+\s?[.,/)]') AS format_float_positional,
REGEXP_MATCH( commit,r'format_float_scientific(\s?[A-Za-z0-9_]+\s?[.,/)]') AS format_float_scientific,
REGEXP_MATCH( commit,r'format_parser(\s?[A-Za-z0-9_]+\s?[.,/)]') AS format_parser,
REGEXP_MATCH( commit,r'frexp(\s?[A-Za-z0-9_]+\s?[.,/)]') AS frexp,
REGEXP_MATCH( commit,r'frombuffer(\s?[A-Za-z0-9_]+\s?[.,/)]') AS frombuffer,
REGEXP_MATCH( commit,r'fromfile(\s?[A-Za-z0-9_]+\s?[.,/)]') AS fromfile,
REGEXP_MATCH( commit,r'fromfunction(\s?[A-Za-z0-9_]+\s?[.,/)]') AS fromfunction,
REGEXP_MATCH( commit,r'fromiter(\s?[A-Za-z0-9_]+\s?[.,/)]') AS fromiter,
REGEXP_MATCH( commit,r'frompyfunc(\s?[A-Za-z0-9_]+\s?[.,/)]') AS frompyfunc,
REGEXP_MATCH( commit,r'fromregex(\s?[A-Za-z0-9_]+\s?[.,/)]') AS fromregex,
REGEXP_MATCH( commit,r'fromstring(\s?[A-Za-z0-9_]+\s?[.,/)]') AS fromstring,
REGEXP_MATCH( commit,r'full(\s?[A-Za-z0-9_]+\s?[.,/)]') AS full,
REGEXP_MATCH( commit,r'full_like(\s?[A-Za-z0-9_]+\s?[.,/)]') AS full_like,
REGEXP_MATCH( commit,r'fv(\s?[A-Za-z0-9_]+\s?[.,/)]') AS fv,
REGEXP_MATCH( commit,r'generic(\s?[A-Za-z0-9_]+\s?[.,/)]') AS generic,
REGEXP_MATCH( commit,r'genfromtxt(\s?[A-Za-z0-9_]+\s?[.,/)]') AS genfromtxt,
REGEXP_MATCH( commit,r'geomspace(\s?[A-Za-z0-9_]+\s?[.,/)]') AS geomspace,
REGEXP_MATCH( commit,r'get_array_wrap(\s?[A-Za-z0-9_]+\s?[.,/)]') AS get_array_wrap,
REGEXP_MATCH( commit,r'get_include(\s?[A-Za-z0-9_]+\s?[.,/)]') AS get_include,
REGEXP_MATCH( commit,r'get_printoptions(\s?[A-Za-z0-9_]+\s?[.,/)]') AS get_printoptions,
REGEXP_MATCH( commit,r'getbufsize(\s?[A-Za-z0-9_]+\s?[.,/)]') AS getbufsize,
REGEXP_MATCH( commit,r'geterr(\s?[A-Za-z0-9_]+\s?[.,/)]') AS geterr,
REGEXP_MATCH( commit,r'geterrcall(\s?[A-Za-z0-9_]+\s?[.,/)]') AS geterrcall,
REGEXP_MATCH( commit,r'geterrobj(\s?[A-Za-z0-9_]+\s?[.,/)]') AS geterrobj,
REGEXP_MATCH( commit,r'gradient(\s?[A-Za-z0-9_]+\s?[.,/)]') AS gradient,
REGEXP_MATCH( commit,r'greater(\s?[A-Za-z0-9_]+\s?[.,/)]') AS greater,
REGEXP_MATCH( commit,r'greater_equal(\s?[A-Za-z0-9_]+\s?[.,/)]') AS greater_equal,
REGEXP_MATCH( commit,r'half(\s?[A-Za-z0-9_]+\s?[.,/)]') AS half,
REGEXP_MATCH( commit,r'hamming(\s?[A-Za-z0-9_]+\s?[.,/)]') AS hamming,
REGEXP_MATCH( commit,r'hanning(\s?[A-Za-z0-9_]+\s?[.,/)]') AS hanning,
REGEXP_MATCH( commit,r'heaviside(\s?[A-Za-z0-9_]+\s?[.,/)]') AS heaviside,
REGEXP_MATCH( commit,r'histogram(\s?[A-Za-z0-9_]+\s?[.,/)]') AS histogram,
REGEXP_MATCH( commit,r'histogram2d(\s?[A-Za-z0-9_]+\s?[.,/)]') AS histogram2d,
REGEXP_MATCH( commit,r'histogramdd(\s?[A-Za-z0-9_]+\s?[.,/)]') AS histogramdd,
REGEXP_MATCH( commit,r'hsplit(\s?[A-Za-z0-9_]+\s?[.,/)]') AS hsplit,
REGEXP_MATCH( commit,r'hstack(\s?[A-Za-z0-9_]+\s?[.,/)]') AS hstack,
REGEXP_MATCH( commit,r'hypot(\s?[A-Za-z0-9_]+\s?[.,/)]') AS hypot,
REGEXP_MATCH( commit,r'i0(\s?[A-Za-z0-9_]+\s?[.,/)]') AS i0,
REGEXP_MATCH( commit,r'identity(\s?[A-Za-z0-9_]+\s?[.,/)]') AS identity,
REGEXP_MATCH( commit,r'iinfo(\s?[A-Za-z0-9_]+\s?[.,/)]') AS iinfo,
REGEXP_MATCH( commit,r'imag(\s?[A-Za-z0-9_]+\s?[.,/)]') AS imag,
REGEXP_MATCH( commit,r'in1d(\s?[A-Za-z0-9_]+\s?[.,/)]') AS in1d,
REGEXP_MATCH( commit,r'index_exp(\s?[A-Za-z0-9_]+\s?[.,/)]') AS index_exp,
REGEXP_MATCH( commit,r'indices(\s?[A-Za-z0-9_]+\s?[.,/)]') AS indices,
REGEXP_MATCH( commit,r'inexact(\s?[A-Za-z0-9_]+\s?[.,/)]') AS inexact,
REGEXP_MATCH( commit,r'inf(\s?[A-Za-z0-9_]+\s?[.,/)]') AS inf,
REGEXP_MATCH( commit,r'info(\s?[A-Za-z0-9_]+\s?[.,/)]') AS info,
REGEXP_MATCH( commit,r'infty(\s?[A-Za-z0-9_]+\s?[.,/)]') AS infty,
REGEXP_MATCH( commit,r'inner(\s?[A-Za-z0-9_]+\s?[.,/)]') AS inner,
REGEXP_MATCH( commit,r'insert(\s?[A-Za-z0-9_]+\s?[.,/)]') AS insert,
REGEXP_MATCH( commit,r'int(\s?[A-Za-z0-9_]+\s?[.,/)]') AS int,
REGEXP_MATCH( commit,r'int0(\s?[A-Za-z0-9_]+\s?[.,/)]') AS int0,
REGEXP_MATCH( commit,r'int16(\s?[A-Za-z0-9_]+\s?[.,/)]') AS int16,
REGEXP_MATCH( commit,r'int32(\s?[A-Za-z0-9_]+\s?[.,/)]') AS int32,
REGEXP_MATCH( commit,r'int64(\s?[A-Za-z0-9_]+\s?[.,/)]') AS int64,
REGEXP_MATCH( commit,r'int8(\s?[A-Za-z0-9_]+\s?[.,/)]') AS int8,
REGEXP_MATCH( commit,r'int_(\s?[A-Za-z0-9_]+\s?[.,/)]') AS int_,
REGEXP_MATCH( commit,r'int_asbuffer(\s?[A-Za-z0-9_]+\s?[.,/)]') AS int_asbuffer,
REGEXP_MATCH( commit,r'intc(\s?[A-Za-z0-9_]+\s?[.,/)]') AS intc,
REGEXP_MATCH( commit,r'integer(\s?[A-Za-z0-9_]+\s?[.,/)]') AS integer,
REGEXP_MATCH( commit,r'interp(\s?[A-Za-z0-9_]+\s?[.,/)]') AS interp,
REGEXP_MATCH( commit,r'intersect1d(\s?[A-Za-z0-9_]+\s?[.,/)]') AS intersect1d,
REGEXP_MATCH( commit,r'intp(\s?[A-Za-z0-9_]+\s?[.,/)]') AS intp,
REGEXP_MATCH( commit,r'invert(\s?[A-Za-z0-9_]+\s?[.,/)]') AS invert,
REGEXP_MATCH( commit,r'ipmt(\s?[A-Za-z0-9_]+\s?[.,/)]') AS ipmt,
REGEXP_MATCH( commit,r'irr(\s?[A-Za-z0-9_]+\s?[.,/)]') AS irr,
REGEXP_MATCH( commit,r'is_busday(\s?[A-Za-z0-9_]+\s?[.,/)]') AS is_busday,
REGEXP_MATCH( commit,r'isclose(\s?[A-Za-z0-9_]+\s?[.,/)]') AS isclose,
REGEXP_MATCH( commit,r'iscomplex(\s?[A-Za-z0-9_]+\s?[.,/)]') AS iscomplex,
REGEXP_MATCH( commit,r'iscomplexobj(\s?[A-Za-z0-9_]+\s?[.,/)]') AS iscomplexobj,
REGEXP_MATCH( commit,r'isfinite(\s?[A-Za-z0-9_]+\s?[.,/)]') AS isfinite,
REGEXP_MATCH( commit,r'isfortran(\s?[A-Za-z0-9_]+\s?[.,/)]') AS isfortran,
REGEXP_MATCH( commit,r'isin(\s?[A-Za-z0-9_]+\s?[.,/)]') AS isin,
REGEXP_MATCH( commit,r'isinf(\s?[A-Za-z0-9_]+\s?[.,/)]') AS isinf,
REGEXP_MATCH( commit,r'isnan(\s?[A-Za-z0-9_]+\s?[.,/)]') AS isnan,
REGEXP_MATCH( commit,r'isnat(\s?[A-Za-z0-9_]+\s?[.,/)]') AS isnat,
REGEXP_MATCH( commit,r'isneginf(\s?[A-Za-z0-9_]+\s?[.,/)]') AS isneginf,
REGEXP_MATCH( commit,r'isposinf(\s?[A-Za-z0-9_]+\s?[.,/)]') AS isposinf,
REGEXP_MATCH( commit,r'isreal(\s?[A-Za-z0-9_]+\s?[.,/)]') AS isreal,
REGEXP_MATCH( commit,r'isrealobj(\s?[A-Za-z0-9_]+\s?[.,/)]') AS isrealobj,
REGEXP_MATCH( commit,r'isscalar(\s?[A-Za-z0-9_]+\s?[.,/)]') AS isscalar,
REGEXP_MATCH( commit,r'issctype(\s?[A-Za-z0-9_]+\s?[.,/)]') AS issctype,
REGEXP_MATCH( commit,r'issubclass_(\s?[A-Za-z0-9_]+\s?[.,/)]') AS issubclass_,
REGEXP_MATCH( commit,r'issubdtype(\s?[A-Za-z0-9_]+\s?[.,/)]') AS issubdtype,
REGEXP_MATCH( commit,r'issubsctype(\s?[A-Za-z0-9_]+\s?[.,/)]') AS issubsctype,
REGEXP_MATCH( commit,r'iterable(\s?[A-Za-z0-9_]+\s?[.,/)]') AS iterable,
REGEXP_MATCH( commit,r'ix_(\s?[A-Za-z0-9_]+\s?[.,/)]') AS ix_,
REGEXP_MATCH( commit,r'kaiser(\s?[A-Za-z0-9_]+\s?[.,/)]') AS kaiser,
REGEXP_MATCH( commit,r'kron(\s?[A-Za-z0-9_]+\s?[.,/)]') AS kron,
REGEXP_MATCH( commit,r'ldexp(\s?[A-Za-z0-9_]+\s?[.,/)]') AS ldexp,
REGEXP_MATCH( commit,r'left_shift(\s?[A-Za-z0-9_]+\s?[.,/)]') AS left_shift,
REGEXP_MATCH( commit,r'less(\s?[A-Za-z0-9_]+\s?[.,/)]') AS less,
REGEXP_MATCH( commit,r'less_equal(\s?[A-Za-z0-9_]+\s?[.,/)]') AS less_equal,
REGEXP_MATCH( commit,r'lexsort(\s?[A-Za-z0-9_]+\s?[.,/)]') AS lexsort,
REGEXP_MATCH( commit,r'lib(\s?[A-Za-z0-9_]+\s?[.,/)]') AS lib,
REGEXP_MATCH( commit,r'linalg(\s?[A-Za-z0-9_]+\s?[.,/)]') AS linalg,
REGEXP_MATCH( commit,r'linspace(\s?[A-Za-z0-9_]+\s?[.,/)]') AS linspace,
REGEXP_MATCH( commit,r'little_endian(\s?[A-Za-z0-9_]+\s?[.,/)]') AS little_endian,
REGEXP_MATCH( commit,r'load(\s?[A-Za-z0-9_]+\s?[.,/)]') AS load,
REGEXP_MATCH( commit,r'loads(\s?[A-Za-z0-9_]+\s?[.,/)]') AS loads,
REGEXP_MATCH( commit,r'loadtxt(\s?[A-Za-z0-9_]+\s?[.,/)]') AS loadtxt,
REGEXP_MATCH( commit,r'log(\s?[A-Za-z0-9_]+\s?[.,/)]') AS log,
REGEXP_MATCH( commit,r'log10(\s?[A-Za-z0-9_]+\s?[.,/)]') AS log10,
REGEXP_MATCH( commit,r'log1p(\s?[A-Za-z0-9_]+\s?[.,/)]') AS log1p,
REGEXP_MATCH( commit,r'log2(\s?[A-Za-z0-9_]+\s?[.,/)]') AS log2,
REGEXP_MATCH( commit,r'logaddexp(\s?[A-Za-z0-9_]+\s?[.,/)]') AS logaddexp,
REGEXP_MATCH( commit,r'logaddexp2(\s?[A-Za-z0-9_]+\s?[.,/)]') AS logaddexp2,
REGEXP_MATCH( commit,r'logical_and(\s?[A-Za-z0-9_]+\s?[.,/)]') AS logical_and,
REGEXP_MATCH( commit,r'logical_not(\s?[A-Za-z0-9_]+\s?[.,/)]') AS logical_not,
REGEXP_MATCH( commit,r'logical_or(\s?[A-Za-z0-9_]+\s?[.,/)]') AS logical_or,
REGEXP_MATCH( commit,r'logical_xor(\s?[A-Za-z0-9_]+\s?[.,/)]') AS logical_xor,
REGEXP_MATCH( commit,r'logspace(\s?[A-Za-z0-9_]+\s?[.,/)]') AS logspace,
REGEXP_MATCH( commit,r'long(\s?[A-Za-z0-9_]+\s?[.,/)]') AS long,
REGEXP_MATCH( commit,r'longcomplex(\s?[A-Za-z0-9_]+\s?[.,/)]') AS longcomplex,
REGEXP_MATCH( commit,r'longdouble(\s?[A-Za-z0-9_]+\s?[.,/)]') AS longdouble,
REGEXP_MATCH( commit,r'longfloat(\s?[A-Za-z0-9_]+\s?[.,/)]') AS longfloat,
REGEXP_MATCH( commit,r'longlong(\s?[A-Za-z0-9_]+\s?[.,/)]') AS longlong,
REGEXP_MATCH( commit,r'lookfor(\s?[A-Za-z0-9_]+\s?[.,/)]') AS lookfor,
REGEXP_MATCH( commit,r'ma(\s?[A-Za-z0-9_]+\s?[.,/)]') AS ma,
REGEXP_MATCH( commit,r'mafromtxt(\s?[A-Za-z0-9_]+\s?[.,/)]') AS mafromtxt,
REGEXP_MATCH( commit,r'mask_indices(\s?[A-Za-z0-9_]+\s?[.,/)]') AS mask_indices,
REGEXP_MATCH( commit,r'mat(\s?[A-Za-z0-9_]+\s?[.,/)]') AS mat,
REGEXP_MATCH( commit,r'math(\s?[A-Za-z0-9_]+\s?[.,/)]') AS math,
REGEXP_MATCH( commit,r'matmul(\s?[A-Za-z0-9_]+\s?[.,/)]') AS matmul,
REGEXP_MATCH( commit,r'matrix(\s?[A-Za-z0-9_]+\s?[.,/)]') AS matrix,
REGEXP_MATCH( commit,r'matrixlib(\s?[A-Za-z0-9_]+\s?[.,/)]') AS matrixlib,
REGEXP_MATCH( commit,r'max(\s?[A-Za-z0-9_]+\s?[.,/)]') AS max,
REGEXP_MATCH( commit,r'maximum(\s?[A-Za-z0-9_]+\s?[.,/)]') AS maximum,
REGEXP_MATCH( commit,r'maximum_sctype(\s?[A-Za-z0-9_]+\s?[.,/)]') AS maximum_sctype,
REGEXP_MATCH( commit,r'may_share_memory(\s?[A-Za-z0-9_]+\s?[.,/)]') AS may_share_memory,
REGEXP_MATCH( commit,r'mean(\s?[A-Za-z0-9_]+\s?[.,/)]') AS mean,
REGEXP_MATCH( commit,r'median(\s?[A-Za-z0-9_]+\s?[.,/)]') AS median,
REGEXP_MATCH( commit,r'memmap(\s?[A-Za-z0-9_]+\s?[.,/)]') AS memmap,
REGEXP_MATCH( commit,r'meshgrid(\s?[A-Za-z0-9_]+\s?[.,/)]') AS meshgrid,
REGEXP_MATCH( commit,r'mgrid(\s?[A-Za-z0-9_]+\s?[.,/)]') AS mgrid,
REGEXP_MATCH( commit,r'min(\s?[A-Za-z0-9_]+\s?[.,/)]') AS min,
REGEXP_MATCH( commit,r'min_scalar_type(\s?[A-Za-z0-9_]+\s?[.,/)]') AS min_scalar_type,
REGEXP_MATCH( commit,r'minimum(\s?[A-Za-z0-9_]+\s?[.,/)]') AS minimum,
REGEXP_MATCH( commit,r'mintypecode(\s?[A-Za-z0-9_]+\s?[.,/)]') AS mintypecode,
REGEXP_MATCH( commit,r'mirr(\s?[A-Za-z0-9_]+\s?[.,/)]') AS mirr,
REGEXP_MATCH( commit,r'mod(\s?[A-Za-z0-9_]+\s?[.,/)]') AS mod,
REGEXP_MATCH( commit,r'modf(\s?[A-Za-z0-9_]+\s?[.,/)]') AS modf,
REGEXP_MATCH( commit,r'moveaxis(\s?[A-Za-z0-9_]+\s?[.,/)]') AS moveaxis,
REGEXP_MATCH( commit,r'msort(\s?[A-Za-z0-9_]+\s?[.,/)]') AS msort,
REGEXP_MATCH( commit,r'multiply(\s?[A-Za-z0-9_]+\s?[.,/)]') AS multiply,
REGEXP_MATCH( commit,r'nan(\s?[A-Za-z0-9_]+\s?[.,/)]') AS nan,
REGEXP_MATCH( commit,r'nan_to_num(\s?[A-Za-z0-9_]+\s?[.,/)]') AS nan_to_num,
REGEXP_MATCH( commit,r'nanargmax(\s?[A-Za-z0-9_]+\s?[.,/)]') AS nanargmax,
REGEXP_MATCH( commit,r'nanargmin(\s?[A-Za-z0-9_]+\s?[.,/)]') AS nanargmin,
REGEXP_MATCH( commit,r'nancumprod(\s?[A-Za-z0-9_]+\s?[.,/)]') AS nancumprod,
REGEXP_MATCH( commit,r'nancumsum(\s?[A-Za-z0-9_]+\s?[.,/)]') AS nancumsum,
REGEXP_MATCH( commit,r'nanmax(\s?[A-Za-z0-9_]+\s?[.,/)]') AS nanmax,
REGEXP_MATCH( commit,r'nanmean(\s?[A-Za-z0-9_]+\s?[.,/)]') AS nanmean,
REGEXP_MATCH( commit,r'nanmedian(\s?[A-Za-z0-9_]+\s?[.,/)]') AS nanmedian,
REGEXP_MATCH( commit,r'nanmin(\s?[A-Za-z0-9_]+\s?[.,/)]') AS nanmin,
REGEXP_MATCH( commit,r'nanpercentile(\s?[A-Za-z0-9_]+\s?[.,/)]') AS nanpercentile,
REGEXP_MATCH( commit,r'nanprod(\s?[A-Za-z0-9_]+\s?[.,/)]') AS nanprod,
REGEXP_MATCH( commit,r'nanstd(\s?[A-Za-z0-9_]+\s?[.,/)]') AS nanstd,
REGEXP_MATCH( commit,r'nansum(\s?[A-Za-z0-9_]+\s?[.,/)]') AS nansum,
REGEXP_MATCH( commit,r'nanvar(\s?[A-Za-z0-9_]+\s?[.,/)]') AS nanvar,
REGEXP_MATCH( commit,r'nbytes(\s?[A-Za-z0-9_]+\s?[.,/)]') AS nbytes,
REGEXP_MATCH( commit,r'ndarray(\s?[A-Za-z0-9_]+\s?[.,/)]') AS ndarray,
REGEXP_MATCH( commit,r'ndenumerate(\s?[A-Za-z0-9_]+\s?[.,/)]') AS ndenumerate,
REGEXP_MATCH( commit,r'ndfromtxt(\s?[A-Za-z0-9_]+\s?[.,/)]') AS ndfromtxt,
REGEXP_MATCH( commit,r'ndim(\s?[A-Za-z0-9_]+\s?[.,/)]') AS ndim,
REGEXP_MATCH( commit,r'ndindex(\s?[A-Za-z0-9_]+\s?[.,/)]') AS ndindex,
REGEXP_MATCH( commit,r'nditer(\s?[A-Za-z0-9_]+\s?[.,/)]') AS nditer,
REGEXP_MATCH( commit,r'negative(\s?[A-Za-z0-9_]+\s?[.,/)]') AS negative,
REGEXP_MATCH( commit,r'nested_iters(\s?[A-Za-z0-9_]+\s?[.,/)]') AS nested_iters,
REGEXP_MATCH( commit,r'newaxis(\s?[A-Za-z0-9_]+\s?[.,/)]') AS newaxis,
REGEXP_MATCH( commit,r'nextafter(\s?[A-Za-z0-9_]+\s?[.,/)]') AS nextafter,
REGEXP_MATCH( commit,r'nonzero(\s?[A-Za-z0-9_]+\s?[.,/)]') AS nonzero,
REGEXP_MATCH( commit,r'not_equal(\s?[A-Za-z0-9_]+\s?[.,/)]') AS not_equal,
REGEXP_MATCH( commit,r'nper(\s?[A-Za-z0-9_]+\s?[.,/)]') AS nper,
REGEXP_MATCH( commit,r'npv(\s?[A-Za-z0-9_]+\s?[.,/)]') AS npv,
REGEXP_MATCH( commit,r'numarray(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numarray,
REGEXP_MATCH( commit,r'number(\s?[A-Za-z0-9_]+\s?[.,/)]') AS number,
REGEXP_MATCH( commit,r'obj2sctype(\s?[A-Za-z0-9_]+\s?[.,/)]') AS obj2sctype,
REGEXP_MATCH( commit,r'object(\s?[A-Za-z0-9_]+\s?[.,/)]') AS object,
REGEXP_MATCH( commit,r'object0(\s?[A-Za-z0-9_]+\s?[.,/)]') AS object0,
REGEXP_MATCH( commit,r'object_(\s?[A-Za-z0-9_]+\s?[.,/)]') AS object_,
REGEXP_MATCH( commit,r'ogrid(\s?[A-Za-z0-9_]+\s?[.,/)]') AS ogrid,
REGEXP_MATCH( commit,r'oldnumeric(\s?[A-Za-z0-9_]+\s?[.,/)]') AS oldnumeric,
REGEXP_MATCH( commit,r'ones(\s?[A-Za-z0-9_]+\s?[.,/)]') AS ones,
REGEXP_MATCH( commit,r'ones_like(\s?[A-Za-z0-9_]+\s?[.,/)]') AS ones_like,
REGEXP_MATCH( commit,r'outer(\s?[A-Za-z0-9_]+\s?[.,/)]') AS outer,
REGEXP_MATCH( commit,r'packbits(\s?[A-Za-z0-9_]+\s?[.,/)]') AS packbits,
REGEXP_MATCH( commit,r'pad(\s?[A-Za-z0-9_]+\s?[.,/)]') AS pad,
REGEXP_MATCH( commit,r'partition(\s?[A-Za-z0-9_]+\s?[.,/)]') AS partition,
REGEXP_MATCH( commit,r'percentile(\s?[A-Za-z0-9_]+\s?[.,/)]') AS percentile,
REGEXP_MATCH( commit,r'pi(\s?[A-Za-z0-9_]+\s?[.,/)]') AS pi,
REGEXP_MATCH( commit,r'piecewise(\s?[A-Za-z0-9_]+\s?[.,/)]') AS piecewise,
REGEXP_MATCH( commit,r'pkgload(\s?[A-Za-z0-9_]+\s?[.,/)]') AS pkgload,
REGEXP_MATCH( commit,r'place(\s?[A-Za-z0-9_]+\s?[.,/)]') AS place,
REGEXP_MATCH( commit,r'pmt(\s?[A-Za-z0-9_]+\s?[.,/)]') AS pmt,
REGEXP_MATCH( commit,r'poly(\s?[A-Za-z0-9_]+\s?[.,/)]') AS poly,
REGEXP_MATCH( commit,r'poly1d(\s?[A-Za-z0-9_]+\s?[.,/)]') AS poly1d,
REGEXP_MATCH( commit,r'polyadd(\s?[A-Za-z0-9_]+\s?[.,/)]') AS polyadd,
REGEXP_MATCH( commit,r'polyder(\s?[A-Za-z0-9_]+\s?[.,/)]') AS polyder,
REGEXP_MATCH( commit,r'polydiv(\s?[A-Za-z0-9_]+\s?[.,/)]') AS polydiv,
REGEXP_MATCH( commit,r'polyfit(\s?[A-Za-z0-9_]+\s?[.,/)]') AS polyfit,
REGEXP_MATCH( commit,r'polyint(\s?[A-Za-z0-9_]+\s?[.,/)]') AS polyint,
REGEXP_MATCH( commit,r'polymul(\s?[A-Za-z0-9_]+\s?[.,/)]') AS polymul,
REGEXP_MATCH( commit,r'polynomial(\s?[A-Za-z0-9_]+\s?[.,/)]') AS polynomial,
REGEXP_MATCH( commit,r'polysub(\s?[A-Za-z0-9_]+\s?[.,/)]') AS polysub,
REGEXP_MATCH( commit,r'polyval(\s?[A-Za-z0-9_]+\s?[.,/)]') AS polyval,
REGEXP_MATCH( commit,r'positive(\s?[A-Za-z0-9_]+\s?[.,/)]') AS positive,
REGEXP_MATCH( commit,r'power(\s?[A-Za-z0-9_]+\s?[.,/)]') AS power,
REGEXP_MATCH( commit,r'ppmt(\s?[A-Za-z0-9_]+\s?[.,/)]') AS ppmt,
REGEXP_MATCH( commit,r'print_function(\s?[A-Za-z0-9_]+\s?[.,/)]') AS print_function,
REGEXP_MATCH( commit,r'prod(\s?[A-Za-z0-9_]+\s?[.,/)]') AS prod,
REGEXP_MATCH( commit,r'product(\s?[A-Za-z0-9_]+\s?[.,/)]') AS product,
REGEXP_MATCH( commit,r'promote_types(\s?[A-Za-z0-9_]+\s?[.,/)]') AS promote_types,
REGEXP_MATCH( commit,r'ptp(\s?[A-Za-z0-9_]+\s?[.,/)]') AS ptp,
REGEXP_MATCH( commit,r'put(\s?[A-Za-z0-9_]+\s?[.,/)]') AS put,
REGEXP_MATCH( commit,r'putmask(\s?[A-Za-z0-9_]+\s?[.,/)]') AS putmask,
REGEXP_MATCH( commit,r'pv(\s?[A-Za-z0-9_]+\s?[.,/)]') AS pv,
REGEXP_MATCH( commit,r'r_(\s?[A-Za-z0-9_]+\s?[.,/)]') AS r_,
REGEXP_MATCH( commit,r'rad2deg(\s?[A-Za-z0-9_]+\s?[.,/)]') AS rad2deg,
REGEXP_MATCH( commit,r'radians(\s?[A-Za-z0-9_]+\s?[.,/)]') AS radians,
REGEXP_MATCH( commit,r'random(\s?[A-Za-z0-9_]+\s?[.,/)]') AS random,
REGEXP_MATCH( commit,r'rank(\s?[A-Za-z0-9_]+\s?[.,/)]') AS rank,
REGEXP_MATCH( commit,r'rate(\s?[A-Za-z0-9_]+\s?[.,/)]') AS rate,
REGEXP_MATCH( commit,r'ravel(\s?[A-Za-z0-9_]+\s?[.,/)]') AS ravel,
REGEXP_MATCH( commit,r'ravel_multi_index(\s?[A-Za-z0-9_]+\s?[.,/)]') AS ravel_multi_index,
REGEXP_MATCH( commit,r'real(\s?[A-Za-z0-9_]+\s?[.,/)]') AS real,
REGEXP_MATCH( commit,r'real_if_close(\s?[A-Za-z0-9_]+\s?[.,/)]') AS real_if_close,
REGEXP_MATCH( commit,r'rec(\s?[A-Za-z0-9_]+\s?[.,/)]') AS rec,
REGEXP_MATCH( commit,r'recarray(\s?[A-Za-z0-9_]+\s?[.,/)]') AS recarray,
REGEXP_MATCH( commit,r'recfromcsv(\s?[A-Za-z0-9_]+\s?[.,/)]') AS recfromcsv,
REGEXP_MATCH( commit,r'recfromtxt(\s?[A-Za-z0-9_]+\s?[.,/)]') AS recfromtxt,
REGEXP_MATCH( commit,r'reciprocal(\s?[A-Za-z0-9_]+\s?[.,/)]') AS reciprocal,
REGEXP_MATCH( commit,r'record(\s?[A-Za-z0-9_]+\s?[.,/)]') AS record,
REGEXP_MATCH( commit,r'remainder(\s?[A-Za-z0-9_]+\s?[.,/)]') AS remainder,
REGEXP_MATCH( commit,r'repeat(\s?[A-Za-z0-9_]+\s?[.,/)]') AS repeat,
REGEXP_MATCH( commit,r'require(\s?[A-Za-z0-9_]+\s?[.,/)]') AS require,
REGEXP_MATCH( commit,r'reshape(\s?[A-Za-z0-9_]+\s?[.,/)]') AS reshape,
REGEXP_MATCH( commit,r'resize(\s?[A-Za-z0-9_]+\s?[.,/)]') AS resize,
REGEXP_MATCH( commit,r'result_type(\s?[A-Za-z0-9_]+\s?[.,/)]') AS result_type,
REGEXP_MATCH( commit,r'right_shift(\s?[A-Za-z0-9_]+\s?[.,/)]') AS right_shift,
REGEXP_MATCH( commit,r'rint(\s?[A-Za-z0-9_]+\s?[.,/)]') AS rint,
REGEXP_MATCH( commit,r'roll(\s?[A-Za-z0-9_]+\s?[.,/)]') AS roll,
REGEXP_MATCH( commit,r'rollaxis(\s?[A-Za-z0-9_]+\s?[.,/)]') AS rollaxis,
REGEXP_MATCH( commit,r'roots(\s?[A-Za-z0-9_]+\s?[.,/)]') AS roots,
REGEXP_MATCH( commit,r'rot90(\s?[A-Za-z0-9_]+\s?[.,/)]') AS rot90,
REGEXP_MATCH( commit,r'round(\s?[A-Za-z0-9_]+\s?[.,/)]') AS round,
REGEXP_MATCH( commit,r'round_(\s?[A-Za-z0-9_]+\s?[.,/)]') AS round_,
REGEXP_MATCH( commit,r'row_stack(\s?[A-Za-z0-9_]+\s?[.,/)]') AS row_stack,
REGEXP_MATCH( commit,r's_(\s?[A-Za-z0-9_]+\s?[.,/)]') AS s_,
REGEXP_MATCH( commit,r'safe_eval(\s?[A-Za-z0-9_]+\s?[.,/)]') AS safe_eval,
REGEXP_MATCH( commit,r'save(\s?[A-Za-z0-9_]+\s?[.,/)]') AS save,
REGEXP_MATCH( commit,r'savetxt(\s?[A-Za-z0-9_]+\s?[.,/)]') AS savetxt,
REGEXP_MATCH( commit,r'savez(\s?[A-Za-z0-9_]+\s?[.,/)]') AS savez,
REGEXP_MATCH( commit,r'savez_compressed(\s?[A-Za-z0-9_]+\s?[.,/)]') AS savez_compressed,
REGEXP_MATCH( commit,r'sctype2char(\s?[A-Za-z0-9_]+\s?[.,/)]') AS sctype2char,
REGEXP_MATCH( commit,r'sctypeDict(\s?[A-Za-z0-9_]+\s?[.,/)]') AS sctypeDict,
REGEXP_MATCH( commit,r'sctypeNA(\s?[A-Za-z0-9_]+\s?[.,/)]') AS sctypeNA,
REGEXP_MATCH( commit,r'sctypes(\s?[A-Za-z0-9_]+\s?[.,/)]') AS sctypes,
REGEXP_MATCH( commit,r'searchsorted(\s?[A-Za-z0-9_]+\s?[.,/)]') AS searchsorted,
REGEXP_MATCH( commit,r'select(\s?[A-Za-z0-9_]+\s?[.,/)]') AS select,
REGEXP_MATCH( commit,r'set_numeric_ops(\s?[A-Za-z0-9_]+\s?[.,/)]') AS set_numeric_ops,
REGEXP_MATCH( commit,r'set_printoptions(\s?[A-Za-z0-9_]+\s?[.,/)]') AS set_printoptions,
REGEXP_MATCH( commit,r'set_string_function(\s?[A-Za-z0-9_]+\s?[.,/)]') AS set_string_function,
REGEXP_MATCH( commit,r'setbufsize(\s?[A-Za-z0-9_]+\s?[.,/)]') AS setbufsize,
REGEXP_MATCH( commit,r'setdiff1d(\s?[A-Za-z0-9_]+\s?[.,/)]') AS setdiff1d,
REGEXP_MATCH( commit,r'seterr(\s?[A-Za-z0-9_]+\s?[.,/)]') AS seterr,
REGEXP_MATCH( commit,r'seterrcall(\s?[A-Za-z0-9_]+\s?[.,/)]') AS seterrcall,
REGEXP_MATCH( commit,r'seterrobj(\s?[A-Za-z0-9_]+\s?[.,/)]') AS seterrobj,
REGEXP_MATCH( commit,r'setxor1d(\s?[A-Za-z0-9_]+\s?[.,/)]') AS setxor1d,
REGEXP_MATCH( commit,r'shape(\s?[A-Za-z0-9_]+\s?[.,/)]') AS shape,
REGEXP_MATCH( commit,r'shares_memory(\s?[A-Za-z0-9_]+\s?[.,/)]') AS shares_memory,
REGEXP_MATCH( commit,r'short(\s?[A-Za-z0-9_]+\s?[.,/)]') AS short,
REGEXP_MATCH( commit,r'show_config(\s?[A-Za-z0-9_]+\s?[.,/)]') AS show_config,
REGEXP_MATCH( commit,r'sign(\s?[A-Za-z0-9_]+\s?[.,/)]') AS sign,
REGEXP_MATCH( commit,r'signbit(\s?[A-Za-z0-9_]+\s?[.,/)]') AS signbit,
REGEXP_MATCH( commit,r'signedinteger(\s?[A-Za-z0-9_]+\s?[.,/)]') AS signedinteger,
REGEXP_MATCH( commit,r'sin(\s?[A-Za-z0-9_]+\s?[.,/)]') AS sin,
REGEXP_MATCH( commit,r'sinc(\s?[A-Za-z0-9_]+\s?[.,/)]') AS sinc,
REGEXP_MATCH( commit,r'single(\s?[A-Za-z0-9_]+\s?[.,/)]') AS single,
REGEXP_MATCH( commit,r'singlecomplex(\s?[A-Za-z0-9_]+\s?[.,/)]') AS singlecomplex,
REGEXP_MATCH( commit,r'sinh(\s?[A-Za-z0-9_]+\s?[.,/)]') AS sinh,
REGEXP_MATCH( commit,r'size(\s?[A-Za-z0-9_]+\s?[.,/)]') AS size,
REGEXP_MATCH( commit,r'sometrue(\s?[A-Za-z0-9_]+\s?[.,/)]') AS sometrue,
REGEXP_MATCH( commit,r'sort(\s?[A-Za-z0-9_]+\s?[.,/)]') AS sort,
REGEXP_MATCH( commit,r'sort_complex(\s?[A-Za-z0-9_]+\s?[.,/)]') AS sort_complex,
REGEXP_MATCH( commit,r'source(\s?[A-Za-z0-9_]+\s?[.,/)]') AS source,
REGEXP_MATCH( commit,r'spacing(\s?[A-Za-z0-9_]+\s?[.,/)]') AS spacing,
REGEXP_MATCH( commit,r'split(\s?[A-Za-z0-9_]+\s?[.,/)]') AS split,
REGEXP_MATCH( commit,r'sqrt(\s?[A-Za-z0-9_]+\s?[.,/)]') AS sqrt,
REGEXP_MATCH( commit,r'square(\s?[A-Za-z0-9_]+\s?[.,/)]') AS square,
REGEXP_MATCH( commit,r'squeeze(\s?[A-Za-z0-9_]+\s?[.,/)]') AS squeeze,
REGEXP_MATCH( commit,r'stack(\s?[A-Za-z0-9_]+\s?[.,/)]') AS stack,
REGEXP_MATCH( commit,r'std(\s?[A-Za-z0-9_]+\s?[.,/)]') AS std,
REGEXP_MATCH( commit,r'str(\s?[A-Za-z0-9_]+\s?[.,/)]') AS str,
REGEXP_MATCH( commit,r'str0(\s?[A-Za-z0-9_]+\s?[.,/)]') AS str0,
REGEXP_MATCH( commit,r'str_(\s?[A-Za-z0-9_]+\s?[.,/)]') AS str_,
REGEXP_MATCH( commit,r'string_(\s?[A-Za-z0-9_]+\s?[.,/)]') AS string_,
REGEXP_MATCH( commit,r'subtract(\s?[A-Za-z0-9_]+\s?[.,/)]') AS subtract,
REGEXP_MATCH( commit,r'sum(\s?[A-Za-z0-9_]+\s?[.,/)]') AS sum,
REGEXP_MATCH( commit,r'swapaxes(\s?[A-Za-z0-9_]+\s?[.,/)]') AS swapaxes,
REGEXP_MATCH( commit,r'sys(\s?[A-Za-z0-9_]+\s?[.,/)]') AS sys,
REGEXP_MATCH( commit,r'take(\s?[A-Za-z0-9_]+\s?[.,/)]') AS take,
REGEXP_MATCH( commit,r'tan(\s?[A-Za-z0-9_]+\s?[.,/)]') AS tan,
REGEXP_MATCH( commit,r'tanh(\s?[A-Za-z0-9_]+\s?[.,/)]') AS tanh,
REGEXP_MATCH( commit,r'tensordot(\s?[A-Za-z0-9_]+\s?[.,/)]') AS tensordot,
REGEXP_MATCH( commit,r'test(\s?[A-Za-z0-9_]+\s?[.,/)]') AS test,
REGEXP_MATCH( commit,r'testing(\s?[A-Za-z0-9_]+\s?[.,/)]') AS testing,
REGEXP_MATCH( commit,r'tile(\s?[A-Za-z0-9_]+\s?[.,/)]') AS tile,
REGEXP_MATCH( commit,r'timedelta64(\s?[A-Za-z0-9_]+\s?[.,/)]') AS timedelta64,
REGEXP_MATCH( commit,r'trace(\s?[A-Za-z0-9_]+\s?[.,/)]') AS trace,
REGEXP_MATCH( commit,r'tracemalloc_domain(\s?[A-Za-z0-9_]+\s?[.,/)]') AS tracemalloc_domain,
REGEXP_MATCH( commit,r'transpose(\s?[A-Za-z0-9_]+\s?[.,/)]') AS transpose,
REGEXP_MATCH( commit,r'trapz(\s?[A-Za-z0-9_]+\s?[.,/)]') AS trapz,
REGEXP_MATCH( commit,r'tri(\s?[A-Za-z0-9_]+\s?[.,/)]') AS tri,
REGEXP_MATCH( commit,r'tril(\s?[A-Za-z0-9_]+\s?[.,/)]') AS tril,
REGEXP_MATCH( commit,r'tril_indices(\s?[A-Za-z0-9_]+\s?[.,/)]') AS tril_indices,
REGEXP_MATCH( commit,r'tril_indices_from(\s?[A-Za-z0-9_]+\s?[.,/)]') AS tril_indices_from,
REGEXP_MATCH( commit,r'trim_zeros(\s?[A-Za-z0-9_]+\s?[.,/)]') AS trim_zeros,
REGEXP_MATCH( commit,r'triu(\s?[A-Za-z0-9_]+\s?[.,/)]') AS triu,
REGEXP_MATCH( commit,r'triu_indices(\s?[A-Za-z0-9_]+\s?[.,/)]') AS triu_indices,
REGEXP_MATCH( commit,r'triu_indices_from(\s?[A-Za-z0-9_]+\s?[.,/)]') AS triu_indices_from,
REGEXP_MATCH( commit,r'true_divide(\s?[A-Za-z0-9_]+\s?[.,/)]') AS true_divide,
REGEXP_MATCH( commit,r'trunc(\s?[A-Za-z0-9_]+\s?[.,/)]') AS trunc,
REGEXP_MATCH( commit,r'typeDict(\s?[A-Za-z0-9_]+\s?[.,/)]') AS typeDict,
REGEXP_MATCH( commit,r'typeNA(\s?[A-Za-z0-9_]+\s?[.,/)]') AS typeNA,
REGEXP_MATCH( commit,r'typecodes(\s?[A-Za-z0-9_]+\s?[.,/)]') AS typecodes,
REGEXP_MATCH( commit,r'typename(\s?[A-Za-z0-9_]+\s?[.,/)]') AS typename,
REGEXP_MATCH( commit,r'ubyte(\s?[A-Za-z0-9_]+\s?[.,/)]') AS ubyte,
REGEXP_MATCH( commit,r'ufunc(\s?[A-Za-z0-9_]+\s?[.,/)]') AS ufunc,
REGEXP_MATCH( commit,r'uint(\s?[A-Za-z0-9_]+\s?[.,/)]') AS uint,
REGEXP_MATCH( commit,r'uint0(\s?[A-Za-z0-9_]+\s?[.,/)]') AS uint0,
REGEXP_MATCH( commit,r'uint16(\s?[A-Za-z0-9_]+\s?[.,/)]') AS uint16,
REGEXP_MATCH( commit,r'uint32(\s?[A-Za-z0-9_]+\s?[.,/)]') AS uint32,
REGEXP_MATCH( commit,r'uint64(\s?[A-Za-z0-9_]+\s?[.,/)]') AS uint64,
REGEXP_MATCH( commit,r'uint8(\s?[A-Za-z0-9_]+\s?[.,/)]') AS uint8,
REGEXP_MATCH( commit,r'uintc(\s?[A-Za-z0-9_]+\s?[.,/)]') AS uintc,
REGEXP_MATCH( commit,r'uintp(\s?[A-Za-z0-9_]+\s?[.,/)]') AS uintp,
REGEXP_MATCH( commit,r'ulonglong(\s?[A-Za-z0-9_]+\s?[.,/)]') AS ulonglong,
REGEXP_MATCH( commit,r'unicode(\s?[A-Za-z0-9_]+\s?[.,/)]') AS unicode,
REGEXP_MATCH( commit,r'unicode_(\s?[A-Za-z0-9_]+\s?[.,/)]') AS unicode_,
REGEXP_MATCH( commit,r'union1d(\s?[A-Za-z0-9_]+\s?[.,/)]') AS union1d,
REGEXP_MATCH( commit,r'unique(\s?[A-Za-z0-9_]+\s?[.,/)]') AS unique,
REGEXP_MATCH( commit,r'unpackbits(\s?[A-Za-z0-9_]+\s?[.,/)]') AS unpackbits,
REGEXP_MATCH( commit,r'unravel_index(\s?[A-Za-z0-9_]+\s?[.,/)]') AS unravel_index,
REGEXP_MATCH( commit,r'unsignedinteger(\s?[A-Za-z0-9_]+\s?[.,/)]') AS unsignedinteger,
REGEXP_MATCH( commit,r'unwrap(\s?[A-Za-z0-9_]+\s?[.,/)]') AS unwrap,
REGEXP_MATCH( commit,r'ushort(\s?[A-Za-z0-9_]+\s?[.,/)]') AS ushort,
REGEXP_MATCH( commit,r'vander(\s?[A-Za-z0-9_]+\s?[.,/)]') AS vander,
REGEXP_MATCH( commit,r'var(\s?[A-Za-z0-9_]+\s?[.,/)]') AS var,
REGEXP_MATCH( commit,r'vdot(\s?[A-Za-z0-9_]+\s?[.,/)]') AS vdot,
REGEXP_MATCH( commit,r'vectorize(\s?[A-Za-z0-9_]+\s?[.,/)]') AS vectorize,
REGEXP_MATCH( commit,r'version(\s?[A-Za-z0-9_]+\s?[.,/)]') AS version,
REGEXP_MATCH( commit,r'void(\s?[A-Za-z0-9_]+\s?[.,/)]') AS void,
REGEXP_MATCH( commit,r'void0(\s?[A-Za-z0-9_]+\s?[.,/)]') AS void0,
REGEXP_MATCH( commit,r'vsplit(\s?[A-Za-z0-9_]+\s?[.,/)]') AS vsplit,
REGEXP_MATCH( commit,r'vstack(\s?[A-Za-z0-9_]+\s?[.,/)]') AS vstack,
REGEXP_MATCH( commit,r'warnings(\s?[A-Za-z0-9_]+\s?[.,/)]') AS warnings,
REGEXP_MATCH( commit,r'where(\s?[A-Za-z0-9_]+\s?[.,/)]') AS where,
REGEXP_MATCH( commit,r'who(\s?[A-Za-z0-9_]+\s?[.,/)]') AS who,
REGEXP_MATCH( commit,r'zeros(\s?[A-Za-z0-9_]+\s?[.,/)]') AS zeros,
REGEXP_MATCH( commit,r'zeros_like(\s?[A-Za-z0-9_]+\s?[.,/)]') AS zeros_like
FROM (SELECT
*
FROM
[bigquery-public-data:github_repos.sample_contents] AS c
INNER JOIN
(SELECT
*
FROM
[bigquery-public-data:github_repos.sample_files] AS f
WHERE
(
f.path LIKE '%.py' 
OR
f.path LIKE '%.ipynb'
) ) AS p
ON
c.id = p.id))