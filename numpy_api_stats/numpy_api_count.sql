SELECT
count(CASE WHEN numpy_abs THEN 1 END) AS numpy_abs_count,
count(CASE WHEN numpy_absolute THEN 1 END) AS numpy_absolute_count,
count(CASE WHEN numpy_absolute_import THEN 1 END) AS numpy_absolute_import_count,
count(CASE WHEN numpy_add THEN 1 END) AS numpy_add_count,
count(CASE WHEN numpy_add_docstring THEN 1 END) AS numpy_add_docstring_count,
count(CASE WHEN numpy_add_newdoc THEN 1 END) AS numpy_add_newdoc_count,
count(CASE WHEN numpy_add_newdoc_ufunc THEN 1 END) AS numpy_add_newdoc_ufunc_count,
count(CASE WHEN numpy_add_newdocs THEN 1 END) AS numpy_add_newdocs_count,
count(CASE WHEN numpy_alen THEN 1 END) AS numpy_alen_count,
count(CASE WHEN numpy_all THEN 1 END) AS numpy_all_count,
count(CASE WHEN numpy_allclose THEN 1 END) AS numpy_allclose_count,
count(CASE WHEN numpy_alltrue THEN 1 END) AS numpy_alltrue_count,
count(CASE WHEN numpy_amax THEN 1 END) AS numpy_amax_count,
count(CASE WHEN numpy_amin THEN 1 END) AS numpy_amin_count,
count(CASE WHEN numpy_angle THEN 1 END) AS numpy_angle_count,
count(CASE WHEN numpy_any THEN 1 END) AS numpy_any_count,
count(CASE WHEN numpy_append THEN 1 END) AS numpy_append_count,
count(CASE WHEN numpy_apply_along_axis THEN 1 END) AS numpy_apply_along_axis_count,
count(CASE WHEN numpy_apply_over_axes THEN 1 END) AS numpy_apply_over_axes_count,
count(CASE WHEN numpy_arange THEN 1 END) AS numpy_arange_count,
count(CASE WHEN numpy_arccos THEN 1 END) AS numpy_arccos_count,
count(CASE WHEN numpy_arccosh THEN 1 END) AS numpy_arccosh_count,
count(CASE WHEN numpy_arcsin THEN 1 END) AS numpy_arcsin_count,
count(CASE WHEN numpy_arcsinh THEN 1 END) AS numpy_arcsinh_count,
count(CASE WHEN numpy_arctan THEN 1 END) AS numpy_arctan_count,
count(CASE WHEN numpy_arctan2 THEN 1 END) AS numpy_arctan2_count,
count(CASE WHEN numpy_arctanh THEN 1 END) AS numpy_arctanh_count,
count(CASE WHEN numpy_argmax THEN 1 END) AS numpy_argmax_count,
count(CASE WHEN numpy_argmin THEN 1 END) AS numpy_argmin_count,
count(CASE WHEN numpy_argpartition THEN 1 END) AS numpy_argpartition_count,
count(CASE WHEN numpy_argsort THEN 1 END) AS numpy_argsort_count,
count(CASE WHEN numpy_argwhere THEN 1 END) AS numpy_argwhere_count,
count(CASE WHEN numpy_around THEN 1 END) AS numpy_around_count,
count(CASE WHEN numpy_array THEN 1 END) AS numpy_array_count,
count(CASE WHEN numpy_array2string THEN 1 END) AS numpy_array2string_count,
count(CASE WHEN numpy_array_equal THEN 1 END) AS numpy_array_equal_count,
count(CASE WHEN numpy_array_equiv THEN 1 END) AS numpy_array_equiv_count,
count(CASE WHEN numpy_array_repr THEN 1 END) AS numpy_array_repr_count,
count(CASE WHEN numpy_array_split THEN 1 END) AS numpy_array_split_count,
count(CASE WHEN numpy_array_str THEN 1 END) AS numpy_array_str_count,
count(CASE WHEN numpy_asanyarray THEN 1 END) AS numpy_asanyarray_count,
count(CASE WHEN numpy_asarray THEN 1 END) AS numpy_asarray_count,
count(CASE WHEN numpy_asarray_chkfinite THEN 1 END) AS numpy_asarray_chkfinite_count,
count(CASE WHEN numpy_ascontiguousarray THEN 1 END) AS numpy_ascontiguousarray_count,
count(CASE WHEN numpy_asfarray THEN 1 END) AS numpy_asfarray_count,
count(CASE WHEN numpy_asfortranarray THEN 1 END) AS numpy_asfortranarray_count,
count(CASE WHEN numpy_asmatrix THEN 1 END) AS numpy_asmatrix_count,
count(CASE WHEN numpy_asscalar THEN 1 END) AS numpy_asscalar_count,
count(CASE WHEN numpy_atleast_1d THEN 1 END) AS numpy_atleast_1d_count,
count(CASE WHEN numpy_atleast_2d THEN 1 END) AS numpy_atleast_2d_count,
count(CASE WHEN numpy_atleast_3d THEN 1 END) AS numpy_atleast_3d_count,
count(CASE WHEN numpy_average THEN 1 END) AS numpy_average_count,
count(CASE WHEN numpy_bartlett THEN 1 END) AS numpy_bartlett_count,
count(CASE WHEN numpy_base_repr THEN 1 END) AS numpy_base_repr_count,
count(CASE WHEN numpy_bench THEN 1 END) AS numpy_bench_count,
count(CASE WHEN numpy_binary_repr THEN 1 END) AS numpy_binary_repr_count,
count(CASE WHEN numpy_bincount THEN 1 END) AS numpy_bincount_count,
count(CASE WHEN numpy_bitwise_and THEN 1 END) AS numpy_bitwise_and_count,
count(CASE WHEN numpy_bitwise_not THEN 1 END) AS numpy_bitwise_not_count,
count(CASE WHEN numpy_bitwise_or THEN 1 END) AS numpy_bitwise_or_count,
count(CASE WHEN numpy_bitwise_xor THEN 1 END) AS numpy_bitwise_xor_count,
count(CASE WHEN numpy_blackman THEN 1 END) AS numpy_blackman_count,
count(CASE WHEN numpy_block THEN 1 END) AS numpy_block_count,
count(CASE WHEN numpy_bmat THEN 1 END) AS numpy_bmat_count,
count(CASE WHEN numpy_bool THEN 1 END) AS numpy_bool_count,
count(CASE WHEN numpy_bool8 THEN 1 END) AS numpy_bool8_count,
count(CASE WHEN numpy_bool_ THEN 1 END) AS numpy_bool__count,
count(CASE WHEN numpy_broadcast THEN 1 END) AS numpy_broadcast_count,
count(CASE WHEN numpy_broadcast_arrays THEN 1 END) AS numpy_broadcast_arrays_count,
count(CASE WHEN numpy_broadcast_to THEN 1 END) AS numpy_broadcast_to_count,
count(CASE WHEN numpy_busday_count THEN 1 END) AS numpy_busday_count_count,
count(CASE WHEN numpy_busday_offset THEN 1 END) AS numpy_busday_offset_count,
count(CASE WHEN numpy_busdaycalendar THEN 1 END) AS numpy_busdaycalendar_count,
count(CASE WHEN numpy_byte THEN 1 END) AS numpy_byte_count,
count(CASE WHEN numpy_byte_bounds THEN 1 END) AS numpy_byte_bounds_count,
count(CASE WHEN numpy_bytes0 THEN 1 END) AS numpy_bytes0_count,
count(CASE WHEN numpy_bytes_ THEN 1 END) AS numpy_bytes__count,
count(CASE WHEN numpy_c_ THEN 1 END) AS numpy_c__count,
count(CASE WHEN numpy_can_cast THEN 1 END) AS numpy_can_cast_count,
count(CASE WHEN numpy_cast THEN 1 END) AS numpy_cast_count,
count(CASE WHEN numpy_cbrt THEN 1 END) AS numpy_cbrt_count,
count(CASE WHEN numpy_cdouble THEN 1 END) AS numpy_cdouble_count,
count(CASE WHEN numpy_ceil THEN 1 END) AS numpy_ceil_count,
count(CASE WHEN numpy_cfloat THEN 1 END) AS numpy_cfloat_count,
count(CASE WHEN numpy_char THEN 1 END) AS numpy_char_count,
count(CASE WHEN numpy_character THEN 1 END) AS numpy_character_count,
count(CASE WHEN numpy_chararray THEN 1 END) AS numpy_chararray_count,
count(CASE WHEN numpy_choose THEN 1 END) AS numpy_choose_count,
count(CASE WHEN numpy_clip THEN 1 END) AS numpy_clip_count,
count(CASE WHEN numpy_clongdouble THEN 1 END) AS numpy_clongdouble_count,
count(CASE WHEN numpy_clongfloat THEN 1 END) AS numpy_clongfloat_count,
count(CASE WHEN numpy_column_stack THEN 1 END) AS numpy_column_stack_count,
count(CASE WHEN numpy_common_type THEN 1 END) AS numpy_common_type_count,
count(CASE WHEN numpy_compare_chararrays THEN 1 END) AS numpy_compare_chararrays_count,
count(CASE WHEN numpy_compat THEN 1 END) AS numpy_compat_count,
count(CASE WHEN numpy_complex THEN 1 END) AS numpy_complex_count,
count(CASE WHEN numpy_complex128 THEN 1 END) AS numpy_complex128_count,
count(CASE WHEN numpy_complex256 THEN 1 END) AS numpy_complex256_count,
count(CASE WHEN numpy_complex64 THEN 1 END) AS numpy_complex64_count,
count(CASE WHEN numpy_complex_ THEN 1 END) AS numpy_complex__count,
count(CASE WHEN numpy_complexfloating THEN 1 END) AS numpy_complexfloating_count,
count(CASE WHEN numpy_compress THEN 1 END) AS numpy_compress_count,
count(CASE WHEN numpy_concatenate THEN 1 END) AS numpy_concatenate_count,
count(CASE WHEN numpy_conj THEN 1 END) AS numpy_conj_count,
count(CASE WHEN numpy_conjugate THEN 1 END) AS numpy_conjugate_count,
count(CASE WHEN numpy_convolve THEN 1 END) AS numpy_convolve_count,
count(CASE WHEN numpy_copy THEN 1 END) AS numpy_copy_count,
count(CASE WHEN numpy_copysign THEN 1 END) AS numpy_copysign_count,
count(CASE WHEN numpy_copyto THEN 1 END) AS numpy_copyto_count,
count(CASE WHEN numpy_core THEN 1 END) AS numpy_core_count,
count(CASE WHEN numpy_corrcoef THEN 1 END) AS numpy_corrcoef_count,
count(CASE WHEN numpy_correlate THEN 1 END) AS numpy_correlate_count,
count(CASE WHEN numpy_cos THEN 1 END) AS numpy_cos_count,
count(CASE WHEN numpy_cosh THEN 1 END) AS numpy_cosh_count,
count(CASE WHEN numpy_count_nonzero THEN 1 END) AS numpy_count_nonzero_count,
count(CASE WHEN numpy_cov THEN 1 END) AS numpy_cov_count,
count(CASE WHEN numpy_cross THEN 1 END) AS numpy_cross_count,
count(CASE WHEN numpy_csingle THEN 1 END) AS numpy_csingle_count,
count(CASE WHEN numpy_ctypeslib THEN 1 END) AS numpy_ctypeslib_count,
count(CASE WHEN numpy_cumprod THEN 1 END) AS numpy_cumprod_count,
count(CASE WHEN numpy_cumproduct THEN 1 END) AS numpy_cumproduct_count,
count(CASE WHEN numpy_cumsum THEN 1 END) AS numpy_cumsum_count,
count(CASE WHEN numpy_datetime64 THEN 1 END) AS numpy_datetime64_count,
count(CASE WHEN numpy_datetime_as_string THEN 1 END) AS numpy_datetime_as_string_count,
count(CASE WHEN numpy_datetime_data THEN 1 END) AS numpy_datetime_data_count,
count(CASE WHEN numpy_deg2rad THEN 1 END) AS numpy_deg2rad_count,
count(CASE WHEN numpy_degrees THEN 1 END) AS numpy_degrees_count,
count(CASE WHEN numpy_delete THEN 1 END) AS numpy_delete_count,
count(CASE WHEN numpy_deprecate THEN 1 END) AS numpy_deprecate_count,
count(CASE WHEN numpy_deprecate_with_doc THEN 1 END) AS numpy_deprecate_with_doc_count,
count(CASE WHEN numpy_diag THEN 1 END) AS numpy_diag_count,
count(CASE WHEN numpy_diag_indices THEN 1 END) AS numpy_diag_indices_count,
count(CASE WHEN numpy_diag_indices_from THEN 1 END) AS numpy_diag_indices_from_count,
count(CASE WHEN numpy_diagflat THEN 1 END) AS numpy_diagflat_count,
count(CASE WHEN numpy_diagonal THEN 1 END) AS numpy_diagonal_count,
count(CASE WHEN numpy_diff THEN 1 END) AS numpy_diff_count,
count(CASE WHEN numpy_digitize THEN 1 END) AS numpy_digitize_count,
count(CASE WHEN numpy_disp THEN 1 END) AS numpy_disp_count,
count(CASE WHEN numpy_divide THEN 1 END) AS numpy_divide_count,
count(CASE WHEN numpy_division THEN 1 END) AS numpy_division_count,
count(CASE WHEN numpy_divmod THEN 1 END) AS numpy_divmod_count,
count(CASE WHEN numpy_dot THEN 1 END) AS numpy_dot_count,
count(CASE WHEN numpy_double THEN 1 END) AS numpy_double_count,
count(CASE WHEN numpy_dsplit THEN 1 END) AS numpy_dsplit_count,
count(CASE WHEN numpy_dstack THEN 1 END) AS numpy_dstack_count,
count(CASE WHEN numpy_dtype THEN 1 END) AS numpy_dtype_count,
count(CASE WHEN numpy_e THEN 1 END) AS numpy_e_count,
count(CASE WHEN numpy_ediff1d THEN 1 END) AS numpy_ediff1d_count,
count(CASE WHEN numpy_einsum THEN 1 END) AS numpy_einsum_count,
count(CASE WHEN numpy_einsum_path THEN 1 END) AS numpy_einsum_path_count,
count(CASE WHEN numpy_emath THEN 1 END) AS numpy_emath_count,
count(CASE WHEN numpy_empty THEN 1 END) AS numpy_empty_count,
count(CASE WHEN numpy_empty_like THEN 1 END) AS numpy_empty_like_count,
count(CASE WHEN numpy_equal THEN 1 END) AS numpy_equal_count,
count(CASE WHEN numpy_errstate THEN 1 END) AS numpy_errstate_count,
count(CASE WHEN numpy_euler_gamma THEN 1 END) AS numpy_euler_gamma_count,
count(CASE WHEN numpy_exp THEN 1 END) AS numpy_exp_count,
count(CASE WHEN numpy_exp2 THEN 1 END) AS numpy_exp2_count,
count(CASE WHEN numpy_expand_dims THEN 1 END) AS numpy_expand_dims_count,
count(CASE WHEN numpy_expm1 THEN 1 END) AS numpy_expm1_count,
count(CASE WHEN numpy_extract THEN 1 END) AS numpy_extract_count,
count(CASE WHEN numpy_eye THEN 1 END) AS numpy_eye_count,
count(CASE WHEN numpy_fabs THEN 1 END) AS numpy_fabs_count,
count(CASE WHEN numpy_fastCopyAndTranspose THEN 1 END) AS numpy_fastCopyAndTranspose_count,
count(CASE WHEN numpy_fft THEN 1 END) AS numpy_fft_count,
count(CASE WHEN numpy_fill_diagonal THEN 1 END) AS numpy_fill_diagonal_count,
count(CASE WHEN numpy_find_common_type THEN 1 END) AS numpy_find_common_type_count,
count(CASE WHEN numpy_finfo THEN 1 END) AS numpy_finfo_count,
count(CASE WHEN numpy_fix THEN 1 END) AS numpy_fix_count,
count(CASE WHEN numpy_flatiter THEN 1 END) AS numpy_flatiter_count,
count(CASE WHEN numpy_flatnonzero THEN 1 END) AS numpy_flatnonzero_count,
count(CASE WHEN numpy_flexible THEN 1 END) AS numpy_flexible_count,
count(CASE WHEN numpy_flip THEN 1 END) AS numpy_flip_count,
count(CASE WHEN numpy_fliplr THEN 1 END) AS numpy_fliplr_count,
count(CASE WHEN numpy_flipud THEN 1 END) AS numpy_flipud_count,
count(CASE WHEN numpy_float THEN 1 END) AS numpy_float_count,
count(CASE WHEN numpy_float128 THEN 1 END) AS numpy_float128_count,
count(CASE WHEN numpy_float16 THEN 1 END) AS numpy_float16_count,
count(CASE WHEN numpy_float32 THEN 1 END) AS numpy_float32_count,
count(CASE WHEN numpy_float64 THEN 1 END) AS numpy_float64_count,
count(CASE WHEN numpy_float_ THEN 1 END) AS numpy_float__count,
count(CASE WHEN numpy_float_power THEN 1 END) AS numpy_float_power_count,
count(CASE WHEN numpy_floating THEN 1 END) AS numpy_floating_count,
count(CASE WHEN numpy_floor THEN 1 END) AS numpy_floor_count,
count(CASE WHEN numpy_floor_divide THEN 1 END) AS numpy_floor_divide_count,
count(CASE WHEN numpy_fmax THEN 1 END) AS numpy_fmax_count,
count(CASE WHEN numpy_fmin THEN 1 END) AS numpy_fmin_count,
count(CASE WHEN numpy_fmod THEN 1 END) AS numpy_fmod_count,
count(CASE WHEN numpy_format_float_positional THEN 1 END) AS numpy_format_float_positional_count,
count(CASE WHEN numpy_format_float_scientific THEN 1 END) AS numpy_format_float_scientific_count,
count(CASE WHEN numpy_format_parser THEN 1 END) AS numpy_format_parser_count,
count(CASE WHEN numpy_frexp THEN 1 END) AS numpy_frexp_count,
count(CASE WHEN numpy_frombuffer THEN 1 END) AS numpy_frombuffer_count,
count(CASE WHEN numpy_fromfile THEN 1 END) AS numpy_fromfile_count,
count(CASE WHEN numpy_fromfunction THEN 1 END) AS numpy_fromfunction_count,
count(CASE WHEN numpy_fromiter THEN 1 END) AS numpy_fromiter_count,
count(CASE WHEN numpy_frompyfunc THEN 1 END) AS numpy_frompyfunc_count,
count(CASE WHEN numpy_fromregex THEN 1 END) AS numpy_fromregex_count,
count(CASE WHEN numpy_fromstring THEN 1 END) AS numpy_fromstring_count,
count(CASE WHEN numpy_full THEN 1 END) AS numpy_full_count,
count(CASE WHEN numpy_full_like THEN 1 END) AS numpy_full_like_count,
count(CASE WHEN numpy_fv THEN 1 END) AS numpy_fv_count,
count(CASE WHEN numpy_generic THEN 1 END) AS numpy_generic_count,
count(CASE WHEN numpy_genfromtxt THEN 1 END) AS numpy_genfromtxt_count,
count(CASE WHEN numpy_geomspace THEN 1 END) AS numpy_geomspace_count,
count(CASE WHEN numpy_get_array_wrap THEN 1 END) AS numpy_get_array_wrap_count,
count(CASE WHEN numpy_get_include THEN 1 END) AS numpy_get_include_count,
count(CASE WHEN numpy_get_printoptions THEN 1 END) AS numpy_get_printoptions_count,
count(CASE WHEN numpy_getbufsize THEN 1 END) AS numpy_getbufsize_count,
count(CASE WHEN numpy_geterr THEN 1 END) AS numpy_geterr_count,
count(CASE WHEN numpy_geterrcall THEN 1 END) AS numpy_geterrcall_count,
count(CASE WHEN numpy_geterrobj THEN 1 END) AS numpy_geterrobj_count,
count(CASE WHEN numpy_gradient THEN 1 END) AS numpy_gradient_count,
count(CASE WHEN numpy_greater THEN 1 END) AS numpy_greater_count,
count(CASE WHEN numpy_greater_equal THEN 1 END) AS numpy_greater_equal_count,
count(CASE WHEN numpy_half THEN 1 END) AS numpy_half_count,
count(CASE WHEN numpy_hamming THEN 1 END) AS numpy_hamming_count,
count(CASE WHEN numpy_hanning THEN 1 END) AS numpy_hanning_count,
count(CASE WHEN numpy_heaviside THEN 1 END) AS numpy_heaviside_count,
count(CASE WHEN numpy_histogram THEN 1 END) AS numpy_histogram_count,
count(CASE WHEN numpy_histogram2d THEN 1 END) AS numpy_histogram2d_count,
count(CASE WHEN numpy_histogramdd THEN 1 END) AS numpy_histogramdd_count,
count(CASE WHEN numpy_hsplit THEN 1 END) AS numpy_hsplit_count,
count(CASE WHEN numpy_hstack THEN 1 END) AS numpy_hstack_count,
count(CASE WHEN numpy_hypot THEN 1 END) AS numpy_hypot_count,
count(CASE WHEN numpy_i0 THEN 1 END) AS numpy_i0_count,
count(CASE WHEN numpy_identity THEN 1 END) AS numpy_identity_count,
count(CASE WHEN numpy_iinfo THEN 1 END) AS numpy_iinfo_count,
count(CASE WHEN numpy_imag THEN 1 END) AS numpy_imag_count,
count(CASE WHEN numpy_in1d THEN 1 END) AS numpy_in1d_count,
count(CASE WHEN numpy_index_exp THEN 1 END) AS numpy_index_exp_count,
count(CASE WHEN numpy_indices THEN 1 END) AS numpy_indices_count,
count(CASE WHEN numpy_inexact THEN 1 END) AS numpy_inexact_count,
count(CASE WHEN numpy_inf THEN 1 END) AS numpy_inf_count,
count(CASE WHEN numpy_info THEN 1 END) AS numpy_info_count,
count(CASE WHEN numpy_infty THEN 1 END) AS numpy_infty_count,
count(CASE WHEN numpy_inner THEN 1 END) AS numpy_inner_count,
count(CASE WHEN numpy_insert THEN 1 END) AS numpy_insert_count,
count(CASE WHEN numpy_int THEN 1 END) AS numpy_int_count,
count(CASE WHEN numpy_int0 THEN 1 END) AS numpy_int0_count,
count(CASE WHEN numpy_int16 THEN 1 END) AS numpy_int16_count,
count(CASE WHEN numpy_int32 THEN 1 END) AS numpy_int32_count,
count(CASE WHEN numpy_int64 THEN 1 END) AS numpy_int64_count,
count(CASE WHEN numpy_int8 THEN 1 END) AS numpy_int8_count,
count(CASE WHEN numpy_int_ THEN 1 END) AS numpy_int__count,
count(CASE WHEN numpy_int_asbuffer THEN 1 END) AS numpy_int_asbuffer_count,
count(CASE WHEN numpy_intc THEN 1 END) AS numpy_intc_count,
count(CASE WHEN numpy_integer THEN 1 END) AS numpy_integer_count,
count(CASE WHEN numpy_interp THEN 1 END) AS numpy_interp_count,
count(CASE WHEN numpy_intersect1d THEN 1 END) AS numpy_intersect1d_count,
count(CASE WHEN numpy_intp THEN 1 END) AS numpy_intp_count,
count(CASE WHEN numpy_invert THEN 1 END) AS numpy_invert_count,
count(CASE WHEN numpy_ipmt THEN 1 END) AS numpy_ipmt_count,
count(CASE WHEN numpy_irr THEN 1 END) AS numpy_irr_count,
count(CASE WHEN numpy_is_busday THEN 1 END) AS numpy_is_busday_count,
count(CASE WHEN numpy_isclose THEN 1 END) AS numpy_isclose_count,
count(CASE WHEN numpy_iscomplex THEN 1 END) AS numpy_iscomplex_count,
count(CASE WHEN numpy_iscomplexobj THEN 1 END) AS numpy_iscomplexobj_count,
count(CASE WHEN numpy_isfinite THEN 1 END) AS numpy_isfinite_count,
count(CASE WHEN numpy_isfortran THEN 1 END) AS numpy_isfortran_count,
count(CASE WHEN numpy_isin THEN 1 END) AS numpy_isin_count,
count(CASE WHEN numpy_isinf THEN 1 END) AS numpy_isinf_count,
count(CASE WHEN numpy_isnan THEN 1 END) AS numpy_isnan_count,
count(CASE WHEN numpy_isnat THEN 1 END) AS numpy_isnat_count,
count(CASE WHEN numpy_isneginf THEN 1 END) AS numpy_isneginf_count,
count(CASE WHEN numpy_isposinf THEN 1 END) AS numpy_isposinf_count,
count(CASE WHEN numpy_isreal THEN 1 END) AS numpy_isreal_count,
count(CASE WHEN numpy_isrealobj THEN 1 END) AS numpy_isrealobj_count,
count(CASE WHEN numpy_isscalar THEN 1 END) AS numpy_isscalar_count,
count(CASE WHEN numpy_issctype THEN 1 END) AS numpy_issctype_count,
count(CASE WHEN numpy_issubclass_ THEN 1 END) AS numpy_issubclass__count,
count(CASE WHEN numpy_issubdtype THEN 1 END) AS numpy_issubdtype_count,
count(CASE WHEN numpy_issubsctype THEN 1 END) AS numpy_issubsctype_count,
count(CASE WHEN numpy_iterable THEN 1 END) AS numpy_iterable_count,
count(CASE WHEN numpy_ix_ THEN 1 END) AS numpy_ix__count,
count(CASE WHEN numpy_kaiser THEN 1 END) AS numpy_kaiser_count,
count(CASE WHEN numpy_kron THEN 1 END) AS numpy_kron_count,
count(CASE WHEN numpy_ldexp THEN 1 END) AS numpy_ldexp_count,
count(CASE WHEN numpy_left_shift THEN 1 END) AS numpy_left_shift_count,
count(CASE WHEN numpy_less THEN 1 END) AS numpy_less_count,
count(CASE WHEN numpy_less_equal THEN 1 END) AS numpy_less_equal_count,
count(CASE WHEN numpy_lexsort THEN 1 END) AS numpy_lexsort_count,
count(CASE WHEN numpy_lib THEN 1 END) AS numpy_lib_count,
count(CASE WHEN numpy_linalg THEN 1 END) AS numpy_linalg_count,
count(CASE WHEN numpy_linspace THEN 1 END) AS numpy_linspace_count,
count(CASE WHEN numpy_little_endian THEN 1 END) AS numpy_little_endian_count,
count(CASE WHEN numpy_load THEN 1 END) AS numpy_load_count,
count(CASE WHEN numpy_loads THEN 1 END) AS numpy_loads_count,
count(CASE WHEN numpy_loadtxt THEN 1 END) AS numpy_loadtxt_count,
count(CASE WHEN numpy_log THEN 1 END) AS numpy_log_count,
count(CASE WHEN numpy_log10 THEN 1 END) AS numpy_log10_count,
count(CASE WHEN numpy_log1p THEN 1 END) AS numpy_log1p_count,
count(CASE WHEN numpy_log2 THEN 1 END) AS numpy_log2_count,
count(CASE WHEN numpy_logaddexp THEN 1 END) AS numpy_logaddexp_count,
count(CASE WHEN numpy_logaddexp2 THEN 1 END) AS numpy_logaddexp2_count,
count(CASE WHEN numpy_logical_and THEN 1 END) AS numpy_logical_and_count,
count(CASE WHEN numpy_logical_not THEN 1 END) AS numpy_logical_not_count,
count(CASE WHEN numpy_logical_or THEN 1 END) AS numpy_logical_or_count,
count(CASE WHEN numpy_logical_xor THEN 1 END) AS numpy_logical_xor_count,
count(CASE WHEN numpy_logspace THEN 1 END) AS numpy_logspace_count,
count(CASE WHEN numpy_long THEN 1 END) AS numpy_long_count,
count(CASE WHEN numpy_longcomplex THEN 1 END) AS numpy_longcomplex_count,
count(CASE WHEN numpy_longdouble THEN 1 END) AS numpy_longdouble_count,
count(CASE WHEN numpy_longfloat THEN 1 END) AS numpy_longfloat_count,
count(CASE WHEN numpy_longlong THEN 1 END) AS numpy_longlong_count,
count(CASE WHEN numpy_lookfor THEN 1 END) AS numpy_lookfor_count,
count(CASE WHEN numpy_ma THEN 1 END) AS numpy_ma_count,
count(CASE WHEN numpy_mafromtxt THEN 1 END) AS numpy_mafromtxt_count,
count(CASE WHEN numpy_mask_indices THEN 1 END) AS numpy_mask_indices_count,
count(CASE WHEN numpy_mat THEN 1 END) AS numpy_mat_count,
count(CASE WHEN numpy_math THEN 1 END) AS numpy_math_count,
count(CASE WHEN numpy_matmul THEN 1 END) AS numpy_matmul_count,
count(CASE WHEN numpy_matrix THEN 1 END) AS numpy_matrix_count,
count(CASE WHEN numpy_matrixlib THEN 1 END) AS numpy_matrixlib_count,
count(CASE WHEN numpy_max THEN 1 END) AS numpy_max_count,
count(CASE WHEN numpy_maximum THEN 1 END) AS numpy_maximum_count,
count(CASE WHEN numpy_maximum_sctype THEN 1 END) AS numpy_maximum_sctype_count,
count(CASE WHEN numpy_may_share_memory THEN 1 END) AS numpy_may_share_memory_count,
count(CASE WHEN numpy_mean THEN 1 END) AS numpy_mean_count,
count(CASE WHEN numpy_median THEN 1 END) AS numpy_median_count,
count(CASE WHEN numpy_memmap THEN 1 END) AS numpy_memmap_count,
count(CASE WHEN numpy_meshgrid THEN 1 END) AS numpy_meshgrid_count,
count(CASE WHEN numpy_mgrid THEN 1 END) AS numpy_mgrid_count,
count(CASE WHEN numpy_min THEN 1 END) AS numpy_min_count,
count(CASE WHEN numpy_min_scalar_type THEN 1 END) AS numpy_min_scalar_type_count,
count(CASE WHEN numpy_minimum THEN 1 END) AS numpy_minimum_count,
count(CASE WHEN numpy_mintypecode THEN 1 END) AS numpy_mintypecode_count,
count(CASE WHEN numpy_mirr THEN 1 END) AS numpy_mirr_count,
count(CASE WHEN numpy_mod THEN 1 END) AS numpy_mod_count,
count(CASE WHEN numpy_modf THEN 1 END) AS numpy_modf_count,
count(CASE WHEN numpy_moveaxis THEN 1 END) AS numpy_moveaxis_count,
count(CASE WHEN numpy_msort THEN 1 END) AS numpy_msort_count,
count(CASE WHEN numpy_multiply THEN 1 END) AS numpy_multiply_count,
count(CASE WHEN numpy_nan THEN 1 END) AS numpy_nan_count,
count(CASE WHEN numpy_nan_to_num THEN 1 END) AS numpy_nan_to_num_count,
count(CASE WHEN numpy_nanargmax THEN 1 END) AS numpy_nanargmax_count,
count(CASE WHEN numpy_nanargmin THEN 1 END) AS numpy_nanargmin_count,
count(CASE WHEN numpy_nancumprod THEN 1 END) AS numpy_nancumprod_count,
count(CASE WHEN numpy_nancumsum THEN 1 END) AS numpy_nancumsum_count,
count(CASE WHEN numpy_nanmax THEN 1 END) AS numpy_nanmax_count,
count(CASE WHEN numpy_nanmean THEN 1 END) AS numpy_nanmean_count,
count(CASE WHEN numpy_nanmedian THEN 1 END) AS numpy_nanmedian_count,
count(CASE WHEN numpy_nanmin THEN 1 END) AS numpy_nanmin_count,
count(CASE WHEN numpy_nanpercentile THEN 1 END) AS numpy_nanpercentile_count,
count(CASE WHEN numpy_nanprod THEN 1 END) AS numpy_nanprod_count,
count(CASE WHEN numpy_nanstd THEN 1 END) AS numpy_nanstd_count,
count(CASE WHEN numpy_nansum THEN 1 END) AS numpy_nansum_count,
count(CASE WHEN numpy_nanvar THEN 1 END) AS numpy_nanvar_count,
count(CASE WHEN numpy_nbytes THEN 1 END) AS numpy_nbytes_count,
count(CASE WHEN numpy_ndarray THEN 1 END) AS numpy_ndarray_count,
count(CASE WHEN numpy_ndenumerate THEN 1 END) AS numpy_ndenumerate_count,
count(CASE WHEN numpy_ndfromtxt THEN 1 END) AS numpy_ndfromtxt_count,
count(CASE WHEN numpy_ndim THEN 1 END) AS numpy_ndim_count,
count(CASE WHEN numpy_ndindex THEN 1 END) AS numpy_ndindex_count,
count(CASE WHEN numpy_nditer THEN 1 END) AS numpy_nditer_count,
count(CASE WHEN numpy_negative THEN 1 END) AS numpy_negative_count,
count(CASE WHEN numpy_nested_iters THEN 1 END) AS numpy_nested_iters_count,
count(CASE WHEN numpy_newaxis THEN 1 END) AS numpy_newaxis_count,
count(CASE WHEN numpy_nextafter THEN 1 END) AS numpy_nextafter_count,
count(CASE WHEN numpy_nonzero THEN 1 END) AS numpy_nonzero_count,
count(CASE WHEN numpy_not_equal THEN 1 END) AS numpy_not_equal_count,
count(CASE WHEN numpy_nper THEN 1 END) AS numpy_nper_count,
count(CASE WHEN numpy_npv THEN 1 END) AS numpy_npv_count,
count(CASE WHEN numpy_numarray THEN 1 END) AS numpy_numarray_count,
count(CASE WHEN numpy_number THEN 1 END) AS numpy_number_count,
count(CASE WHEN numpy_obj2sctype THEN 1 END) AS numpy_obj2sctype_count,
count(CASE WHEN numpy_object THEN 1 END) AS numpy_object_count,
count(CASE WHEN numpy_object0 THEN 1 END) AS numpy_object0_count,
count(CASE WHEN numpy_object_ THEN 1 END) AS numpy_object__count,
count(CASE WHEN numpy_ogrid THEN 1 END) AS numpy_ogrid_count,
count(CASE WHEN numpy_oldnumeric THEN 1 END) AS numpy_oldnumeric_count,
count(CASE WHEN numpy_ones THEN 1 END) AS numpy_ones_count,
count(CASE WHEN numpy_ones_like THEN 1 END) AS numpy_ones_like_count,
count(CASE WHEN numpy_outer THEN 1 END) AS numpy_outer_count,
count(CASE WHEN numpy_packbits THEN 1 END) AS numpy_packbits_count,
count(CASE WHEN numpy_pad THEN 1 END) AS numpy_pad_count,
count(CASE WHEN numpy_partition THEN 1 END) AS numpy_partition_count,
count(CASE WHEN numpy_percentile THEN 1 END) AS numpy_percentile_count,
count(CASE WHEN numpy_pi THEN 1 END) AS numpy_pi_count,
count(CASE WHEN numpy_piecewise THEN 1 END) AS numpy_piecewise_count,
count(CASE WHEN numpy_pkgload THEN 1 END) AS numpy_pkgload_count,
count(CASE WHEN numpy_place THEN 1 END) AS numpy_place_count,
count(CASE WHEN numpy_pmt THEN 1 END) AS numpy_pmt_count,
count(CASE WHEN numpy_poly THEN 1 END) AS numpy_poly_count,
count(CASE WHEN numpy_poly1d THEN 1 END) AS numpy_poly1d_count,
count(CASE WHEN numpy_polyadd THEN 1 END) AS numpy_polyadd_count,
count(CASE WHEN numpy_polyder THEN 1 END) AS numpy_polyder_count,
count(CASE WHEN numpy_polydiv THEN 1 END) AS numpy_polydiv_count,
count(CASE WHEN numpy_polyfit THEN 1 END) AS numpy_polyfit_count,
count(CASE WHEN numpy_polyint THEN 1 END) AS numpy_polyint_count,
count(CASE WHEN numpy_polymul THEN 1 END) AS numpy_polymul_count,
count(CASE WHEN numpy_polynomial THEN 1 END) AS numpy_polynomial_count,
count(CASE WHEN numpy_polysub THEN 1 END) AS numpy_polysub_count,
count(CASE WHEN numpy_polyval THEN 1 END) AS numpy_polyval_count,
count(CASE WHEN numpy_positive THEN 1 END) AS numpy_positive_count,
count(CASE WHEN numpy_power THEN 1 END) AS numpy_power_count,
count(CASE WHEN numpy_ppmt THEN 1 END) AS numpy_ppmt_count,
count(CASE WHEN numpy_print_function THEN 1 END) AS numpy_print_function_count,
count(CASE WHEN numpy_prod THEN 1 END) AS numpy_prod_count,
count(CASE WHEN numpy_product THEN 1 END) AS numpy_product_count,
count(CASE WHEN numpy_promote_types THEN 1 END) AS numpy_promote_types_count,
count(CASE WHEN numpy_ptp THEN 1 END) AS numpy_ptp_count,
count(CASE WHEN numpy_put THEN 1 END) AS numpy_put_count,
count(CASE WHEN numpy_putmask THEN 1 END) AS numpy_putmask_count,
count(CASE WHEN numpy_pv THEN 1 END) AS numpy_pv_count,
count(CASE WHEN numpy_r_ THEN 1 END) AS numpy_r__count,
count(CASE WHEN numpy_rad2deg THEN 1 END) AS numpy_rad2deg_count,
count(CASE WHEN numpy_radians THEN 1 END) AS numpy_radians_count,
count(CASE WHEN numpy_random THEN 1 END) AS numpy_random_count,
count(CASE WHEN numpy_rank THEN 1 END) AS numpy_rank_count,
count(CASE WHEN numpy_rate THEN 1 END) AS numpy_rate_count,
count(CASE WHEN numpy_ravel THEN 1 END) AS numpy_ravel_count,
count(CASE WHEN numpy_ravel_multi_index THEN 1 END) AS numpy_ravel_multi_index_count,
count(CASE WHEN numpy_real THEN 1 END) AS numpy_real_count,
count(CASE WHEN numpy_real_if_close THEN 1 END) AS numpy_real_if_close_count,
count(CASE WHEN numpy_rec THEN 1 END) AS numpy_rec_count,
count(CASE WHEN numpy_recarray THEN 1 END) AS numpy_recarray_count,
count(CASE WHEN numpy_recfromcsv THEN 1 END) AS numpy_recfromcsv_count,
count(CASE WHEN numpy_recfromtxt THEN 1 END) AS numpy_recfromtxt_count,
count(CASE WHEN numpy_reciprocal THEN 1 END) AS numpy_reciprocal_count,
count(CASE WHEN numpy_record THEN 1 END) AS numpy_record_count,
count(CASE WHEN numpy_remainder THEN 1 END) AS numpy_remainder_count,
count(CASE WHEN numpy_repeat THEN 1 END) AS numpy_repeat_count,
count(CASE WHEN numpy_require THEN 1 END) AS numpy_require_count,
count(CASE WHEN numpy_reshape THEN 1 END) AS numpy_reshape_count,
count(CASE WHEN numpy_resize THEN 1 END) AS numpy_resize_count,
count(CASE WHEN numpy_result_type THEN 1 END) AS numpy_result_type_count,
count(CASE WHEN numpy_right_shift THEN 1 END) AS numpy_right_shift_count,
count(CASE WHEN numpy_rint THEN 1 END) AS numpy_rint_count,
count(CASE WHEN numpy_roll THEN 1 END) AS numpy_roll_count,
count(CASE WHEN numpy_rollaxis THEN 1 END) AS numpy_rollaxis_count,
count(CASE WHEN numpy_roots THEN 1 END) AS numpy_roots_count,
count(CASE WHEN numpy_rot90 THEN 1 END) AS numpy_rot90_count,
count(CASE WHEN numpy_round THEN 1 END) AS numpy_round_count,
count(CASE WHEN numpy_round_ THEN 1 END) AS numpy_round__count,
count(CASE WHEN numpy_row_stack THEN 1 END) AS numpy_row_stack_count,
count(CASE WHEN numpy_s_ THEN 1 END) AS numpy_s__count,
count(CASE WHEN numpy_safe_eval THEN 1 END) AS numpy_safe_eval_count,
count(CASE WHEN numpy_save THEN 1 END) AS numpy_save_count,
count(CASE WHEN numpy_savetxt THEN 1 END) AS numpy_savetxt_count,
count(CASE WHEN numpy_savez THEN 1 END) AS numpy_savez_count,
count(CASE WHEN numpy_savez_compressed THEN 1 END) AS numpy_savez_compressed_count,
count(CASE WHEN numpy_sctype2char THEN 1 END) AS numpy_sctype2char_count,
count(CASE WHEN numpy_sctypeDict THEN 1 END) AS numpy_sctypeDict_count,
count(CASE WHEN numpy_sctypeNA THEN 1 END) AS numpy_sctypeNA_count,
count(CASE WHEN numpy_sctypes THEN 1 END) AS numpy_sctypes_count,
count(CASE WHEN numpy_searchsorted THEN 1 END) AS numpy_searchsorted_count,
count(CASE WHEN numpy_select THEN 1 END) AS numpy_select_count,
count(CASE WHEN numpy_set_numeric_ops THEN 1 END) AS numpy_set_numeric_ops_count,
count(CASE WHEN numpy_set_printoptions THEN 1 END) AS numpy_set_printoptions_count,
count(CASE WHEN numpy_set_string_function THEN 1 END) AS numpy_set_string_function_count,
count(CASE WHEN numpy_setbufsize THEN 1 END) AS numpy_setbufsize_count,
count(CASE WHEN numpy_setdiff1d THEN 1 END) AS numpy_setdiff1d_count,
count(CASE WHEN numpy_seterr THEN 1 END) AS numpy_seterr_count,
count(CASE WHEN numpy_seterrcall THEN 1 END) AS numpy_seterrcall_count,
count(CASE WHEN numpy_seterrobj THEN 1 END) AS numpy_seterrobj_count,
count(CASE WHEN numpy_setxor1d THEN 1 END) AS numpy_setxor1d_count,
count(CASE WHEN numpy_shape THEN 1 END) AS numpy_shape_count,
count(CASE WHEN numpy_shares_memory THEN 1 END) AS numpy_shares_memory_count,
count(CASE WHEN numpy_short THEN 1 END) AS numpy_short_count,
count(CASE WHEN numpy_show_config THEN 1 END) AS numpy_show_config_count,
count(CASE WHEN numpy_sign THEN 1 END) AS numpy_sign_count,
count(CASE WHEN numpy_signbit THEN 1 END) AS numpy_signbit_count,
count(CASE WHEN numpy_signedinteger THEN 1 END) AS numpy_signedinteger_count,
count(CASE WHEN numpy_sin THEN 1 END) AS numpy_sin_count,
count(CASE WHEN numpy_sinc THEN 1 END) AS numpy_sinc_count,
count(CASE WHEN numpy_single THEN 1 END) AS numpy_single_count,
count(CASE WHEN numpy_singlecomplex THEN 1 END) AS numpy_singlecomplex_count,
count(CASE WHEN numpy_sinh THEN 1 END) AS numpy_sinh_count,
count(CASE WHEN numpy_size THEN 1 END) AS numpy_size_count,
count(CASE WHEN numpy_sometrue THEN 1 END) AS numpy_sometrue_count,
count(CASE WHEN numpy_sort THEN 1 END) AS numpy_sort_count,
count(CASE WHEN numpy_sort_complex THEN 1 END) AS numpy_sort_complex_count,
count(CASE WHEN numpy_source THEN 1 END) AS numpy_source_count,
count(CASE WHEN numpy_spacing THEN 1 END) AS numpy_spacing_count,
count(CASE WHEN numpy_split THEN 1 END) AS numpy_split_count,
count(CASE WHEN numpy_sqrt THEN 1 END) AS numpy_sqrt_count,
count(CASE WHEN numpy_square THEN 1 END) AS numpy_square_count,
count(CASE WHEN numpy_squeeze THEN 1 END) AS numpy_squeeze_count,
count(CASE WHEN numpy_stack THEN 1 END) AS numpy_stack_count,
count(CASE WHEN numpy_std THEN 1 END) AS numpy_std_count,
count(CASE WHEN numpy_str THEN 1 END) AS numpy_str_count,
count(CASE WHEN numpy_str0 THEN 1 END) AS numpy_str0_count,
count(CASE WHEN numpy_str_ THEN 1 END) AS numpy_str__count,
count(CASE WHEN numpy_string_ THEN 1 END) AS numpy_string__count,
count(CASE WHEN numpy_subtract THEN 1 END) AS numpy_subtract_count,
count(CASE WHEN numpy_sum THEN 1 END) AS numpy_sum_count,
count(CASE WHEN numpy_swapaxes THEN 1 END) AS numpy_swapaxes_count,
count(CASE WHEN numpy_sys THEN 1 END) AS numpy_sys_count,
count(CASE WHEN numpy_take THEN 1 END) AS numpy_take_count,
count(CASE WHEN numpy_tan THEN 1 END) AS numpy_tan_count,
count(CASE WHEN numpy_tanh THEN 1 END) AS numpy_tanh_count,
count(CASE WHEN numpy_tensordot THEN 1 END) AS numpy_tensordot_count,
count(CASE WHEN numpy_test THEN 1 END) AS numpy_test_count,
count(CASE WHEN numpy_testing THEN 1 END) AS numpy_testing_count,
count(CASE WHEN numpy_tile THEN 1 END) AS numpy_tile_count,
count(CASE WHEN numpy_timedelta64 THEN 1 END) AS numpy_timedelta64_count,
count(CASE WHEN numpy_trace THEN 1 END) AS numpy_trace_count,
count(CASE WHEN numpy_tracemalloc_domain THEN 1 END) AS numpy_tracemalloc_domain_count,
count(CASE WHEN numpy_transpose THEN 1 END) AS numpy_transpose_count,
count(CASE WHEN numpy_trapz THEN 1 END) AS numpy_trapz_count,
count(CASE WHEN numpy_tri THEN 1 END) AS numpy_tri_count,
count(CASE WHEN numpy_tril THEN 1 END) AS numpy_tril_count,
count(CASE WHEN numpy_tril_indices THEN 1 END) AS numpy_tril_indices_count,
count(CASE WHEN numpy_tril_indices_from THEN 1 END) AS numpy_tril_indices_from_count,
count(CASE WHEN numpy_trim_zeros THEN 1 END) AS numpy_trim_zeros_count,
count(CASE WHEN numpy_triu THEN 1 END) AS numpy_triu_count,
count(CASE WHEN numpy_triu_indices THEN 1 END) AS numpy_triu_indices_count,
count(CASE WHEN numpy_triu_indices_from THEN 1 END) AS numpy_triu_indices_from_count,
count(CASE WHEN numpy_true_divide THEN 1 END) AS numpy_true_divide_count,
count(CASE WHEN numpy_trunc THEN 1 END) AS numpy_trunc_count,
count(CASE WHEN numpy_typeDict THEN 1 END) AS numpy_typeDict_count,
count(CASE WHEN numpy_typeNA THEN 1 END) AS numpy_typeNA_count,
count(CASE WHEN numpy_typecodes THEN 1 END) AS numpy_typecodes_count,
count(CASE WHEN numpy_typename THEN 1 END) AS numpy_typename_count,
count(CASE WHEN numpy_ubyte THEN 1 END) AS numpy_ubyte_count,
count(CASE WHEN numpy_ufunc THEN 1 END) AS numpy_ufunc_count,
count(CASE WHEN numpy_uint THEN 1 END) AS numpy_uint_count,
count(CASE WHEN numpy_uint0 THEN 1 END) AS numpy_uint0_count,
count(CASE WHEN numpy_uint16 THEN 1 END) AS numpy_uint16_count,
count(CASE WHEN numpy_uint32 THEN 1 END) AS numpy_uint32_count,
count(CASE WHEN numpy_uint64 THEN 1 END) AS numpy_uint64_count,
count(CASE WHEN numpy_uint8 THEN 1 END) AS numpy_uint8_count,
count(CASE WHEN numpy_uintc THEN 1 END) AS numpy_uintc_count,
count(CASE WHEN numpy_uintp THEN 1 END) AS numpy_uintp_count,
count(CASE WHEN numpy_ulonglong THEN 1 END) AS numpy_ulonglong_count,
count(CASE WHEN numpy_unicode THEN 1 END) AS numpy_unicode_count,
count(CASE WHEN numpy_unicode_ THEN 1 END) AS numpy_unicode__count,
count(CASE WHEN numpy_union1d THEN 1 END) AS numpy_union1d_count,
count(CASE WHEN numpy_unique THEN 1 END) AS numpy_unique_count,
count(CASE WHEN numpy_unpackbits THEN 1 END) AS numpy_unpackbits_count,
count(CASE WHEN numpy_unravel_index THEN 1 END) AS numpy_unravel_index_count,
count(CASE WHEN numpy_unsignedinteger THEN 1 END) AS numpy_unsignedinteger_count,
count(CASE WHEN numpy_unwrap THEN 1 END) AS numpy_unwrap_count,
count(CASE WHEN numpy_ushort THEN 1 END) AS numpy_ushort_count,
count(CASE WHEN numpy_vander THEN 1 END) AS numpy_vander_count,
count(CASE WHEN numpy_var THEN 1 END) AS numpy_var_count,
count(CASE WHEN numpy_vdot THEN 1 END) AS numpy_vdot_count,
count(CASE WHEN numpy_vectorize THEN 1 END) AS numpy_vectorize_count,
count(CASE WHEN numpy_version THEN 1 END) AS numpy_version_count,
count(CASE WHEN numpy_void THEN 1 END) AS numpy_void_count,
count(CASE WHEN numpy_void0 THEN 1 END) AS numpy_void0_count,
count(CASE WHEN numpy_vsplit THEN 1 END) AS numpy_vsplit_count,
count(CASE WHEN numpy_vstack THEN 1 END) AS numpy_vstack_count,
count(CASE WHEN numpy_warnings THEN 1 END) AS numpy_warnings_count,
count(CASE WHEN numpy_where THEN 1 END) AS numpy_where_count,
count(CASE WHEN numpy_who THEN 1 END) AS numpy_who_count,
count(CASE WHEN numpy_zeros THEN 1 END) AS numpy_zeros_count,
count(CASE WHEN numpy_zeros_like THEN 1 END) AS numpy_zeros_like_count
FROM (SELECT
REGEXP_MATCH( c.content,r'numpy_abs\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_abs,
REGEXP_MATCH( c.content,r'numpy_absolute\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_absolute,
REGEXP_MATCH( c.content,r'numpy_absolute_import\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_absolute_import,
REGEXP_MATCH( c.content,r'numpy_add\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_add,
REGEXP_MATCH( c.content,r'numpy_add_docstring\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_add_docstring,
REGEXP_MATCH( c.content,r'numpy_add_newdoc\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_add_newdoc,
REGEXP_MATCH( c.content,r'numpy_add_newdoc_ufunc\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_add_newdoc_ufunc,
REGEXP_MATCH( c.content,r'numpy_add_newdocs\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_add_newdocs,
REGEXP_MATCH( c.content,r'numpy_alen\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_alen,
REGEXP_MATCH( c.content,r'numpy_all\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_all,
REGEXP_MATCH( c.content,r'numpy_allclose\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_allclose,
REGEXP_MATCH( c.content,r'numpy_alltrue\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_alltrue,
REGEXP_MATCH( c.content,r'numpy_amax\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_amax,
REGEXP_MATCH( c.content,r'numpy_amin\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_amin,
REGEXP_MATCH( c.content,r'numpy_angle\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_angle,
REGEXP_MATCH( c.content,r'numpy_any\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_any,
REGEXP_MATCH( c.content,r'numpy_append\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_append,
REGEXP_MATCH( c.content,r'numpy_apply_along_axis\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_apply_along_axis,
REGEXP_MATCH( c.content,r'numpy_apply_over_axes\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_apply_over_axes,
REGEXP_MATCH( c.content,r'numpy_arange\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_arange,
REGEXP_MATCH( c.content,r'numpy_arccos\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_arccos,
REGEXP_MATCH( c.content,r'numpy_arccosh\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_arccosh,
REGEXP_MATCH( c.content,r'numpy_arcsin\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_arcsin,
REGEXP_MATCH( c.content,r'numpy_arcsinh\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_arcsinh,
REGEXP_MATCH( c.content,r'numpy_arctan\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_arctan,
REGEXP_MATCH( c.content,r'numpy_arctan2\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_arctan2,
REGEXP_MATCH( c.content,r'numpy_arctanh\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_arctanh,
REGEXP_MATCH( c.content,r'numpy_argmax\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_argmax,
REGEXP_MATCH( c.content,r'numpy_argmin\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_argmin,
REGEXP_MATCH( c.content,r'numpy_argpartition\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_argpartition,
REGEXP_MATCH( c.content,r'numpy_argsort\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_argsort,
REGEXP_MATCH( c.content,r'numpy_argwhere\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_argwhere,
REGEXP_MATCH( c.content,r'numpy_around\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_around,
REGEXP_MATCH( c.content,r'numpy_array\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_array,
REGEXP_MATCH( c.content,r'numpy_array2string\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_array2string,
REGEXP_MATCH( c.content,r'numpy_array_equal\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_array_equal,
REGEXP_MATCH( c.content,r'numpy_array_equiv\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_array_equiv,
REGEXP_MATCH( c.content,r'numpy_array_repr\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_array_repr,
REGEXP_MATCH( c.content,r'numpy_array_split\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_array_split,
REGEXP_MATCH( c.content,r'numpy_array_str\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_array_str,
REGEXP_MATCH( c.content,r'numpy_asanyarray\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_asanyarray,
REGEXP_MATCH( c.content,r'numpy_asarray\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_asarray,
REGEXP_MATCH( c.content,r'numpy_asarray_chkfinite\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_asarray_chkfinite,
REGEXP_MATCH( c.content,r'numpy_ascontiguousarray\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_ascontiguousarray,
REGEXP_MATCH( c.content,r'numpy_asfarray\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_asfarray,
REGEXP_MATCH( c.content,r'numpy_asfortranarray\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_asfortranarray,
REGEXP_MATCH( c.content,r'numpy_asmatrix\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_asmatrix,
REGEXP_MATCH( c.content,r'numpy_asscalar\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_asscalar,
REGEXP_MATCH( c.content,r'numpy_atleast_1d\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_atleast_1d,
REGEXP_MATCH( c.content,r'numpy_atleast_2d\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_atleast_2d,
REGEXP_MATCH( c.content,r'numpy_atleast_3d\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_atleast_3d,
REGEXP_MATCH( c.content,r'numpy_average\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_average,
REGEXP_MATCH( c.content,r'numpy_bartlett\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_bartlett,
REGEXP_MATCH( c.content,r'numpy_base_repr\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_base_repr,
REGEXP_MATCH( c.content,r'numpy_bench\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_bench,
REGEXP_MATCH( c.content,r'numpy_binary_repr\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_binary_repr,
REGEXP_MATCH( c.content,r'numpy_bincount\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_bincount,
REGEXP_MATCH( c.content,r'numpy_bitwise_and\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_bitwise_and,
REGEXP_MATCH( c.content,r'numpy_bitwise_not\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_bitwise_not,
REGEXP_MATCH( c.content,r'numpy_bitwise_or\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_bitwise_or,
REGEXP_MATCH( c.content,r'numpy_bitwise_xor\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_bitwise_xor,
REGEXP_MATCH( c.content,r'numpy_blackman\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_blackman,
REGEXP_MATCH( c.content,r'numpy_block\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_block,
REGEXP_MATCH( c.content,r'numpy_bmat\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_bmat,
REGEXP_MATCH( c.content,r'numpy_bool\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_bool,
REGEXP_MATCH( c.content,r'numpy_bool8\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_bool8,
REGEXP_MATCH( c.content,r'numpy_bool_\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_bool_,
REGEXP_MATCH( c.content,r'numpy_broadcast\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_broadcast,
REGEXP_MATCH( c.content,r'numpy_broadcast_arrays\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_broadcast_arrays,
REGEXP_MATCH( c.content,r'numpy_broadcast_to\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_broadcast_to,
REGEXP_MATCH( c.content,r'numpy_busday_count\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_busday_count,
REGEXP_MATCH( c.content,r'numpy_busday_offset\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_busday_offset,
REGEXP_MATCH( c.content,r'numpy_busdaycalendar\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_busdaycalendar,
REGEXP_MATCH( c.content,r'numpy_byte\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_byte,
REGEXP_MATCH( c.content,r'numpy_byte_bounds\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_byte_bounds,
REGEXP_MATCH( c.content,r'numpy_bytes0\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_bytes0,
REGEXP_MATCH( c.content,r'numpy_bytes_\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_bytes_,
REGEXP_MATCH( c.content,r'numpy_c_\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_c_,
REGEXP_MATCH( c.content,r'numpy_can_cast\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_can_cast,
REGEXP_MATCH( c.content,r'numpy_cast\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_cast,
REGEXP_MATCH( c.content,r'numpy_cbrt\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_cbrt,
REGEXP_MATCH( c.content,r'numpy_cdouble\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_cdouble,
REGEXP_MATCH( c.content,r'numpy_ceil\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_ceil,
REGEXP_MATCH( c.content,r'numpy_cfloat\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_cfloat,
REGEXP_MATCH( c.content,r'numpy_char\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_char,
REGEXP_MATCH( c.content,r'numpy_character\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_character,
REGEXP_MATCH( c.content,r'numpy_chararray\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_chararray,
REGEXP_MATCH( c.content,r'numpy_choose\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_choose,
REGEXP_MATCH( c.content,r'numpy_clip\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_clip,
REGEXP_MATCH( c.content,r'numpy_clongdouble\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_clongdouble,
REGEXP_MATCH( c.content,r'numpy_clongfloat\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_clongfloat,
REGEXP_MATCH( c.content,r'numpy_column_stack\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_column_stack,
REGEXP_MATCH( c.content,r'numpy_common_type\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_common_type,
REGEXP_MATCH( c.content,r'numpy_compare_chararrays\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_compare_chararrays,
REGEXP_MATCH( c.content,r'numpy_compat\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_compat,
REGEXP_MATCH( c.content,r'numpy_complex\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_complex,
REGEXP_MATCH( c.content,r'numpy_complex128\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_complex128,
REGEXP_MATCH( c.content,r'numpy_complex256\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_complex256,
REGEXP_MATCH( c.content,r'numpy_complex64\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_complex64,
REGEXP_MATCH( c.content,r'numpy_complex_\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_complex_,
REGEXP_MATCH( c.content,r'numpy_complexfloating\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_complexfloating,
REGEXP_MATCH( c.content,r'numpy_compress\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_compress,
REGEXP_MATCH( c.content,r'numpy_concatenate\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_concatenate,
REGEXP_MATCH( c.content,r'numpy_conj\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_conj,
REGEXP_MATCH( c.content,r'numpy_conjugate\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_conjugate,
REGEXP_MATCH( c.content,r'numpy_convolve\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_convolve,
REGEXP_MATCH( c.content,r'numpy_copy\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_copy,
REGEXP_MATCH( c.content,r'numpy_copysign\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_copysign,
REGEXP_MATCH( c.content,r'numpy_copyto\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_copyto,
REGEXP_MATCH( c.content,r'numpy_core\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_core,
REGEXP_MATCH( c.content,r'numpy_corrcoef\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_corrcoef,
REGEXP_MATCH( c.content,r'numpy_correlate\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_correlate,
REGEXP_MATCH( c.content,r'numpy_cos\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_cos,
REGEXP_MATCH( c.content,r'numpy_cosh\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_cosh,
REGEXP_MATCH( c.content,r'numpy_count_nonzero\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_count_nonzero,
REGEXP_MATCH( c.content,r'numpy_cov\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_cov,
REGEXP_MATCH( c.content,r'numpy_cross\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_cross,
REGEXP_MATCH( c.content,r'numpy_csingle\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_csingle,
REGEXP_MATCH( c.content,r'numpy_ctypeslib\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_ctypeslib,
REGEXP_MATCH( c.content,r'numpy_cumprod\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_cumprod,
REGEXP_MATCH( c.content,r'numpy_cumproduct\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_cumproduct,
REGEXP_MATCH( c.content,r'numpy_cumsum\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_cumsum,
REGEXP_MATCH( c.content,r'numpy_datetime64\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_datetime64,
REGEXP_MATCH( c.content,r'numpy_datetime_as_string\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_datetime_as_string,
REGEXP_MATCH( c.content,r'numpy_datetime_data\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_datetime_data,
REGEXP_MATCH( c.content,r'numpy_deg2rad\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_deg2rad,
REGEXP_MATCH( c.content,r'numpy_degrees\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_degrees,
REGEXP_MATCH( c.content,r'numpy_delete\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_delete,
REGEXP_MATCH( c.content,r'numpy_deprecate\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_deprecate,
REGEXP_MATCH( c.content,r'numpy_deprecate_with_doc\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_deprecate_with_doc,
REGEXP_MATCH( c.content,r'numpy_diag\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_diag,
REGEXP_MATCH( c.content,r'numpy_diag_indices\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_diag_indices,
REGEXP_MATCH( c.content,r'numpy_diag_indices_from\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_diag_indices_from,
REGEXP_MATCH( c.content,r'numpy_diagflat\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_diagflat,
REGEXP_MATCH( c.content,r'numpy_diagonal\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_diagonal,
REGEXP_MATCH( c.content,r'numpy_diff\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_diff,
REGEXP_MATCH( c.content,r'numpy_digitize\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_digitize,
REGEXP_MATCH( c.content,r'numpy_disp\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_disp,
REGEXP_MATCH( c.content,r'numpy_divide\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_divide,
REGEXP_MATCH( c.content,r'numpy_division\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_division,
REGEXP_MATCH( c.content,r'numpy_divmod\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_divmod,
REGEXP_MATCH( c.content,r'numpy_dot\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_dot,
REGEXP_MATCH( c.content,r'numpy_double\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_double,
REGEXP_MATCH( c.content,r'numpy_dsplit\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_dsplit,
REGEXP_MATCH( c.content,r'numpy_dstack\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_dstack,
REGEXP_MATCH( c.content,r'numpy_dtype\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_dtype,
REGEXP_MATCH( c.content,r'numpy_e\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_e,
REGEXP_MATCH( c.content,r'numpy_ediff1d\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_ediff1d,
REGEXP_MATCH( c.content,r'numpy_einsum\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_einsum,
REGEXP_MATCH( c.content,r'numpy_einsum_path\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_einsum_path,
REGEXP_MATCH( c.content,r'numpy_emath\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_emath,
REGEXP_MATCH( c.content,r'numpy_empty\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_empty,
REGEXP_MATCH( c.content,r'numpy_empty_like\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_empty_like,
REGEXP_MATCH( c.content,r'numpy_equal\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_equal,
REGEXP_MATCH( c.content,r'numpy_errstate\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_errstate,
REGEXP_MATCH( c.content,r'numpy_euler_gamma\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_euler_gamma,
REGEXP_MATCH( c.content,r'numpy_exp\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_exp,
REGEXP_MATCH( c.content,r'numpy_exp2\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_exp2,
REGEXP_MATCH( c.content,r'numpy_expand_dims\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_expand_dims,
REGEXP_MATCH( c.content,r'numpy_expm1\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_expm1,
REGEXP_MATCH( c.content,r'numpy_extract\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_extract,
REGEXP_MATCH( c.content,r'numpy_eye\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_eye,
REGEXP_MATCH( c.content,r'numpy_fabs\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_fabs,
REGEXP_MATCH( c.content,r'numpy_fastCopyAndTranspose\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_fastCopyAndTranspose,
REGEXP_MATCH( c.content,r'numpy_fft\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_fft,
REGEXP_MATCH( c.content,r'numpy_fill_diagonal\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_fill_diagonal,
REGEXP_MATCH( c.content,r'numpy_find_common_type\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_find_common_type,
REGEXP_MATCH( c.content,r'numpy_finfo\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_finfo,
REGEXP_MATCH( c.content,r'numpy_fix\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_fix,
REGEXP_MATCH( c.content,r'numpy_flatiter\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_flatiter,
REGEXP_MATCH( c.content,r'numpy_flatnonzero\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_flatnonzero,
REGEXP_MATCH( c.content,r'numpy_flexible\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_flexible,
REGEXP_MATCH( c.content,r'numpy_flip\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_flip,
REGEXP_MATCH( c.content,r'numpy_fliplr\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_fliplr,
REGEXP_MATCH( c.content,r'numpy_flipud\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_flipud,
REGEXP_MATCH( c.content,r'numpy_float\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_float,
REGEXP_MATCH( c.content,r'numpy_float128\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_float128,
REGEXP_MATCH( c.content,r'numpy_float16\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_float16,
REGEXP_MATCH( c.content,r'numpy_float32\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_float32,
REGEXP_MATCH( c.content,r'numpy_float64\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_float64,
REGEXP_MATCH( c.content,r'numpy_float_\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_float_,
REGEXP_MATCH( c.content,r'numpy_float_power\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_float_power,
REGEXP_MATCH( c.content,r'numpy_floating\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_floating,
REGEXP_MATCH( c.content,r'numpy_floor\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_floor,
REGEXP_MATCH( c.content,r'numpy_floor_divide\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_floor_divide,
REGEXP_MATCH( c.content,r'numpy_fmax\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_fmax,
REGEXP_MATCH( c.content,r'numpy_fmin\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_fmin,
REGEXP_MATCH( c.content,r'numpy_fmod\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_fmod,
REGEXP_MATCH( c.content,r'numpy_format_float_positional\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_format_float_positional,
REGEXP_MATCH( c.content,r'numpy_format_float_scientific\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_format_float_scientific,
REGEXP_MATCH( c.content,r'numpy_format_parser\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_format_parser,
REGEXP_MATCH( c.content,r'numpy_frexp\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_frexp,
REGEXP_MATCH( c.content,r'numpy_frombuffer\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_frombuffer,
REGEXP_MATCH( c.content,r'numpy_fromfile\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_fromfile,
REGEXP_MATCH( c.content,r'numpy_fromfunction\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_fromfunction,
REGEXP_MATCH( c.content,r'numpy_fromiter\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_fromiter,
REGEXP_MATCH( c.content,r'numpy_frompyfunc\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_frompyfunc,
REGEXP_MATCH( c.content,r'numpy_fromregex\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_fromregex,
REGEXP_MATCH( c.content,r'numpy_fromstring\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_fromstring,
REGEXP_MATCH( c.content,r'numpy_full\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_full,
REGEXP_MATCH( c.content,r'numpy_full_like\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_full_like,
REGEXP_MATCH( c.content,r'numpy_fv\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_fv,
REGEXP_MATCH( c.content,r'numpy_generic\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_generic,
REGEXP_MATCH( c.content,r'numpy_genfromtxt\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_genfromtxt,
REGEXP_MATCH( c.content,r'numpy_geomspace\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_geomspace,
REGEXP_MATCH( c.content,r'numpy_get_array_wrap\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_get_array_wrap,
REGEXP_MATCH( c.content,r'numpy_get_include\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_get_include,
REGEXP_MATCH( c.content,r'numpy_get_printoptions\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_get_printoptions,
REGEXP_MATCH( c.content,r'numpy_getbufsize\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_getbufsize,
REGEXP_MATCH( c.content,r'numpy_geterr\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_geterr,
REGEXP_MATCH( c.content,r'numpy_geterrcall\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_geterrcall,
REGEXP_MATCH( c.content,r'numpy_geterrobj\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_geterrobj,
REGEXP_MATCH( c.content,r'numpy_gradient\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_gradient,
REGEXP_MATCH( c.content,r'numpy_greater\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_greater,
REGEXP_MATCH( c.content,r'numpy_greater_equal\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_greater_equal,
REGEXP_MATCH( c.content,r'numpy_half\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_half,
REGEXP_MATCH( c.content,r'numpy_hamming\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_hamming,
REGEXP_MATCH( c.content,r'numpy_hanning\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_hanning,
REGEXP_MATCH( c.content,r'numpy_heaviside\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_heaviside,
REGEXP_MATCH( c.content,r'numpy_histogram\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_histogram,
REGEXP_MATCH( c.content,r'numpy_histogram2d\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_histogram2d,
REGEXP_MATCH( c.content,r'numpy_histogramdd\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_histogramdd,
REGEXP_MATCH( c.content,r'numpy_hsplit\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_hsplit,
REGEXP_MATCH( c.content,r'numpy_hstack\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_hstack,
REGEXP_MATCH( c.content,r'numpy_hypot\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_hypot,
REGEXP_MATCH( c.content,r'numpy_i0\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_i0,
REGEXP_MATCH( c.content,r'numpy_identity\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_identity,
REGEXP_MATCH( c.content,r'numpy_iinfo\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_iinfo,
REGEXP_MATCH( c.content,r'numpy_imag\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_imag,
REGEXP_MATCH( c.content,r'numpy_in1d\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_in1d,
REGEXP_MATCH( c.content,r'numpy_index_exp\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_index_exp,
REGEXP_MATCH( c.content,r'numpy_indices\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_indices,
REGEXP_MATCH( c.content,r'numpy_inexact\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_inexact,
REGEXP_MATCH( c.content,r'numpy_inf\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_inf,
REGEXP_MATCH( c.content,r'numpy_info\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_info,
REGEXP_MATCH( c.content,r'numpy_infty\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_infty,
REGEXP_MATCH( c.content,r'numpy_inner\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_inner,
REGEXP_MATCH( c.content,r'numpy_insert\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_insert,
REGEXP_MATCH( c.content,r'numpy_int\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_int,
REGEXP_MATCH( c.content,r'numpy_int0\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_int0,
REGEXP_MATCH( c.content,r'numpy_int16\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_int16,
REGEXP_MATCH( c.content,r'numpy_int32\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_int32,
REGEXP_MATCH( c.content,r'numpy_int64\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_int64,
REGEXP_MATCH( c.content,r'numpy_int8\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_int8,
REGEXP_MATCH( c.content,r'numpy_int_\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_int_,
REGEXP_MATCH( c.content,r'numpy_int_asbuffer\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_int_asbuffer,
REGEXP_MATCH( c.content,r'numpy_intc\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_intc,
REGEXP_MATCH( c.content,r'numpy_integer\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_integer,
REGEXP_MATCH( c.content,r'numpy_interp\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_interp,
REGEXP_MATCH( c.content,r'numpy_intersect1d\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_intersect1d,
REGEXP_MATCH( c.content,r'numpy_intp\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_intp,
REGEXP_MATCH( c.content,r'numpy_invert\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_invert,
REGEXP_MATCH( c.content,r'numpy_ipmt\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_ipmt,
REGEXP_MATCH( c.content,r'numpy_irr\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_irr,
REGEXP_MATCH( c.content,r'numpy_is_busday\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_is_busday,
REGEXP_MATCH( c.content,r'numpy_isclose\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_isclose,
REGEXP_MATCH( c.content,r'numpy_iscomplex\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_iscomplex,
REGEXP_MATCH( c.content,r'numpy_iscomplexobj\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_iscomplexobj,
REGEXP_MATCH( c.content,r'numpy_isfinite\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_isfinite,
REGEXP_MATCH( c.content,r'numpy_isfortran\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_isfortran,
REGEXP_MATCH( c.content,r'numpy_isin\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_isin,
REGEXP_MATCH( c.content,r'numpy_isinf\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_isinf,
REGEXP_MATCH( c.content,r'numpy_isnan\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_isnan,
REGEXP_MATCH( c.content,r'numpy_isnat\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_isnat,
REGEXP_MATCH( c.content,r'numpy_isneginf\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_isneginf,
REGEXP_MATCH( c.content,r'numpy_isposinf\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_isposinf,
REGEXP_MATCH( c.content,r'numpy_isreal\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_isreal,
REGEXP_MATCH( c.content,r'numpy_isrealobj\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_isrealobj,
REGEXP_MATCH( c.content,r'numpy_isscalar\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_isscalar,
REGEXP_MATCH( c.content,r'numpy_issctype\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_issctype,
REGEXP_MATCH( c.content,r'numpy_issubclass_\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_issubclass_,
REGEXP_MATCH( c.content,r'numpy_issubdtype\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_issubdtype,
REGEXP_MATCH( c.content,r'numpy_issubsctype\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_issubsctype,
REGEXP_MATCH( c.content,r'numpy_iterable\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_iterable,
REGEXP_MATCH( c.content,r'numpy_ix_\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_ix_,
REGEXP_MATCH( c.content,r'numpy_kaiser\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_kaiser,
REGEXP_MATCH( c.content,r'numpy_kron\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_kron,
REGEXP_MATCH( c.content,r'numpy_ldexp\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_ldexp,
REGEXP_MATCH( c.content,r'numpy_left_shift\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_left_shift,
REGEXP_MATCH( c.content,r'numpy_less\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_less,
REGEXP_MATCH( c.content,r'numpy_less_equal\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_less_equal,
REGEXP_MATCH( c.content,r'numpy_lexsort\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_lexsort,
REGEXP_MATCH( c.content,r'numpy_lib\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_lib,
REGEXP_MATCH( c.content,r'numpy_linalg\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_linalg,
REGEXP_MATCH( c.content,r'numpy_linspace\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_linspace,
REGEXP_MATCH( c.content,r'numpy_little_endian\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_little_endian,
REGEXP_MATCH( c.content,r'numpy_load\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_load,
REGEXP_MATCH( c.content,r'numpy_loads\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_loads,
REGEXP_MATCH( c.content,r'numpy_loadtxt\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_loadtxt,
REGEXP_MATCH( c.content,r'numpy_log\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_log,
REGEXP_MATCH( c.content,r'numpy_log10\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_log10,
REGEXP_MATCH( c.content,r'numpy_log1p\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_log1p,
REGEXP_MATCH( c.content,r'numpy_log2\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_log2,
REGEXP_MATCH( c.content,r'numpy_logaddexp\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_logaddexp,
REGEXP_MATCH( c.content,r'numpy_logaddexp2\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_logaddexp2,
REGEXP_MATCH( c.content,r'numpy_logical_and\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_logical_and,
REGEXP_MATCH( c.content,r'numpy_logical_not\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_logical_not,
REGEXP_MATCH( c.content,r'numpy_logical_or\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_logical_or,
REGEXP_MATCH( c.content,r'numpy_logical_xor\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_logical_xor,
REGEXP_MATCH( c.content,r'numpy_logspace\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_logspace,
REGEXP_MATCH( c.content,r'numpy_long\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_long,
REGEXP_MATCH( c.content,r'numpy_longcomplex\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_longcomplex,
REGEXP_MATCH( c.content,r'numpy_longdouble\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_longdouble,
REGEXP_MATCH( c.content,r'numpy_longfloat\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_longfloat,
REGEXP_MATCH( c.content,r'numpy_longlong\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_longlong,
REGEXP_MATCH( c.content,r'numpy_lookfor\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_lookfor,
REGEXP_MATCH( c.content,r'numpy_ma\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_ma,
REGEXP_MATCH( c.content,r'numpy_mafromtxt\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_mafromtxt,
REGEXP_MATCH( c.content,r'numpy_mask_indices\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_mask_indices,
REGEXP_MATCH( c.content,r'numpy_mat\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_mat,
REGEXP_MATCH( c.content,r'numpy_math\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_math,
REGEXP_MATCH( c.content,r'numpy_matmul\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_matmul,
REGEXP_MATCH( c.content,r'numpy_matrix\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_matrix,
REGEXP_MATCH( c.content,r'numpy_matrixlib\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_matrixlib,
REGEXP_MATCH( c.content,r'numpy_max\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_max,
REGEXP_MATCH( c.content,r'numpy_maximum\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_maximum,
REGEXP_MATCH( c.content,r'numpy_maximum_sctype\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_maximum_sctype,
REGEXP_MATCH( c.content,r'numpy_may_share_memory\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_may_share_memory,
REGEXP_MATCH( c.content,r'numpy_mean\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_mean,
REGEXP_MATCH( c.content,r'numpy_median\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_median,
REGEXP_MATCH( c.content,r'numpy_memmap\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_memmap,
REGEXP_MATCH( c.content,r'numpy_meshgrid\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_meshgrid,
REGEXP_MATCH( c.content,r'numpy_mgrid\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_mgrid,
REGEXP_MATCH( c.content,r'numpy_min\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_min,
REGEXP_MATCH( c.content,r'numpy_min_scalar_type\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_min_scalar_type,
REGEXP_MATCH( c.content,r'numpy_minimum\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_minimum,
REGEXP_MATCH( c.content,r'numpy_mintypecode\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_mintypecode,
REGEXP_MATCH( c.content,r'numpy_mirr\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_mirr,
REGEXP_MATCH( c.content,r'numpy_mod\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_mod,
REGEXP_MATCH( c.content,r'numpy_modf\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_modf,
REGEXP_MATCH( c.content,r'numpy_moveaxis\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_moveaxis,
REGEXP_MATCH( c.content,r'numpy_msort\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_msort,
REGEXP_MATCH( c.content,r'numpy_multiply\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_multiply,
REGEXP_MATCH( c.content,r'numpy_nan\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_nan,
REGEXP_MATCH( c.content,r'numpy_nan_to_num\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_nan_to_num,
REGEXP_MATCH( c.content,r'numpy_nanargmax\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_nanargmax,
REGEXP_MATCH( c.content,r'numpy_nanargmin\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_nanargmin,
REGEXP_MATCH( c.content,r'numpy_nancumprod\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_nancumprod,
REGEXP_MATCH( c.content,r'numpy_nancumsum\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_nancumsum,
REGEXP_MATCH( c.content,r'numpy_nanmax\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_nanmax,
REGEXP_MATCH( c.content,r'numpy_nanmean\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_nanmean,
REGEXP_MATCH( c.content,r'numpy_nanmedian\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_nanmedian,
REGEXP_MATCH( c.content,r'numpy_nanmin\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_nanmin,
REGEXP_MATCH( c.content,r'numpy_nanpercentile\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_nanpercentile,
REGEXP_MATCH( c.content,r'numpy_nanprod\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_nanprod,
REGEXP_MATCH( c.content,r'numpy_nanstd\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_nanstd,
REGEXP_MATCH( c.content,r'numpy_nansum\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_nansum,
REGEXP_MATCH( c.content,r'numpy_nanvar\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_nanvar,
REGEXP_MATCH( c.content,r'numpy_nbytes\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_nbytes,
REGEXP_MATCH( c.content,r'numpy_ndarray\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_ndarray,
REGEXP_MATCH( c.content,r'numpy_ndenumerate\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_ndenumerate,
REGEXP_MATCH( c.content,r'numpy_ndfromtxt\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_ndfromtxt,
REGEXP_MATCH( c.content,r'numpy_ndim\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_ndim,
REGEXP_MATCH( c.content,r'numpy_ndindex\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_ndindex,
REGEXP_MATCH( c.content,r'numpy_nditer\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_nditer,
REGEXP_MATCH( c.content,r'numpy_negative\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_negative,
REGEXP_MATCH( c.content,r'numpy_nested_iters\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_nested_iters,
REGEXP_MATCH( c.content,r'numpy_newaxis\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_newaxis,
REGEXP_MATCH( c.content,r'numpy_nextafter\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_nextafter,
REGEXP_MATCH( c.content,r'numpy_nonzero\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_nonzero,
REGEXP_MATCH( c.content,r'numpy_not_equal\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_not_equal,
REGEXP_MATCH( c.content,r'numpy_nper\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_nper,
REGEXP_MATCH( c.content,r'numpy_npv\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_npv,
REGEXP_MATCH( c.content,r'numpy_numarray\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_numarray,
REGEXP_MATCH( c.content,r'numpy_number\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_number,
REGEXP_MATCH( c.content,r'numpy_obj2sctype\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_obj2sctype,
REGEXP_MATCH( c.content,r'numpy_object\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_object,
REGEXP_MATCH( c.content,r'numpy_object0\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_object0,
REGEXP_MATCH( c.content,r'numpy_object_\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_object_,
REGEXP_MATCH( c.content,r'numpy_ogrid\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_ogrid,
REGEXP_MATCH( c.content,r'numpy_oldnumeric\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_oldnumeric,
REGEXP_MATCH( c.content,r'numpy_ones\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_ones,
REGEXP_MATCH( c.content,r'numpy_ones_like\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_ones_like,
REGEXP_MATCH( c.content,r'numpy_outer\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_outer,
REGEXP_MATCH( c.content,r'numpy_packbits\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_packbits,
REGEXP_MATCH( c.content,r'numpy_pad\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_pad,
REGEXP_MATCH( c.content,r'numpy_partition\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_partition,
REGEXP_MATCH( c.content,r'numpy_percentile\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_percentile,
REGEXP_MATCH( c.content,r'numpy_pi\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_pi,
REGEXP_MATCH( c.content,r'numpy_piecewise\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_piecewise,
REGEXP_MATCH( c.content,r'numpy_pkgload\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_pkgload,
REGEXP_MATCH( c.content,r'numpy_place\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_place,
REGEXP_MATCH( c.content,r'numpy_pmt\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_pmt,
REGEXP_MATCH( c.content,r'numpy_poly\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_poly,
REGEXP_MATCH( c.content,r'numpy_poly1d\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_poly1d,
REGEXP_MATCH( c.content,r'numpy_polyadd\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_polyadd,
REGEXP_MATCH( c.content,r'numpy_polyder\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_polyder,
REGEXP_MATCH( c.content,r'numpy_polydiv\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_polydiv,
REGEXP_MATCH( c.content,r'numpy_polyfit\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_polyfit,
REGEXP_MATCH( c.content,r'numpy_polyint\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_polyint,
REGEXP_MATCH( c.content,r'numpy_polymul\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_polymul,
REGEXP_MATCH( c.content,r'numpy_polynomial\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_polynomial,
REGEXP_MATCH( c.content,r'numpy_polysub\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_polysub,
REGEXP_MATCH( c.content,r'numpy_polyval\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_polyval,
REGEXP_MATCH( c.content,r'numpy_positive\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_positive,
REGEXP_MATCH( c.content,r'numpy_power\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_power,
REGEXP_MATCH( c.content,r'numpy_ppmt\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_ppmt,
REGEXP_MATCH( c.content,r'numpy_print_function\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_print_function,
REGEXP_MATCH( c.content,r'numpy_prod\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_prod,
REGEXP_MATCH( c.content,r'numpy_product\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_product,
REGEXP_MATCH( c.content,r'numpy_promote_types\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_promote_types,
REGEXP_MATCH( c.content,r'numpy_ptp\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_ptp,
REGEXP_MATCH( c.content,r'numpy_put\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_put,
REGEXP_MATCH( c.content,r'numpy_putmask\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_putmask,
REGEXP_MATCH( c.content,r'numpy_pv\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_pv,
REGEXP_MATCH( c.content,r'numpy_r_\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_r_,
REGEXP_MATCH( c.content,r'numpy_rad2deg\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_rad2deg,
REGEXP_MATCH( c.content,r'numpy_radians\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_radians,
REGEXP_MATCH( c.content,r'numpy_random\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_random,
REGEXP_MATCH( c.content,r'numpy_rank\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_rank,
REGEXP_MATCH( c.content,r'numpy_rate\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_rate,
REGEXP_MATCH( c.content,r'numpy_ravel\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_ravel,
REGEXP_MATCH( c.content,r'numpy_ravel_multi_index\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_ravel_multi_index,
REGEXP_MATCH( c.content,r'numpy_real\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_real,
REGEXP_MATCH( c.content,r'numpy_real_if_close\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_real_if_close,
REGEXP_MATCH( c.content,r'numpy_rec\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_rec,
REGEXP_MATCH( c.content,r'numpy_recarray\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_recarray,
REGEXP_MATCH( c.content,r'numpy_recfromcsv\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_recfromcsv,
REGEXP_MATCH( c.content,r'numpy_recfromtxt\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_recfromtxt,
REGEXP_MATCH( c.content,r'numpy_reciprocal\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_reciprocal,
REGEXP_MATCH( c.content,r'numpy_record\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_record,
REGEXP_MATCH( c.content,r'numpy_remainder\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_remainder,
REGEXP_MATCH( c.content,r'numpy_repeat\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_repeat,
REGEXP_MATCH( c.content,r'numpy_require\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_require,
REGEXP_MATCH( c.content,r'numpy_reshape\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_reshape,
REGEXP_MATCH( c.content,r'numpy_resize\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_resize,
REGEXP_MATCH( c.content,r'numpy_result_type\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_result_type,
REGEXP_MATCH( c.content,r'numpy_right_shift\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_right_shift,
REGEXP_MATCH( c.content,r'numpy_rint\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_rint,
REGEXP_MATCH( c.content,r'numpy_roll\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_roll,
REGEXP_MATCH( c.content,r'numpy_rollaxis\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_rollaxis,
REGEXP_MATCH( c.content,r'numpy_roots\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_roots,
REGEXP_MATCH( c.content,r'numpy_rot90\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_rot90,
REGEXP_MATCH( c.content,r'numpy_round\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_round,
REGEXP_MATCH( c.content,r'numpy_round_\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_round_,
REGEXP_MATCH( c.content,r'numpy_row_stack\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_row_stack,
REGEXP_MATCH( c.content,r'numpy_s_\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_s_,
REGEXP_MATCH( c.content,r'numpy_safe_eval\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_safe_eval,
REGEXP_MATCH( c.content,r'numpy_save\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_save,
REGEXP_MATCH( c.content,r'numpy_savetxt\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_savetxt,
REGEXP_MATCH( c.content,r'numpy_savez\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_savez,
REGEXP_MATCH( c.content,r'numpy_savez_compressed\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_savez_compressed,
REGEXP_MATCH( c.content,r'numpy_sctype2char\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_sctype2char,
REGEXP_MATCH( c.content,r'numpy_sctypeDict\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_sctypeDict,
REGEXP_MATCH( c.content,r'numpy_sctypeNA\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_sctypeNA,
REGEXP_MATCH( c.content,r'numpy_sctypes\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_sctypes,
REGEXP_MATCH( c.content,r'numpy_searchsorted\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_searchsorted,
REGEXP_MATCH( c.content,r'numpy_select\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_select,
REGEXP_MATCH( c.content,r'numpy_set_numeric_ops\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_set_numeric_ops,
REGEXP_MATCH( c.content,r'numpy_set_printoptions\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_set_printoptions,
REGEXP_MATCH( c.content,r'numpy_set_string_function\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_set_string_function,
REGEXP_MATCH( c.content,r'numpy_setbufsize\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_setbufsize,
REGEXP_MATCH( c.content,r'numpy_setdiff1d\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_setdiff1d,
REGEXP_MATCH( c.content,r'numpy_seterr\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_seterr,
REGEXP_MATCH( c.content,r'numpy_seterrcall\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_seterrcall,
REGEXP_MATCH( c.content,r'numpy_seterrobj\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_seterrobj,
REGEXP_MATCH( c.content,r'numpy_setxor1d\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_setxor1d,
REGEXP_MATCH( c.content,r'numpy_shape\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_shape,
REGEXP_MATCH( c.content,r'numpy_shares_memory\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_shares_memory,
REGEXP_MATCH( c.content,r'numpy_short\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_short,
REGEXP_MATCH( c.content,r'numpy_show_config\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_show_config,
REGEXP_MATCH( c.content,r'numpy_sign\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_sign,
REGEXP_MATCH( c.content,r'numpy_signbit\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_signbit,
REGEXP_MATCH( c.content,r'numpy_signedinteger\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_signedinteger,
REGEXP_MATCH( c.content,r'numpy_sin\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_sin,
REGEXP_MATCH( c.content,r'numpy_sinc\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_sinc,
REGEXP_MATCH( c.content,r'numpy_single\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_single,
REGEXP_MATCH( c.content,r'numpy_singlecomplex\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_singlecomplex,
REGEXP_MATCH( c.content,r'numpy_sinh\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_sinh,
REGEXP_MATCH( c.content,r'numpy_size\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_size,
REGEXP_MATCH( c.content,r'numpy_sometrue\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_sometrue,
REGEXP_MATCH( c.content,r'numpy_sort\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_sort,
REGEXP_MATCH( c.content,r'numpy_sort_complex\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_sort_complex,
REGEXP_MATCH( c.content,r'numpy_source\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_source,
REGEXP_MATCH( c.content,r'numpy_spacing\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_spacing,
REGEXP_MATCH( c.content,r'numpy_split\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_split,
REGEXP_MATCH( c.content,r'numpy_sqrt\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_sqrt,
REGEXP_MATCH( c.content,r'numpy_square\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_square,
REGEXP_MATCH( c.content,r'numpy_squeeze\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_squeeze,
REGEXP_MATCH( c.content,r'numpy_stack\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_stack,
REGEXP_MATCH( c.content,r'numpy_std\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_std,
REGEXP_MATCH( c.content,r'numpy_str\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_str,
REGEXP_MATCH( c.content,r'numpy_str0\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_str0,
REGEXP_MATCH( c.content,r'numpy_str_\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_str_,
REGEXP_MATCH( c.content,r'numpy_string_\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_string_,
REGEXP_MATCH( c.content,r'numpy_subtract\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_subtract,
REGEXP_MATCH( c.content,r'numpy_sum\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_sum,
REGEXP_MATCH( c.content,r'numpy_swapaxes\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_swapaxes,
REGEXP_MATCH( c.content,r'numpy_sys\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_sys,
REGEXP_MATCH( c.content,r'numpy_take\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_take,
REGEXP_MATCH( c.content,r'numpy_tan\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_tan,
REGEXP_MATCH( c.content,r'numpy_tanh\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_tanh,
REGEXP_MATCH( c.content,r'numpy_tensordot\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_tensordot,
REGEXP_MATCH( c.content,r'numpy_test\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_test,
REGEXP_MATCH( c.content,r'numpy_testing\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_testing,
REGEXP_MATCH( c.content,r'numpy_tile\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_tile,
REGEXP_MATCH( c.content,r'numpy_timedelta64\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_timedelta64,
REGEXP_MATCH( c.content,r'numpy_trace\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_trace,
REGEXP_MATCH( c.content,r'numpy_tracemalloc_domain\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_tracemalloc_domain,
REGEXP_MATCH( c.content,r'numpy_transpose\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_transpose,
REGEXP_MATCH( c.content,r'numpy_trapz\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_trapz,
REGEXP_MATCH( c.content,r'numpy_tri\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_tri,
REGEXP_MATCH( c.content,r'numpy_tril\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_tril,
REGEXP_MATCH( c.content,r'numpy_tril_indices\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_tril_indices,
REGEXP_MATCH( c.content,r'numpy_tril_indices_from\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_tril_indices_from,
REGEXP_MATCH( c.content,r'numpy_trim_zeros\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_trim_zeros,
REGEXP_MATCH( c.content,r'numpy_triu\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_triu,
REGEXP_MATCH( c.content,r'numpy_triu_indices\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_triu_indices,
REGEXP_MATCH( c.content,r'numpy_triu_indices_from\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_triu_indices_from,
REGEXP_MATCH( c.content,r'numpy_true_divide\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_true_divide,
REGEXP_MATCH( c.content,r'numpy_trunc\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_trunc,
REGEXP_MATCH( c.content,r'numpy_typeDict\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_typeDict,
REGEXP_MATCH( c.content,r'numpy_typeNA\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_typeNA,
REGEXP_MATCH( c.content,r'numpy_typecodes\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_typecodes,
REGEXP_MATCH( c.content,r'numpy_typename\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_typename,
REGEXP_MATCH( c.content,r'numpy_ubyte\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_ubyte,
REGEXP_MATCH( c.content,r'numpy_ufunc\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_ufunc,
REGEXP_MATCH( c.content,r'numpy_uint\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_uint,
REGEXP_MATCH( c.content,r'numpy_uint0\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_uint0,
REGEXP_MATCH( c.content,r'numpy_uint16\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_uint16,
REGEXP_MATCH( c.content,r'numpy_uint32\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_uint32,
REGEXP_MATCH( c.content,r'numpy_uint64\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_uint64,
REGEXP_MATCH( c.content,r'numpy_uint8\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_uint8,
REGEXP_MATCH( c.content,r'numpy_uintc\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_uintc,
REGEXP_MATCH( c.content,r'numpy_uintp\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_uintp,
REGEXP_MATCH( c.content,r'numpy_ulonglong\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_ulonglong,
REGEXP_MATCH( c.content,r'numpy_unicode\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_unicode,
REGEXP_MATCH( c.content,r'numpy_unicode_\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_unicode_,
REGEXP_MATCH( c.content,r'numpy_union1d\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_union1d,
REGEXP_MATCH( c.content,r'numpy_unique\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_unique,
REGEXP_MATCH( c.content,r'numpy_unpackbits\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_unpackbits,
REGEXP_MATCH( c.content,r'numpy_unravel_index\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_unravel_index,
REGEXP_MATCH( c.content,r'numpy_unsignedinteger\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_unsignedinteger,
REGEXP_MATCH( c.content,r'numpy_unwrap\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_unwrap,
REGEXP_MATCH( c.content,r'numpy_ushort\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_ushort,
REGEXP_MATCH( c.content,r'numpy_vander\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_vander,
REGEXP_MATCH( c.content,r'numpy_var\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_var,
REGEXP_MATCH( c.content,r'numpy_vdot\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_vdot,
REGEXP_MATCH( c.content,r'numpy_vectorize\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_vectorize,
REGEXP_MATCH( c.content,r'numpy_version\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_version,
REGEXP_MATCH( c.content,r'numpy_void\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_void,
REGEXP_MATCH( c.content,r'numpy_void0\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_void0,
REGEXP_MATCH( c.content,r'numpy_vsplit\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_vsplit,
REGEXP_MATCH( c.content,r'numpy_vstack\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_vstack,
REGEXP_MATCH( c.content,r'numpy_warnings\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_warnings,
REGEXP_MATCH( c.content,r'numpy_where\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_where,
REGEXP_MATCH( c.content,r'numpy_who\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_who,
REGEXP_MATCH( c.content,r'numpy_zeros\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_zeros,
REGEXP_MATCH( c.content,r'numpy_zeros_like\(\s?[A-Za-z0-9_]+\s?[.,/)]') AS numpy_zeros_like
FROM (SELECT
*
FROM
[bigquery-public-data:github_repos.sample_contents] AS c
INNER JOIN
(SELECT
*
FROM
[bigquery-public-data:github_repos.sample_files] AS f
WHERE
(
f.path LIKE '%.py' 
OR
f.path LIKE '%.ipynb'
) ) AS p
ON
c.id = p.id))